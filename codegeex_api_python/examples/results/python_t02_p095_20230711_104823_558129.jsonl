{"task_id": "Python/0", "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n", "generation": "    return any(abs(a - b) < threshold for a, b in zip(numbers[:-1], numbers[1:]))\n\n\ndef get_best_span(start_logits: List[float], end_logits: List[float]) -> Tuple[int, int]:\n    \"\"\"\n    In the typical AllenNLP configuration, we have two sets of start and end logits,\n    which are usually very close together (usually <unk> token is very close to each other).\n    This function finds the best pair of start and end logits that generate the maximum\n    probability sequence given the start and end logits.\n    Note that this function assumes that there are no ties in the probabilities of the end\n    logits.\n    Parameters\n    ----------\n    start_logits : ``List[float]``, required.\n        A list of start logits for a sequence.\n    end_logits : ``List[float]``, required.\n        A list of end logits for a sequence.\n    Returns\n    -------\n    best_spans : ``List[TypedStringSpan]``\n        The best pair of spans returned from the model, sorted by the start logit\n        of the span and the end logit of the span.\n    \"\"\"\n    if len(start_logits)!= len(end_logits):\n        raise ValueError(\"Input lists must have the same length.\")\n    if len(start_logits) == 0 or len(end_logits) == 0:\n        raise ValueError(\"Input lists must have at least length 1.\")\n    # In case there are no ties in the span probability, make sure we pick the best span.\n    start_indexes = [index for index in range(len(start_logits)) if start_logits[index] > start_logits[0]]\n    end_indexes = [index for index in range(len(end_logits)) if end_logits[index] > end_logits[0]]\n    if len(start_indexes) == 0 or len(end_indexes) == 0:\n        return start_indexes, end_indexes\n    # Otherwise we do a simple heuristic which picks the largest span start and end index.\n    return sorted(zip(start_indexes, end_indexes), key=lambda pair: (pair[0], pair[1]), reverse=True)[0]\n\n\ndef get_final_text(pred_text: str, orig_text: str, do_lower_case: bool, verbose_logging: bool) -> str:\n    \"\"\"Project the tokenized prediction back to the original text.\"\"\"\n\n    # When we created the data, we kept track of the alignment between original\n    # (whitespace tokenized) tokens and our WordPiece tokenized tokens. So\n    # now `orig_text` contains the span of our original text corresponding to the\n    # span that we predicted.\n    #\n    # However, `orig_text` may contain extra characters that we don't want in\n    # our prediction.\n    #\n    # For example, let's say:\n    #   pred_text = steve smith\n    #   orig_text = Steve Smith's\n    #\n    # We don't want to return `orig_text` because it contains the extra \"'s\".\n    #\n    # We don't want to return `pred_text` because it's already been normalized\n    # (the SQuAD eval script also does punctuation stripping/lower casing but\n    # our tokenizer does additional normalization like stripping accent\n    # characters).\n    #\n    # What we really want to return is \"Steve Smith\".\n    #\n    # Therefore, we have to apply a semi-complicated alignment heruistic between\n    # `pred_text` and `orig_text` to get a character-to-charcter alignment. This\n    # can fail in certain cases in which case we just return `orig_text"}
{"task_id": "Python/1", "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n", "generation": "    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement this function\n    # TODO: implement"}
{"task_id": "Python/2", "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n", "generation": "    return number - int(number)\n\n\ndef get_number_of_decimals(number: float) -> int:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the number of decimals of the number.\n    >>> get_number_of_decimals(3.5)\n    2\n    \"\"\"\n    return len(str(number).split(\".\")[1])\n\n\ndef get_number_of_decimals_for_list(number_list: List[float]) -> int:\n    \"\"\" Given a list of positive floating point numbers, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the number of decimals of the number.\n    >>> get_number_of_decimals_for_list([3.5, 2.5, 1.5])\n    3\n    \"\"\"\n    return sum(get_number_of_decimals(number) for number in number_list)\n\n\ndef get_number_of_decimals_for_set(number_set: Set[float]) -> int:\n    \"\"\" Given a set of positive floating point numbers, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the number of decimals of the number.\n    >>> get_number_of_decimals_for_set({3.5, 2.5, 1.5})\n    3\n    \"\"\"\n    return get_number_of_decimals_for_list(list(number_set))\n\n\ndef get_number_of_decimals_for_tuple(number_tuple: Tuple[float,...]) -> int:\n    \"\"\" Given a tuple of positive floating point numbers, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the number of decimals of the number.\n    >>> get_number_of_decimals_for_tuple((3.5, 2.5, 1.5))\n    3\n    \"\"\"\n    return get_number_of_decimals_for_list(list(number_tuple))\n\n\ndef get_number_of_decimals_for_dict(number_dict: Dict[float, float]) -> int:\n    \"\"\" Given a dictionary of positive floating point numbers, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the number of decimals of the number.\n    >>> get_number_of_decimals_for_dict({3.5: 2.5, 2.5: 1.5, 1.5: 0.5})\n    3\n    \"\"\"\n    return get_number_of_decimals_for_list(list(number_dict.values()))\n\n\ndef get_number_of_decimals_for_set_of_floats(number_set_of_floats: Set[float]) -> int:\n    \"\"\" Given a set of positive floating point numbers, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the number of decimals of the number.\n    >>> get_number_of_decimals_for_set_of_floats({3.5, 2.5, 1.5})\n    3\n    \"\"\"\n    return get_number_of_decimals_for_list(list(number_set_of_floats))\n\n\ndef get_number_of_decimals_for_dict_of_floats(\n    number_dict_of_floats: Dict[float, float]"}
{"task_id": "Python/3", "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n", "generation": "    for i in range(len(operations)):\n        if operations[i] < 0:\n            return True\n    return False\n\n\ndef is_balanced(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> is_balanced([1, 2, 3])\n    False\n    >>> is_balanced([1, 2, -4, 5])\n    False\n    >>> is_balanced([1, 2, -4, 5, -6, -7, -8, -9])\n    True\n    \"\"\"\n    balance = 0\n    for i in range(len(operations)):\n        balance += operations[i]\n        if balance < 0:\n            return False\n    return balance == 0\n\n\ndef is_balanced_2(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> is_balanced_2([1, 2, 3])\n    False\n    >>> is_balanced_2([1, 2, -4, 5])\n    False\n    >>> is_balanced_2([1, 2, -4, 5, -6, -7, -8, -9])\n    False\n    >>> is_balanced_2([1, 2, -4, 5, -6, -7, -8, -9, -10])\n    True\n    \"\"\"\n    balance = 0\n    for i in range(len(operations)):\n        balance += operations[i]\n        if balance < 0:\n            return False\n    return balance == 0\n\n\ndef is_balanced_3(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> is_balanced_3([1, 2, 3])\n    False\n    >>> is_balanced_3([1, 2, -4, 5])\n    False\n    >>> is_balanced_3([1, 2, -4, 5, -6, -7, -8, -9])\n    False\n    >>> is_balanced_3([1, 2, -4, 5, -6, -7, -8, -9, -10])\n    False\n    >>> is_balanced_3([1, 2, -4, 5, -6, -7, -8, -9, -10, -11])\n    True\n    \"\"\"\n    balance = 0\n    for i in range(len(operations)):\n        balance += operations[i]\n        if balance < 0:\n            return False\n    return balance == 0\n\n\ndef is_balanced_4(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> is_balanced_4([1, 2, 3])\n    False\n    >>> is_balanced_4([1, 2, -4, 5])\n    False\n    >>> is_balanced_4([1, 2, -4, 5, -6, -7, -8, -9])\n    False\n    >>> is_balanced_4([1, 2, -4, 5, -6"}
{"task_id": "Python/4", "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n", "generation": "    return sum(map(lambda x: abs(x - np.mean(numbers)), numbers)) / len(numbers)\n\n\ndef mean_absolute_percentage_error(y_true, y_pred):\n    \"\"\"\n    Calculate the mean absolute percentage error between two tensors.\n    :param y_true: The ground truth values.\n    :param y_pred: The predicted values.\n    :return: The mean absolute percentage error.\n    \"\"\"\n    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100\n\n\ndef mean_squared_error(y_true, y_pred):\n    \"\"\"\n    Calculate the mean squared error between two tensors.\n    :param y_true: The ground truth values.\n    :param y_pred: The predicted values.\n    :return: The mean squared error.\n    \"\"\"\n    return np.mean((y_true - y_pred) ** 2)\n\n\ndef mean_squared_logarithmic_error(y_true, y_pred):\n    \"\"\"\n    Calculate the mean squared logarithmic error between two tensors.\n    :param y_true: The ground truth values.\n    :param y_pred: The predicted values.\n    :return: The mean squared logarithmic error.\n    \"\"\"\n    return np.mean(np.square(np.log(y_true + 1) - np.log(y_pred + 1)))\n\n\ndef root_mean_squared_error(y_true, y_pred):\n    \"\"\"\n    Calculate the root mean squared error between two tensors.\n    :param y_true: The ground truth values.\n    :param y_pred: The predicted values.\n    :return: The root mean squared error.\n    \"\"\"\n    return np.sqrt(mean_squared_error(y_true, y_pred))\n\n\ndef root_mean_squared_logarithmic_error(y_true, y_pred):\n    \"\"\"\n    Calculate the root mean squared logarithmic error between two tensors.\n    :param y_true: The ground truth values.\n    :param y_pred: The predicted values.\n    :return: The root mean squared logarithmic error.\n    \"\"\"\n    return np.sqrt(mean_squared_logarithmic_error(y_true, y_pred))\n\n\ndef median_absolute_error(y_true, y_pred):\n    \"\"\"\n    Calculate the median absolute error between two tensors.\n    :param y_true: The ground truth values.\n    :param y_pred: The predicted values.\n    :return: The median absolute error.\n    \"\"\"\n    return np.median(np.abs(y_true - y_pred))\n\n\ndef mean_squared_logarithmic_error(y_true, y_pred):\n    \"\"\"\n    Calculate the mean squared logarithmic error between two tensors.\n    :param y_true: The ground truth values.\n    :param y_pred: The predicted values.\n    :return: The mean squared logarithmic error.\n    \"\"\"\n    return np.mean(np.square(np.log(y_true + 1) - np.log(y_pred + 1)))\n\n\ndef median_absolute_percentage_error(y_true, y_pred):\n    \"\"\"\n    Calculate the median absolute percentage error between two tensors.\n    :param y_true: The ground truth values.\n    :param y_pred: The predicted values.\n    :return: The median absolute percentage error.\n    \"\"\"\n    return np.median(np.abs((y_true - y_pred) / y_true)) * 100\n\n\ndef median_squared_error(y_true, y_pred):\n    \"\"\"\n    Calculate the median"}
{"task_id": "Python/5", "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n", "generation": "    return [delimeter] * (len(numbers) - 1) + numbers\n\n\ndef get_n_grams(input_list: List[str], n: int) -> List[List[str]]:\n    \"\"\" Returns a list of n-grams from a given list of strings\n    >>> get_n_grams(['a', 'b', 'c', 'd', 'e'], 2)\n    [['a', 'b'], ['b', 'c'], ['c', 'd'], ['d', 'e']]\n    \"\"\"\n    return [input_list[i:i + n] for i in range(len(input_list) - n + 1)]\n\n\ndef get_n_grams_from_file(input_file: str, n: int) -> List[List[str]]:\n    \"\"\" Returns a list of n-grams from a given file\n    >>> get_n_grams_from_file('data/sample_text.txt', 2)\n    [['a', 'b'], ['b', 'c'], ['c', 'd'], ['d', 'e']]\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        return get_n_grams(f.read().split(), n)\n\n\ndef get_n_grams_from_file_with_delimiter(input_file: str, n: int, delimiter: str) -> List[List[str]]:\n    \"\"\" Returns a list of n-grams from a given file with a given delimiter\n    >>> get_n_grams_from_file_with_delimiter('data/sample_text.txt', 2,'')\n    [['a', 'b'], ['b', 'c'], ['c', 'd'], ['d', 'e']]\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        return get_n_grams(f.read().split(delimiter), n)\n\n\ndef get_n_grams_from_file_with_delimiter_and_n(\n    input_file: str, n: int, delimiter: str\n) -> List[List[str]]:\n    \"\"\" Returns a list of n-grams from a given file with a given delimiter and n\n    >>> get_n_grams_from_file_with_delimiter_and_n('data/sample_text.txt', 2,'')\n    [['a', 'b'], ['b', 'c'], ['c', 'd'], ['d', 'e']]\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        return get_n_grams(f.read().split(delimiter), n)\n\n\ndef get_n_grams_from_file_with_delimiter_and_n_and_max_len(\n    input_file: str, n: int, delimiter: str, max_len: int\n) -> List[List[str]]:\n    \"\"\" Returns a list of n-grams from a given file with a given delimiter and n and max_len\n    >>> get_n_grams_from_file_with_delimiter_and_n_and_max_len('data/sample_text.txt', 2,'', 3)\n    [['a', 'b'], ['b', 'c'], ['c', 'd'], ['d', 'e']]\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        return get_n_grams(f.read().split(delimiter), n)\n\n\ndef get_n_grams_from_file_with_delimiter_and_n_and_max_len_and_min_len(\n    input_file: str, n: int, delimiter: str, max_len: int, min_len: int\n) -> List[List[str]]:\n    \"\"\" Returns a list of n-gram"}
{"task_id": "Python/6", "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n", "generation": "    # The first group is the outermost parentheses.\n    # The second group is the innermost parentheses.\n    # The third group is the innermost parentheses.\n    # The fourth group is the innermost parentheses.\n    # The fifth group is the innermost parentheses.\n    # The sixth group is the innermost parentheses.\n    # The seventh group is the innermost parentheses.\n    # The eighth group is the innermost parentheses.\n    # The ninth group is the innermost parentheses.\n    # The tenth group is the innermost parentheses.\n    # The eleventh group is the innermost parentheses.\n    # The twelfth group is the innermost parentheses.\n    # The thirteenth group is the innermost parentheses.\n    # The fourteenth group is the innermost parentheses.\n    # The fifteenth group is the innermost parentheses.\n    # The sixteenth group is the innermost parentheses.\n    # The seventeenth group is the innermost parentheses.\n    # The eighteenth group is the innermost parentheses.\n    # The nineteenth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group is the innermost parentheses.\n    # The twentieth group"}
{"task_id": "Python/7", "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n", "generation": "    return [s for s in strings if substring in s]\n\n\ndef filter_by_regex(strings: List[str], regex: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that match given regex\n    >>> filter_by_regex([], 'a')\n    []\n    >>> filter_by_regex(['abc', 'bacd', 'cde', 'array'], '^a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if re.search(regex, s)]\n\n\ndef filter_by_regex_or_substring(strings: List[str], regex: str, substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that match given regex or substring\n    >>> filter_by_regex_or_substring([], 'a', 'b')\n    []\n    >>> filter_by_regex_or_substring(['abc', 'bacd', 'cde', 'array'], '^a', 'b')\n    ['abc', 'bacd']\n    \"\"\"\n    return [s for s in strings if re.search(regex, s) or substring in s]\n\n\ndef filter_by_regex_or_substring_or_none(strings: List[str], regex: str, substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that match given regex or substring or None\n    >>> filter_by_regex_or_substring_or_none([], 'a', 'b')\n    []\n    >>> filter_by_regex_or_substring_or_none(['abc', 'bacd', 'cde', 'array'], '^a', 'b')\n    ['abc', 'bacd']\n    \"\"\"\n    return [s for s in strings if re.search(regex, s) or substring in s or s is None]\n\n\ndef filter_by_regex_or_none(strings: List[str], regex: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that match given regex or None\n    >>> filter_by_regex_or_none([], 'a')\n    []\n    >>> filter_by_regex_or_none(['abc', 'bacd', 'cde', 'array'], '^a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if re.search(regex, s) or s is None]\n\n\ndef filter_by_regex_or_substring_or_none_or_empty(\n    strings: List[str], regex: str, substring: str\n) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that match given regex or substring or None or empty\n    >>> filter_by_regex_or_substring_or_none_or_empty([], 'a', 'b')\n    []\n    >>> filter_by_regex_or_substring_or_none_or_empty(['abc', 'bacd', 'cde', 'array'], '^a', 'b')\n    ['abc', 'bacd']\n    \"\"\"\n    return [s for s in strings if re.search(regex, s) or substring in s or s is None or s == \"\"]\n\n\ndef filter_by_regex_or_substring_or_none_or_empty_or_none(\n    strings: List[str], regex: str, substring: str\n) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that match given regex or substring or None or empty or None\n    >>> filter_by_regex_or_substring_or_none_or_empty_or_none([], 'a', 'b')\n    []\n"}
{"task_id": "Python/8", "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n", "generation": "    if len(numbers) == 0:\n        return (0, 1)\n    else:\n        return (sum(numbers), product(numbers))\n\n\ndef sum_product_with_index(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    >>> sum_product_with_index([])\n    (0, 1)\n    >>> sum_product_with_index([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n        return (sum(numbers), product(numbers))\n\n\ndef sum_product_with_index_2(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    >>> sum_product_with_index_2([])\n    (0, 1)\n    >>> sum_product_with_index_2([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n        return (sum(numbers), product(numbers))\n\n\ndef sum_product_with_index_3(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    >>> sum_product_with_index_3([])\n    (0, 1)\n    >>> sum_product_with_index_3([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n        return (sum(numbers), product(numbers))\n\n\ndef sum_product_with_index_4(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    >>> sum_product_with_index_4([])\n    (0, 1)\n    >>> sum_product_with_index_4([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n        return (sum(numbers), product(numbers))\n\n\ndef sum_product_with_index_5(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    >>> sum_product_with_index_5([])\n    (0, 1)\n    >>> sum_product_with_index_5([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n        return (sum(numbers), product(numbers))\n\n\ndef sum_product_with_index_6(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    >>> sum_product_with_index_6([])\n    (0, 1)\n    >>> sum_product_with_index_6([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n        return (sum(numbers), product(numbers))\n\n\ndef sum_product_with"}
{"task_id": "Python/9", "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n", "generation": "    max_list = []\n    for i in range(len(numbers)):\n        if i == 0:\n            max_list.append(numbers[i])\n        else:\n            max_list.append(max(max_list[i - 1], numbers[i])))\n    return max_list\n\n\ndef rolling_min(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling minimum element found until given moment\n    in the sequence.\n    >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 2, 2, 3, 4, 4]\n    \"\"\"\n    min_list = []\n    for i in range(len(numbers)):\n        if i == 0:\n            min_list.append(numbers[i])\n        else:\n            min_list.append(min(min_list[i - 1], numbers[i])))\n    return min_list\n\n\ndef rolling_sum(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling sum element found until given moment\n    in the sequence.\n    >>> rolling_sum([1, 2, 3, 2, 3, 4, 2])\n    [1, 3, 6, 5, 7, 9, 9]\n    \"\"\"\n    sum_list = []\n    for i in range(len(numbers)):\n        if i == 0:\n            sum_list.append(numbers[i])\n        else:\n            sum_list.append(sum(sum_list[i - 1 : i + 1]))\n    return sum_list\n\n\ndef rolling_product(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling product element found until given moment\n    in the sequence.\n    >>> rolling_product([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 6, 24, 12, 48, 48]\n    \"\"\"\n    product_list = []\n    for i in range(len(numbers)):\n        if i == 0:\n            product_list.append(numbers[i])\n        else:\n            product_list.append(product(product_list[i - 1 : i + 1]))\n    return product_list\n\n\ndef rolling_average(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling average element found until given moment\n    in the sequence.\n    >>> rolling_average([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    average_list = []\n    for i in range(len(numbers)):\n        if i == 0:\n            average_list.append(numbers[i])\n        else:\n            average_list.append(sum(average_list[i - 1 : i + 1]) / (i + 1))\n    return average_list\n\n\ndef rolling_std(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling standard deviation element found until given moment\n    in the sequence.\n    >>> rolling_std([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    std_list = []\n    for i in range(len(numbers)):\n        if i == 0:\n            std_list.append(numbers[i])\n        else:\n            std_list.append(std(std_list[i - 1 : i + 1]))\n    return std_list\n\n\ndef rolling_mode(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling mode element found until given"}
{"task_id": "Python/10", "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n", "generation": "    # Find the longest postfix of supplied string that is a palindrome.\n    palindrome_postfix = \"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            palindrome_postfix = string[i:]\n            break\n\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + palindrome_postfix[::-1]\n\n\ndef make_palindrome_v2(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome_v2('')\n    ''\n    >>> make_palindrome_v2('cat')\n    'catac'\n    >>> make_palindrome_v2('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix of supplied string that is a palindrome.\n    palindrome_postfix = \"\"\n    for i in range(len(string)):\n        if is_palindrome_v2(string[i:]):\n            palindrome_postfix = string[i:]\n            break\n\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + palindrome_postfix[::-1]\n\n\ndef make_palindrome_v3(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome_v3('')\n    ''\n    >>> make_palindrome_v3('cat')\n    'catac'\n    >>> make_palindrome_v3('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix of supplied string that is a palindrome.\n    palindrome_postfix = \"\"\n    for i in range(len(string)):\n        if is_palindrome_v3(string[i:]):\n            palindrome_postfix = string[i:]\n            break\n\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + palindrome_postfix[::-1]\n\n\ndef make_palindrome_v4(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome_v4('')\n    ''\n    >>> make_palindrome_v4('cat')\n    'catac'\n    >>> make_palindrome_v4('cata')\n    'catac'\n    \"\"\"\n    # Find the longest postfix of supplied string that is a palindrome.\n    palindrome_postfix = \"\"\n    for i in range(len(string)):\n        if is_palindrome_v4(string[i:]"}
{"task_id": "Python/11", "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n", "generation": "    return ''.join(chr(ord(a) ^ ord(b)) for a, b in zip(a, b))\n\ndef string_xor_list(a: List[str], b: List[str]) -> List[str]:\n    \"\"\" Input are two lists of strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a list of strings.\n    >>> string_xor_list(['010', '110'], ['100', '111'])\n    ['000', '101']\n    \"\"\"\n    return [string_xor(a, b) for a, b in zip(a, b)]\n\ndef string_xor_dict(a: Dict[str, str], b: Dict[str, str]) -> Dict[str, str]:\n    \"\"\" Input are two dictionaries of strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a dictionary of strings.\n    >>> string_xor_dict({'010': '100', '110': '111'}, {'100': '000', '111': '101'})\n    {'000': '010', '101': '110'}\n    \"\"\"\n    return {k: string_xor(a[k], b[k]) for k in a}\n\ndef string_xor_dict_list(a: Dict[str, List[str]], b: Dict[str, List[str]]) -> Dict[str, List[str]]:\n    \"\"\" Input are two dictionaries of lists of strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a dictionary of lists of strings.\n    >>> string_xor_dict_list({'010': ['100', '111'], '110': ['100', '111']}, {'100': ['000', '101'], '111': ['000', '101']})\n    {'000': ['010', '110'], '101': ['010', '110']}\n    \"\"\"\n    return {k: string_xor_list(a[k], b[k]) for k in a}\n\ndef string_xor_dict_dict(a: Dict[str, Dict[str, str]], b: Dict[str, Dict[str, str]]) -> Dict[str, Dict[str, str]]:\n    \"\"\" Input are two dictionaries of dictionaries of strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a dictionary of dictionaries of strings.\n    >>> string_xor_dict_dict({'010': {'100': '000', '111': '101'}, '110': {'100': '000', '111': '101'}}, {'100': {'000': '010', '101': '110'}, '111': {'000': '010', '101': '110'}})\n    {'000': {'010': '100', '110': '111'}, '101': {'010': '100', '110': '111'}}\n    \"\"\"\n    return {k: string_xor_dict(a[k], b[k]) for k in a}\n\ndef string_xor_dict_dict_list(a: Dict[str, Dict[str, List[str]]], b: Dict[str, Dict[str, List[str]]]) -> Dict[str, Dict[str, List[str]]]:\n    \"\"\" Input are two dictionaries of dictionaries of lists of strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a dictionary of dictionaries of lists of strings.\n    >>> string_xor_dict_dict_list({'010': {'100': ['000', '101'], '111': ['000', '101']}, '110': {'100': ['000', '101'], '111': ['000', '101']"}
{"task_id": "Python/12", "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n", "generation": "    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n\n\ndef longest_substring(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest substring. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest_substring([])\n\n    >>> longest_substring(['a', 'b', 'c'])\n    'a'\n    >>> longest_substring(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_substring = strings[0]\n    for string in strings:\n        if len(longest_substring) < len(string):\n            longest_substring = string\n        for i in range(len(string)):\n            for j in range(i + 1, len(string) + 1):\n                if string[i:j] == string[i:j][::-1]:\n                    if len(string[i:j]) > len(longest_substring):\n                        longest_substring = string[i:j]\n    return longest_substring\n\n\ndef longest_substring_with_distinct(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest substring with distinct characters. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest_substring_with_distinct([])\n\n    >>> longest_substring_with_distinct(['a', 'b', 'c'])\n    'a'\n    >>> longest_substring_with_distinct(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_substring = strings[0]\n    for string in strings:\n        if len(longest_substring) < len(string):\n            longest_substring = string\n        for i in range(len(string)):\n            for j in range(i + 1, len(string) + 1):\n                if string[i:j] == string[i:j][::-1]:\n                    if len(string[i:j]) > len(longest_substring):\n                        longest_substring = string[i:j]\n    return longest_substring\n\n\ndef longest_substring_with_distinct_2(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest substring with distinct characters. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest_substring_with_distinct_2([])\n\n    >>> longest_substring_with_distinct_2(['a', 'b', 'c'])\n    'a'\n    >>> longest_substring_with_distinct_2(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_substring = strings[0]\n    for string in strings:\n        if len(longest_substring) < len(string):\n            longest_substring = string\n        for i in range(len(string)):\n            for j in range(i + 1, len(string) + 1):\n                if string[i:j] == string[i:j][::-1]:\n                    if len(string[i:j]) > len(longest_substring):\n                        longest_substring"}
{"task_id": "Python/13", "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n", "generation": "    if a == 0 or b == 0:\n        return 0\n    elif a == b:\n        return a\n    elif a > b:\n        return greatest_common_divisor(a - b, b)\n    else:\n        return greatest_common_divisor(a, b - a)\n\n\ndef get_n_best(prediction, n=10):\n    \"\"\" Return the n best predictions\n    >>> prediction = {'probability': 0.9, 'prediction': 'dog'}\n    >>> get_n_best(prediction, n=2)\n    [{'probability': 0.9, 'prediction': 'dog'}, {'probability': 0.1, 'prediction': 'cat'}]\n    \"\"\"\n    return sorted(prediction.items(), key=lambda x: x[1], reverse=True)[:n]\n\n\ndef get_n_best_predictions(predictions, n=10):\n    \"\"\" Return the n best predictions\n    >>> predictions = [{'probability': 0.9, 'prediction': 'dog'}, {'probability': 0.1, 'prediction': 'cat'}]\n    >>> get_n_best_predictions(predictions, n=2)\n    [{'probability': 0.9, 'prediction': 'dog'}, {'probability': 0.1, 'prediction': 'cat'}]\n    \"\"\"\n    return [prediction for prediction in predictions if prediction[\"probability\"] > 0.5]\n\n\ndef get_n_best_predictions_with_probabilities(predictions, n=10):\n    \"\"\" Return the n best predictions with probabilities\n    >>> predictions = [{'probability': 0.9, 'prediction': 'dog'}, {'probability': 0.1, 'prediction': 'cat'}]\n    >>> get_n_best_predictions_with_probabilities(predictions, n=2)\n    [{'probability': 0.9, 'prediction': 'dog'}, {'probability': 0.1, 'prediction': 'cat'}]\n    \"\"\"\n    return [prediction for prediction in predictions if prediction[\"probability\"] > 0.5]\n\n\ndef get_n_best_predictions_with_predictions(predictions, n=10):\n    \"\"\" Return the n best predictions with predictions\n    >>> predictions = [{'probability': 0.9, 'prediction': 'dog'}, {'probability': 0.1, 'prediction': 'cat'}]\n    >>> get_n_best_predictions_with_predictions(predictions, n=2)\n    [{'probability': 0.9, 'prediction': 'dog'}, {'probability': 0.1, 'prediction': 'cat'}]\n    \"\"\"\n    return [prediction for prediction in predictions if prediction[\"prediction\"]!= \"\"]\n\n\ndef get_n_best_predictions_with_probabilities_and_predictions(predictions, n=10):\n    \"\"\" Return the n best predictions with probabilities and predictions\n    >>> predictions = [{'probability': 0.9, 'prediction': 'dog'}, {'probability': 0.1, 'prediction': 'cat'}]\n    >>> get_n_best_predictions_with_probabilities_and_predictions(predictions, n=2)\n    [{'probability': 0.9, 'prediction': 'dog'}, {'probability': 0.1, 'prediction': 'cat'}]\n    \"\"\"\n    return [prediction for prediction in predictions if prediction[\"probability\"] > 0.5]\n\n\ndef get_n_best_predictions_with_probabilities_and_predictions_and_probabilities(\n    predictions, n=10\n):\n    \"\"\" Return the n best predictions with probabilities and predictions and probabilities\n    >>> predictions = [{'probability': 0.9, 'prediction': 'dog'},"}
{"task_id": "Python/14", "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n", "generation": "    return [string[:i] for i in range(1, len(string) + 1)]\n\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['c', 'bc', 'abc']\n    \"\"\"\n    return [string[-i:] for i in range(1, len(string) + 1)]\n\n\ndef all_substrings(string: str) -> List[str]:\n    \"\"\" Return list of all substrings of the input string\n    >>> all_substrings('abc')\n    ['a', 'ab', 'abc', 'b', 'c', 'bc', 'abc']\n    \"\"\"\n    return [string[i:j] for i in range(len(string)) for j in range(i + 1, len(string) + 1)]\n\n\ndef all_palindromes(string: str) -> List[str]:\n    \"\"\" Return list of all palindromes of the input string\n    >>> all_palindromes('abc')\n    ['a', 'ab', 'abc', 'b', 'c', 'bc', 'abc']\n    \"\"\"\n    return [string[i:j] for i in range(len(string)) for j in range(i + 1, len(string) + 1) if string[i:j] == string[i:j][::-1]]\n\n\ndef all_pairs(string: str) -> List[str]:\n    \"\"\" Return list of all pairs of characters in the input string\n    >>> all_pairs('abc')\n    ['a', 'b', 'c', 'ab', 'ac', 'bc', 'abc']\n    \"\"\"\n    return [string[i:j] for i in range(len(string)) for j in range(i + 1, len(string) + 1) if string[i:j] == string[i:j][::-1]]\n\n\ndef all_pairs_palindromes(string: str) -> List[str]:\n    \"\"\" Return list of all pairs of characters in the input string\n    >>> all_pairs_palindromes('abc')\n    ['a', 'b', 'c', 'ab', 'ac', 'bc', 'abc']\n    \"\"\"\n    return [string[i:j] for i in range(len(string)) for j in range(i + 1, len(string) + 1) if string[i:j] == string[i:j][::-1] and string[i:j] in all_palindromes(string)]\n\n\ndef all_pairs_palindromes_with_duplicates(string: str) -> List[str]:\n    \"\"\" Return list of all pairs of characters in the input string\n    >>> all_pairs_palindromes_with_duplicates('abc')\n    ['a', 'b', 'c', 'ab', 'ac', 'bc', 'abc']\n    \"\"\"\n    return [string[i:j] for i in range(len(string)) for j in range(i + 1, len(string) + 1) if string[i:j] == string[i:j][::-1] and string[i:j] in all_palindromes(string) and string[i:j] not in all_pairs_palindromes(string)]\n\n\ndef all_pairs_palindromes_with_duplicates_reversed(string: str) -> List[str]:\n    \"\"\" Return list of all pairs of characters in the input string\n    >>> all_pairs_palindromes_with_duplicates_reversed('abc')\n    ['a', 'b', 'c', 'ab', 'ac', 'bc', 'abc']\n    \"\"\"\n    return [string[i:j] for i in range(len(string)) for j in range(i + 1, len(string) + 1) if string[i:j] == string[i:j][::-1] and string[i:j] in all_palindromes(string) and string[i:j] not in all_pairs_palind"}
{"task_id": "Python/15", "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n", "generation": "    return \" \".join(str(i) for i in range(0, n + 1))\n\n\ndef string_sequence_to_int(string: str) -> int:\n    \"\"\" Return the integer corresponding to the string.\n    >>> string_sequence_to_int('0')\n    0\n    >>> string_sequence_to_int('1 2 3 4 5')\n    15\n    \"\"\"\n    return int(string)\n\n\ndef string_sequence_to_float(string: str) -> float:\n    \"\"\" Return the float corresponding to the string.\n    >>> string_sequence_to_float('0')\n    0.0\n    >>> string_sequence_to_float('1 2 3 4 5')\n    15.0\n    \"\"\"\n    return float(string)\n\n\ndef string_sequence_to_int_sequence(string: str) -> int:\n    \"\"\" Return the integer sequence corresponding to the string.\n    >>> string_sequence_to_int_sequence('0 1 2 3 4 5')\n    [0, 1, 2, 3, 4, 5]\n    \"\"\"\n    return [int(i) for i in string.split()]\n\n\ndef string_sequence_to_float_sequence(string: str) -> float:\n    \"\"\" Return the float sequence corresponding to the string.\n    >>> string_sequence_to_float_sequence('0 1 2 3 4 5')\n    [0.0, 1.0, 2.0, 3.0, 4.0, 5.0]\n    \"\"\"\n    return [float(i) for i in string.split()]\n\n\ndef string_sequence_to_int_sequence_sequence(string: str) -> int:\n    \"\"\" Return the integer sequence sequence corresponding to the string.\n    >>> string_sequence_to_int_sequence_sequence('0 1 2 3 4 5')\n    [[0, 1, 2, 3, 4, 5]]\n    \"\"\"\n    return [[int(i) for i in j.split()] for j in string.split()]\n\n\ndef string_sequence_to_float_sequence_sequence(string: str) -> float:\n    \"\"\" Return the float sequence sequence corresponding to the string.\n    >>> string_sequence_to_float_sequence_sequence('0 1 2 3 4 5')\n    [[0.0, 1.0, 2.0, 3.0, 4.0, 5.0]]\n    \"\"\"\n    return [[float(i) for i in j.split()] for j in string.split()]\n\n\ndef string_sequence_to_int_sequence_sequence_sequence(string: str) -> int:\n    \"\"\" Return the integer sequence sequence sequence corresponding to the string.\n    >>> string_sequence_to_int_sequence_sequence_sequence('0 1 2 3 4 5')\n    [[[0, 1, 2, 3, 4, 5]]]\n    \"\"\"\n    return [\n        [[int(i) for i in j.split()] for j in k.split()] for k in string.split()\n    ]\n\n\ndef string_sequence_to_float_sequence_sequence_sequence(string: str) -> float:\n    \"\"\" Return the float sequence sequence sequence corresponding to the string.\n    >>> string_sequence_to_float_sequence_sequence_sequence('0 1 2 3 4 5')\n    [[[0.0, 1.0, 2.0, 3.0, 4.0, 5.0]]]\n    \"\"\"\n    return [\n        [[float(i) for i in j.split()] for j in k.split()] for k in string.split()\n    ]\n\n\ndef string_sequence_to_int_sequence_sequence_sequence_sequence(\n    string: str,\n) -> int:\n    \"\"\" Return the integer sequence sequence sequence sequence corresponding to the string.\n    >>> string_sequence_to_int_sequence_sequence_sequence_sequence('0 1 2 3 4 5')\n    [[[[0, 1, 2, 3, 4, 5]]]]\n    \"\"\"\n    return [\n        [[[int(i) for i in j.split()] for j in k.split()] for k in l.split()]\n        for l in string"}
{"task_id": "Python/16", "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n", "generation": "    return len(set(string.lower()))\n\n\ndef count_distinct_words(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct words does it consist of\n    >>> count_distinct_words('xyzXYZ')\n    1\n    >>> count_distinct_words('Jerry')\n    2\n    \"\"\"\n    return len(set(string.split()))\n\n\ndef count_distinct_sentences(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct sentences does it consist of\n    >>> count_distinct_sentences('xyzXYZ')\n    1\n    >>> count_distinct_sentences('Jerry')\n    2\n    \"\"\"\n    return len(set(string.split(\".\")))\n\n\ndef count_distinct_paragraphs(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct paragraphs does it consist of\n    >>> count_distinct_paragraphs('xyzXYZ')\n    1\n    >>> count_distinct_paragraphs('Jerry')\n    2\n    \"\"\"\n    return len(set(string.split(\"\\n\")))\n\n\ndef count_distinct_paragraphs_with_sentences(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct paragraphs does it consist of\n    >>> count_distinct_paragraphs_with_sentences('xyzXYZ')\n    1\n    >>> count_distinct_paragraphs_with_sentences('Jerry')\n    2\n    \"\"\"\n    return len(set(string.split(\"\\n\\n\")))\n\n\ndef count_distinct_paragraphs_with_words(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct paragraphs does it consist of\n    >>> count_distinct_paragraphs_with_words('xyzXYZ')\n    1\n    >>> count_distinct_paragraphs_with_words('Jerry')\n    2\n    \"\"\"\n    return len(set(string.split(\"\\n\\n\\n\")))\n\n\ndef count_distinct_paragraphs_with_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct paragraphs does it consist of\n    >>> count_distinct_paragraphs_with_characters('xyzXYZ')\n    1\n    >>> count_distinct_paragraphs_with_characters('Jerry')\n    2\n    \"\"\"\n    return len(set(string.split(\"\\n\\n\\n\\n\")))\n\n\ndef count_distinct_paragraphs_with_words_and_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct paragraphs does it consist of\n    >>> count_distinct_paragraphs_with_words_and_characters('xyzXYZ')\n    1\n    >>> count_distinct_paragraphs_with_words_and_characters('Jerry')\n    2\n    \"\"\"\n    return len(set(string.split(\"\\n\\n\\n\\n\\n\")))\n\n\ndef count_distinct_paragraphs_with_sentences_and_words(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct paragraphs does it consist of\n    >>> count_distinct_paragraphs_with_sentences_and_words('xyzXYZ')\n    1\n    >>> count_distinct_paragraphs_with_sentences_and_words('Jerry')\n    2\n    \"\"\"\n    return len(set(string.split(\"\\n\\n\\n\\n\\n\\n\")))\n\n\ndef count_distinct_paragraphs_with_sentences_and_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct paragraphs does it consist of\n    >>> count_distinct_paragraphs_with_sentences_and_characters('xyzXYZ')\n    1\n    >>> count_distinct_paragraphs_with_sentences_and_characters('Jerry')\n    2\n    \"\"\"\n    return len(set(string"}
{"task_id": "Python/17", "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n", "generation": "    notes = music_string.split(' ')\n    return [len(note) for note in notes]\n\n\ndef parse_music_file(music_file: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music_file('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    with open(music_file, 'r') as f:\n        music_string = f.read()\n    return parse_music(music_string)\n\n\ndef parse_music_string(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music_string('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return parse_music(music_string)\n\n\ndef parse_music_file_string(music_file: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music_file_string('o o|.| o| o|.|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    with open(music_file, 'r') as f:\n        music_string = f.read()\n    return parse_music_string(music_string)\n\n\ndef parse_music_string_list(music_string_list: List[str]) -> List[int]:\n    \"\"\" Input to this function is a list of strings representing musical notes in a special ASCII format.\n    Your task is to parse these strings and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music_string_list(['o o|.| o| o|.|.|.|.| o o', 'o o|.| o| o|.|.|.|.| o o'])\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [parse_music_string(music_string) for music_string in music_string_list]\n\n\ndef parse_music_file_string_list(music_file_"}
{"task_id": "Python/18", "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n", "generation": "    if string == \"\" or substring == \"\":\n        return 0\n    if string.find(substring) == -1:\n        return 0\n    return len(string.split(substring))\n\n\ndef get_all_substrings(string: str) -> list:\n    \"\"\" Get all substrings in the string.\n    >>> get_all_substrings('a')\n    ['a']\n    >>> get_all_substrings('aa')\n    ['aa']\n    >>> get_all_substrings('aaa')\n    ['aa', 'aa']\n    \"\"\"\n    if string == \"\":\n        return []\n    return [string[i : j + 1] for i in range(len(string)) for j in range(i, len(string))]\n\n\ndef get_all_substrings_with_length(string: str, length: int) -> list:\n    \"\"\" Get all substrings with given length in the string.\n    >>> get_all_substrings_with_length('a', 1)\n    ['a']\n    >>> get_all_substrings_with_length('aa', 1)\n    ['aa']\n    >>> get_all_substrings_with_length('aaa', 1)\n    ['aa', 'aa']\n    >>> get_all_substrings_with_length('aaa', 2)\n    ['aa', 'aa']\n    \"\"\"\n    if string == \"\":\n        return []\n    return [string[i : j + 1] for i in range(len(string)) for j in range(i, len(string))]\n\n\ndef get_all_substrings_with_length_and_count(string: str, length: int, count: int) -> list:\n    \"\"\" Get all substrings with given length and count in the string.\n    >>> get_all_substrings_with_length_and_count('a', 1, 1)\n    ['a']\n    >>> get_all_substrings_with_length_and_count('aa', 1, 1)\n    ['aa']\n    >>> get_all_substrings_with_length_and_count('aaa', 1, 1)\n    ['aa', 'aa']\n    >>> get_all_substrings_with_length_and_count('aaa', 2, 1)\n    ['aa', 'aa']\n    \"\"\"\n    if string == \"\":\n        return []\n    return [string[i : j + 1] for i in range(len(string)) for j in range(i, len(string))]\n\n\ndef get_all_substrings_with_length_and_count_overlapping(\n    string: str, length: int, count: int\n) -> list:\n    \"\"\" Get all substrings with given length and count in the string. Count overlaping cases.\n    >>> get_all_substrings_with_length_and_count_overlapping('a', 1, 1)\n    ['a']\n    >>> get_all_substrings_with_length_and_count_overlapping('aa', 1, 1)\n    ['aa']\n    >>> get_all_substrings_with_length_and_count_overlapping('aaa', 1, 1)\n    ['aa', 'aa']\n    >>> get_all_substrings_with_length_and_count_overlapping('aaa', 2, 1)\n    ['aa', 'aa']\n    \"\"\"\n    if string == \"\":\n        return []\n    return [string[i : j + 1] for i in range(len(string)) for j in range(i, len(string))]\n\n\ndef get_all_substrings_with_length_and_count_overlapping_2(\n    string: str, length: int, count: int\n) -> list:\n    \"\"\" Get all substrings with given length and count in the string. Count overlaping cases.\n    >>> get_all_substrings_with_length_and_count_overlapping_2('a', 1, 1)\n    ['a']\n    >>> get_"}
{"task_id": "Python/19", "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n", "generation": "    numbers = numbers.split()\n    numbers.sort()\n    return''.join(numbers)\n\n\ndef sort_numbers_in_place(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_in_place('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers.sort(key=int)\n    return''.join(numbers)\n\n\ndef sort_numbers_in_place_reverse(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from largest to smallest\n    >>> sort_numbers_in_place_reverse('three one five')\n    'five three one'\n    \"\"\"\n    numbers = numbers.split()\n    numbers.sort(key=int, reverse=True)\n    return''.join(numbers)\n\n\ndef sort_numbers_in_place_random(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_in_place_random('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers.sort(key=random.random)\n    return''.join(numbers)\n\n\ndef sort_numbers_in_place_random_reverse(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from largest to smallest\n    >>> sort_numbers_in_place_random_reverse('three one five')\n    'five three one'\n    \"\"\"\n    numbers = numbers.split()\n    numbers.sort(key=random.random, reverse=True)\n    return''.join(numbers)\n\n\ndef sort_numbers_in_place_random_random(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_in_place_random_random('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n    numbers.sort(key=random.random, reverse=True, key=random.random)\n    return''.join(numbers)\n\n\ndef sort_numbers_in_place_random_random_reverse(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from largest to smallest\n    >>> sort_"}
{"task_id": "Python/20", "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n", "generation": "    if len(numbers) < 2:\n        raise ValueError(\"At least two numbers are required to find closest elements.\")\n    smallest_distance = float(\"inf\")\n    smallest_distance_index = 0\n    for i in range(len(numbers) - 1):\n        distance = abs(numbers[i + 1] - numbers[i])\n        if distance < smallest_distance:\n            smallest_distance = distance\n            smallest_distance_index = i + 1\n    return numbers[smallest_distance_index], numbers[smallest_distance_index + 1]\n\n\ndef find_closest_elements_with_index(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements_with_index([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements_with_index([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"At least two numbers are required to find closest elements.\")\n    smallest_distance = float(\"inf\")\n    smallest_distance_index = 0\n    for i in range(len(numbers) - 1):\n        distance = abs(numbers[i + 1] - numbers[i])\n        if distance < smallest_distance:\n            smallest_distance = distance\n            smallest_distance_index = i + 1\n    return numbers[smallest_distance_index], smallest_distance_index\n\n\ndef find_closest_elements_with_index_in_list(\n    numbers: List[float], index_to_find: int\n) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements_with_index_in_list([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 0)\n    (2.0, 2.2)\n    >>> find_closest_elements_with_index_in_list([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0)\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"At least two numbers are required to find closest elements.\")\n    smallest_distance = float(\"inf\")\n    smallest_distance_index = 0\n    for i in range(len(numbers) - 1):\n        distance = abs(numbers[i + 1] - numbers[i])\n        if distance < smallest_distance:\n            smallest_distance = distance\n            smallest_distance_index = i + 1\n    return numbers[smallest_distance_index], smallest_distance_index\n\n\ndef find_closest_elements_with_index_in_list_with_index(\n    numbers: List[float], index_to_find: int\n) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are"}
{"task_id": "Python/21", "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n", "generation": "    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]\n\n\ndef get_all_files(path: str, extension: str = None) -> List[str]:\n    \"\"\"\n    Returns all files in the given path with the given extension\n    :param path: path to the directory\n    :param extension: extension to look for\n    :return: list of files\n    \"\"\"\n    if extension is None:\n        return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n    else:\n        return [\n            f\n            for f in os.listdir(path)\n            if os.path.isfile(os.path.join(path, f)) and f.endswith(extension)\n        ]\n\n\ndef get_all_files_in_dir(path: str, extension: str = None) -> List[str]:\n    \"\"\"\n    Returns all files in the given path with the given extension\n    :param path: path to the directory\n    :param extension: extension to look for\n    :return: list of files\n    \"\"\"\n    if extension is None:\n        return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n    else:\n        return [\n            f\n            for f in os.listdir(path)\n            if os.path.isfile(os.path.join(path, f)) and f.endswith(extension)\n        ]\n\n\ndef get_all_files_in_dir_with_extension(path: str, extension: str) -> List[str]:\n    \"\"\"\n    Returns all files in the given path with the given extension\n    :param path: path to the directory\n    :param extension: extension to look for\n    :return: list of files\n    \"\"\"\n    if extension is None:\n        return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n    else:\n        return [\n            f\n            for f in os.listdir(path)\n            if os.path.isfile(os.path.join(path, f)) and f.endswith(extension)\n        ]\n\n\ndef get_all_files_in_dir_with_extension_recursively(path: str, extension: str) -> List[str]:\n    \"\"\"\n    Returns all files in the given path with the given extension\n    :param path: path to the directory\n    :param extension: extension to look for\n    :return: list of files\n    \"\"\"\n    if extension is None:\n        return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n    else:\n        return [\n            f\n            for f in os.listdir(path)\n            if os.path.isfile(os.path.join(path, f)) and f.endswith(extension)\n        ]\n\n\ndef get_all_files_in_dir_recursively(path: str) -> List[str]:\n    \"\"\"\n    Returns all files in the given path\n    :param path: path to the directory\n    :return: list of files\n    \"\"\"\n    if os.path.isdir(path):\n        return [\n            os.path.join(path, f)\n            for f in os.listdir(path)\n            if os.path.isfile(os.path.join(path, f))\n        ]\n    else:\n        return []\n\n\ndef get_all_files_in_dir_recursively_with"}
{"task_id": "Python/22", "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n", "generation": "    return [int(v) for v in values if isinstance(v, int)]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    [1.0, 2.0, 3.0]\n    \"\"\"\n    return [float(v) for v in values if isinstance(v, float)]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a', 5]\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [str(v) for v in values if isinstance(v, str)]\n\n\ndef filter_booleans(values: List[Any]) -> List[bool]:\n    \"\"\" Filter given list of any python values only for booleans\n    >>> filter_booleans(['a', 3.14, 5])\n    [True, True, True]\n    >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n    [True, True, True]\n    \"\"\"\n    return [bool(v) for v in values if isinstance(v, bool)]\n\n\ndef filter_none(values: List[Any]) -> List[Any]:\n    \"\"\" Filter given list of any python values only for None\n    >>> filter_none(['a', 3.14, 5])\n    ['a', 3.14, 5]\n    >>> filter_none([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3, 'abc', {}, []]\n    \"\"\"\n    return [v for v in values if v is not None]\n\n\ndef filter_none_or_empty(values: List[Any]) -> List[Any]:\n    \"\"\" Filter given list of any python values only for None or empty\n    >>> filter_none_or_empty(['a', 3.14, 5])\n    ['a', 3.14, 5]\n    >>> filter_none_or_empty([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3, 'abc', {}, []]\n    \"\"\"\n    return [v for v in values if v is not None and len(v) > 0]\n\n\ndef filter_none_or_empty_or_none(values: List[Any]) -> List[Any]:\n    \"\"\" Filter given list of any python values only for None or empty or None\n    >>> filter_none_or_empty_or_none(['a', 3.14, 5])\n    ['a', 3.14, 5]\n    >>> filter_none_or_empty_or_none([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3, 'abc', {}, []]\n    \"\"\"\n    return [v for v in values if v is not None and len(v) > 0 and v is not None]\n\n\ndef filter_none_or_empty_or_none_or_empty(values: List[Any]) -> List[Any]:\n    \"\"\" Filter given list of any python values only for None or empty or None or empty\n    >>> filter_none_or_empty_or_none_or_empty(['a', 3.14, 5])\n    ['a', 3.14, 5]\n    >>> filter_none_or_empty_or_none_or_empty([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3, 'abc', {}, []]\n    \"\"\"\n    return [\n        v\n        for v in values\n        if v is not None\n        and len(v) > 0\n"}
{"task_id": "Python/23", "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n", "generation": "    return len(string)\n\n\ndef strlen_bytes(string: bytes) -> int:\n    \"\"\" Return length of given string\n    >>> strlen_bytes(b'')\n    0\n    >>> strlen_bytes(b'abc')\n    3\n    \"\"\"\n    return len(string)\n\n\ndef strlen_bytearray(string: bytearray) -> int:\n    \"\"\" Return length of given string\n    >>> strlen_bytearray(bytearray(b''))\n    0\n    >>> strlen_bytearray(bytearray(b'abc'))\n    3\n    \"\"\"\n    return len(string)\n\n\ndef strlen_memoryview(string: memoryview) -> int:\n    \"\"\" Return length of given string\n    >>> strlen_memoryview(memoryview(b''))\n    0\n    >>> strlen_memoryview(memoryview(b'abc'))\n    3\n    \"\"\"\n    return len(string)\n\n\ndef strlen_bytearray_str(string: bytearray, encoding: str = \"utf-8\") -> int:\n    \"\"\" Return length of given string\n    >>> strlen_bytearray_str(bytearray(b''), encoding='utf-8')\n    0\n    >>> strlen_bytearray_str(bytearray(b'abc'), encoding='utf-8')\n    3\n    \"\"\"\n    return len(string)\n\n\ndef strlen_memoryview_str(string: memoryview, encoding: str = \"utf-8\") -> int:\n    \"\"\" Return length of given string\n    >>> strlen_memoryview_str(memoryview(b''), encoding='utf-8')\n    0\n    >>> strlen_memoryview_str(memoryview(b'abc'), encoding='utf-8')\n    3\n    \"\"\"\n    return len(string)\n\n\ndef strlen_bytearray_bytes(string: bytearray, encoding: str = \"utf-8\") -> int:\n    \"\"\" Return length of given string\n    >>> strlen_bytearray_bytes(bytearray(b''), encoding='utf-8')\n    0\n    >>> strlen_bytearray_bytes(bytearray(b'abc'), encoding='utf-8')\n    3\n    \"\"\"\n    return len(string)\n\n\ndef strlen_memoryview_bytes(string: memoryview, encoding: str = \"utf-8\") -> int:\n    \"\"\" Return length of given string\n    >>> strlen_memoryview_bytes(memoryview(b''), encoding='utf-8')\n    0\n    >>> strlen_memoryview_bytes(memoryview(b'abc'), encoding='utf-8')\n    3\n    \"\"\"\n    return len(string)\n\n\ndef strlen_bytearray_bytearray(string: bytearray, encoding: str = \"utf-8\") -> int:\n    \"\"\" Return length of given string\n    >>> strlen_bytearray_bytearray(bytearray(b''), encoding='utf-8')\n    0\n    >>> strlen_bytearray_bytearray(bytearray(b'abc'), encoding='utf-8')\n    3\n    \"\"\"\n    return len(string)\n\n\ndef strlen_memoryview_bytearray(string: memoryview, encoding: str = \"utf-8\") -> int:\n    \"\"\" Return length of given string\n    >>> strlen_memoryview_bytearray(memoryview(b''), encoding='utf-8')\n    0\n    >>> strlen_memoryview_bytearray(memoryview(b'abc'), encoding='utf-8')\n    3\n    \"\"\"\n    return len(string)\n\n\ndef strlen_bytearray_memoryview(string: bytearray, encoding: str = \"utf-8\") -> int:\n    \"\"\" Return length of given string\n    >>> strlen_bytearray_memoryview(bytearray(b''), encoding='utf-8')\n    0\n    >>> strlen_bytearray_memoryview(bytearray(b'abc'), encoding='utf-8')\n    "}
{"task_id": "Python/24", "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n", "generation": "    for i in range(1, n):\n        if n % i == 0:\n            return i\n\n\ndef largest_divisor_2(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor_2(15)\n    5\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n\n\ndef largest_divisor_3(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor_3(15)\n    5\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n\n\ndef largest_divisor_4(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor_4(15)\n    5\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n\n\ndef largest_divisor_5(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor_5(15)\n    5\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n\n\ndef largest_divisor_6(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor_6(15)\n    5\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n\n\ndef largest_divisor_7(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor_7(15)\n    5\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n\n\ndef largest_divisor_8(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor_8(15)\n    5\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n\n\ndef largest_divisor_9(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor_9(15)\n    5\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n\n\ndef largest_divisor_10(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor_10(15)\n    5\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n\n\ndef largest_divisor_11(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor_11(15)\n    5\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n\n\ndef largest_divisor_12(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor_12(15)\n    5\n    \"\"\"\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n\n\ndef largest_divisor_13(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that"}
{"task_id": "Python/25", "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n", "generation": "    if n == 1:\n        return [1]\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    return factors\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if given number is prime, otherwise False.\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_palindrome(n: int) -> bool:\n    \"\"\" Return True if given number is palindrome, otherwise False.\n    >>> is_palindrome(121)\n    True\n    >>> is_palindrome(12321)\n    True\n    >>> is_palindrome(1221)\n    False\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\n\ndef is_pandigital(n: int, n_digits: int) -> bool:\n    \"\"\" Return True if given number is pandigital, otherwise False.\n    >>> is_pandigital(123456789, 9)\n    True\n    >>> is_pandigital(123456789, 8)\n    False\n    >>> is_pandigital(123456789, 7)\n    False\n    \"\"\"\n    return len(str(n)) == n_digits and sorted(str(n)) == list(str(n))\n\n\ndef is_triangular(n: int) -> bool:\n    \"\"\" Return True if given number is triangular, otherwise False.\n    >>> is_triangular(0)\n    True\n    >>> is_triangular(1)\n    True\n    >>> is_triangular(2)\n    True\n    >>> is_triangular(3)\n    False\n    >>> is_triangular(4)\n    False\n    \"\"\"\n    return n == sum(range(n + 1))\n\n\ndef is_pentagonal(n: int) -> bool:\n    \"\"\" Return True if given number is pentagonal, otherwise False.\n    >>> is_pentagonal(0)\n    True\n    >>> is_pentagonal(1)\n    False\n    >>> is_pentagonal(2)\n    False\n    >>> is_pentagonal(3)\n    True\n    >>> is_pentagonal(4)\n    False\n    \"\"\"\n    return n == sum(range(n + 1, 1, -1))\n\n\ndef is_hexagonal(n: int) -> bool:\n    \"\"\" Return True if given number is hexagonal, otherwise False.\n    >>> is_hexagonal(0)\n    True\n    >>> is_hexagonal(1)\n    False\n    >>> is_hexagonal(2)\n    True\n    >>> is_hexagonal(3)\n    False\n    >>> is_hexagonal(4)\n    False\n    \"\"\"\n    return n == sum(range(n + 1, 2, -1))\n\n\ndef is_heptagonal(n: int) -> bool:\n    \"\"\" Return True if given number is heptagonal, otherwise False.\n    >>> is_heptagonal(0)\n    True\n    >>> is_heptagonal(1)\n    False\n    >>> is_heptagonal(2)\n    False\n    >>> is_heptagonal(3)\n    False\n    >>> is_heptagonal(4)\n    True\n"}
{"task_id": "Python/26", "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n", "generation": "    return list(set(numbers))\n\n\ndef remove_duplicates_sorted(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates_sorted([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    return sorted(list(set(numbers)))\n\n\ndef remove_duplicates_sorted_reverse(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates_sorted_reverse([1, 2, 3, 2, 4])\n    [4, 3, 1]\n    \"\"\"\n    return sorted(list(set(numbers)), reverse=True)\n\n\ndef remove_duplicates_sorted_reverse_2(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates_sorted_reverse_2([1, 2, 3, 2, 4])\n    [4, 3, 1]\n    \"\"\"\n    return sorted(list(set(numbers)), reverse=True)\n\n\ndef remove_duplicates_sorted_reverse_3(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates_sorted_reverse_3([1, 2, 3, 2, 4])\n    [4, 3, 1]\n    \"\"\"\n    return sorted(list(set(numbers)), reverse=True)\n\n\ndef remove_duplicates_sorted_reverse_4(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates_sorted_reverse_4([1, 2, 3, 2, 4])\n    [4, 3, 1]\n    \"\"\"\n    return sorted(list(set(numbers)), reverse=True)\n\n\ndef remove_duplicates_sorted_reverse_5(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates_sorted_reverse_5([1, 2, 3, 2, 4])\n    [4, 3, 1]\n    \"\"\"\n    return sorted(list(set(numbers)), reverse=True)\n\n\ndef remove_duplicates_sorted_reverse_6(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates_sorted_reverse_6([1, 2, 3, 2, 4])\n    [4, 3, 1]\n    \"\"\"\n    return sorted(list(set(numbers)), reverse=True)\n\n\ndef remove_duplicates_sorted_reverse_7(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates_sorted_reverse_7([1, 2, 3, 2, 4])\n    [4, 3, 1]\n    \"\"\"\n    return sorted(list(set(numbers)), reverse=True)\n\n\ndef remove_duplicates_sorted_reverse_8(numbers: List[int]) -> List[int]:\n    "}
{"task_id": "Python/27", "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n", "generation": "    return string.lower() + string.upper()\n\n\ndef get_random_string(length: int = 10) -> str:\n    \"\"\" Generate a random string of a given length.\n    >>> get_random_string(length=10)\n    'a'\n    \"\"\"\n    return \"\".join(random.choices(string.ascii_letters, k=length))\n\n\ndef get_random_number(length: int = 10) -> int:\n    \"\"\" Generate a random number of a given length.\n    >>> get_random_number(length=10)\n    0\n    \"\"\"\n    return int(\"\".join(random.choices(string.digits, k=length)))\n\n\ndef get_random_float(length: int = 10) -> float:\n    \"\"\" Generate a random float of a given length.\n    >>> get_random_float(length=10)\n    0.0\n    \"\"\"\n    return float(\"\".join(random.choices(string.digits, k=length)))\n\n\ndef get_random_boolean() -> bool:\n    \"\"\" Generate a random boolean.\n    >>> get_random_boolean()\n    False\n    \"\"\"\n    return bool(random.getrandbits(1))\n\n\ndef get_random_datetime(length: int = 10) -> datetime:\n    \"\"\" Generate a random datetime of a given length.\n    >>> get_random_datetime(length=10)\n    datetime.datetime(2018, 1, 1, 0, 0)\n    \"\"\"\n    return datetime.strptime(\n        \"\".join(random.choices(string.digits, k=length)), \"%Y%m%d%H%M%S\"\n    )\n\n\ndef get_random_date(length: int = 10) -> date:\n    \"\"\" Generate a random date of a given length.\n    >>> get_random_date(length=10)\n    datetime.date(2018, 1, 1)\n    \"\"\"\n    return datetime.strptime(\n        \"\".join(random.choices(string.digits, k=length)), \"%Y%m%d\"\n    ).date()\n\n\ndef get_random_time(length: int = 10) -> time:\n    \"\"\" Generate a random time of a given length.\n    >>> get_random_time(length=10)\n    datetime.time(0, 0)\n    \"\"\"\n    return datetime.strptime(\n        \"\".join(random.choices(string.digits, k=length)), \"%H%M%S\"\n    ).time()\n\n\ndef get_random_timedelta(length: int = 10) -> timedelta:\n    \"\"\" Generate a random timedelta of a given length.\n    >>> get_random_timedelta(length=10)\n    datetime.timedelta(0, 0)\n    \"\"\"\n    return timedelta(\n        seconds=int(\n            \"\".join(random.choices(string.digits, k=length))\n            * (60 * 60 * 24 * 365)\n        )\n    )\n\n\ndef get_random_timezone(length: int = 10) -> timezone:\n    \"\"\" Generate a random timezone of a given length.\n    >>> get_random_timezone(length=10)\n    datetime.timezone(datetime.timedelta(0, 0))\n    \"\"\"\n    return timezone(\n        timedelta(\n            seconds=int(\n                \"\".join(random.choices(string.digits, k=length))\n                * (60 * 60 * 24 * 365)\n            )\n        )\n    )\n\n\ndef get_random_email(length: int = 10) -> str:\n    \"\"\" Generate a random email of a given length.\n    >>> get_random_email(length=10)\n    'a@b.com'\n    \"\"\"\n    return \"\".join(random.choices(string.ascii_letters, k=length)) + \"@\" + \"\".join(\n        random.choices(string.ascii_letters, k=length)\n    )\n\n\ndef get"}
{"task_id": "Python/28", "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n", "generation": "    return ''.join(strings)\n\n\ndef get_file_extension(file_path: str) -> str:\n    \"\"\" Get file extension from file path\n    >>> get_file_extension('/path/to/file.txt')\n    'txt'\n    \"\"\"\n    return os.path.splitext(file_path)[1]\n\n\ndef get_file_name(file_path: str) -> str:\n    \"\"\" Get file name from file path\n    >>> get_file_name('/path/to/file.txt')\n    'file.txt'\n    \"\"\"\n    return os.path.basename(file_path)\n\n\ndef get_file_path(file_path: str) -> str:\n    \"\"\" Get file path from file path\n    >>> get_file_path('/path/to/file.txt')\n    '/path/to/file.txt'\n    \"\"\"\n    return os.path.dirname(file_path)\n\n\ndef get_file_paths(file_path: str) -> List[str]:\n    \"\"\" Get file paths from file path\n    >>> get_file_paths('/path/to/file.txt')\n    ['/path/to/file.txt']\n    \"\"\"\n    return [file_path] if os.path.isfile(file_path) else []\n\n\ndef get_file_size(file_path: str) -> int:\n    \"\"\" Get file size in bytes\n    >>> get_file_size('/path/to/file.txt')\n    12\n    \"\"\"\n    return os.path.getsize(file_path)\n\n\ndef get_file_mtime(file_path: str) -> int:\n    \"\"\" Get file modification time in milliseconds\n    >>> get_file_mtime('/path/to/file.txt')\n    1407859076\n    \"\"\"\n    return os.path.getmtime(file_path)\n\n\ndef get_file_ctime(file_path: str) -> int:\n    \"\"\" Get file creation time in milliseconds\n    >>> get_file_ctime('/path/to/file.txt')\n    1407859076\n    \"\"\"\n    return os.path.getctime(file_path)\n\n\ndef get_file_sha1(file_path: str) -> str:\n    \"\"\" Get file SHA1 hash\n    >>> get_file_sha1('/path/to/file.txt')\n    '2c9f2b5d9b0a5e6e9c8f7a9d7d8a9f2b5d9b0a5e6e'\n    \"\"\"\n    return hashlib.sha1(open(file_path, 'rb').read()).hexdigest()\n\n\ndef get_file_md5(file_path: str) -> str:\n    \"\"\" Get file MD5 hash\n    >>> get_file_md5('/path/to/file.txt')\n    'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n    \"\"\"\n    return hashlib.md5(open(file_path, 'rb').read()).hexdigest()\n\n\ndef get_file_sha256(file_path: str) -> str:\n    \"\"\" Get file SHA256 hash\n    >>> get_file_sha256('/path/to/file.txt')\n    '9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08'\n    \"\"\"\n    return hashlib.sha256(open(file_path, 'rb').read()).hexdigest()\n\n\ndef get_file_sha512(file_path: str) -> str:\n    \"\"\" Get file SHA512 hash\n    >>> get_file_sha512('/path/to/file.txt')\n    'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715"}
{"task_id": "Python/29", "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n", "generation": "    return [s for s in strings if s.startswith(prefix)]\n\n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([], 'a')\n    []\n    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'e')\n    ['abc', 'bcd', 'cde']\n    \"\"\"\n    return [s for s in strings if s.endswith(suffix)]\n\n\ndef filter_by_regex(strings: List[str], regex: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that match a given regex.\n    >>> filter_by_regex([], 'a')\n    []\n    >>> filter_by_regex(['abc', 'bcd', 'cde', 'array'], '^a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if re.search(regex, s)]\n\n\ndef filter_by_contains(strings: List[str], contains: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain a given string.\n    >>> filter_by_contains([], 'a')\n    []\n    >>> filter_by_contains(['abc', 'bcd', 'cde', 'array'], 'c')\n    ['cde', 'array']\n    \"\"\"\n    return [s for s in strings if contains in s]\n\n\ndef filter_by_length(strings: List[str], min_length: int, max_length: int) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that are between a given minimum and maximum length.\n    >>> filter_by_length([], 0, 0)\n    []\n    >>> filter_by_length(['abc', 'bcd', 'cde', 'array'], 1, 1)\n    ['abc', 'bcd', 'cde']\n    >>> filter_by_length(['abc', 'bcd', 'cde', 'array'], 2, 2)\n    ['abc', 'bcd', 'cde']\n    \"\"\"\n    return [s for s in strings if min_length <= len(s) <= max_length]\n\n\ndef filter_by_length_range(\n    strings: List[str], min_length: int, max_length: int\n) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that are between a given minimum and maximum length.\n    >>> filter_by_length_range([], 0, 0)\n    []\n    >>> filter_by_length_range(['abc', 'bcd', 'cde', 'array'], 1, 1)\n    ['abc', 'bcd', 'cde']\n    >>> filter_by_length_range(['abc', 'bcd', 'cde', 'array'], 2, 2)\n    ['abc', 'bcd', 'cde']\n    \"\"\"\n    return [s for s in strings if min_length <= len(s) <= max_length]\n\n\ndef filter_by_length_inclusive(\n    strings: List[str], min_length: int, max_length: int\n) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that are between a given minimum and maximum length.\n    >>> filter_by_length_inclusive([], 0, 0)\n    []\n    >>> filter_by_length_inclusive(['abc', 'bcd', 'cde', 'array'], 1, 1)\n    ['abc', 'bcd', 'cde']\n    >>> filter_by_length_inclusive(['abc', 'bcd', 'cde', 'array'], 2, 2)\n    ['abc', 'bcd', 'cde']\n    \"\"\"\n    return [s for s in"}
{"task_id": "Python/30", "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n", "generation": "    return [x for x in l if x > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4, -5, -6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-10, -3, -5, -2, -3, -9, -123, -1]\n    \"\"\"\n    return [x for x in l if x < 0]\n\n\ndef get_positive_and_negative(l: list):\n    \"\"\"Return only positive and negative numbers in the list.\n    >>> get_positive_and_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive_and_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return get_positive(get_negative(l))\n\n\ndef get_positive_and_negative_with_zero(l: list):\n    \"\"\"Return only positive and negative numbers with zero in the list.\n    >>> get_positive_and_negative_with_zero([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive_and_negative_with_zero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return get_positive(get_negative_with_zero(l))\n\n\ndef get_positive_and_negative_with_zero_and_positive(l: list):\n    \"\"\"Return only positive and negative numbers with zero and positive in the list.\n    >>> get_positive_and_negative_with_zero_and_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive_and_negative_with_zero_and_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return get_positive(get_negative_with_zero_and_positive(l))\n\n\ndef get_positive_and_negative_with_zero_and_positive_and_negative(l: list):\n    \"\"\"Return only positive and negative numbers with zero and positive and negative in the list.\n    >>> get_positive_and_negative_with_zero_and_positive_and_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive_and_negative_with_zero_and_positive_and_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return get_positive(get_negative_with_zero_and_positive_and_negative(l))\n\n\ndef get_positive_and_negative_with_zero_and_positive_and_negative_with_zero(\n    l: list,\n):\n    \"\"\"Return only positive and negative numbers with zero and positive and negative with zero in the list.\n    >>> get_positive_and_negative_with_zero_and_positive_and_negative_with_zero([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive_and_negative_with_zero_and_positive_and_negative_with_zero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1"}
{"task_id": "Python/31", "prompt": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n", "generation": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n\ndef is_prime_sieve(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime_sieve(6)\n    False\n    >>> is_prime_sieve(101)\n    True\n    >>> is_prime_sieve(11)\n    True\n    >>> is_prime_sieve(13441)\n    True\n    >>> is_prime_sieve(61)\n    True\n    >>> is_prime_sieve(4)\n    False\n    >>> is_prime_sieve(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n\ndef is_prime_sieve_2(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime_sieve_2(6)\n    False\n    >>> is_prime_sieve_2(101)\n    True\n    >>> is_prime_sieve_2(11)\n    True\n    >>> is_prime_sieve_2(13441)\n    True\n    >>> is_prime_sieve_2(61)\n    True\n    >>> is_prime_sieve_2(4)\n    False\n    >>> is_prime_sieve_2(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n\ndef is_prime_sieve_3(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime_sieve_3(6)\n    False\n    >>> is_prime_sieve_3(101)\n    True\n    >>> is_prime_sieve_3(11)\n    True\n    >>> is_prime_sieve_3(13441)\n    True\n    >>> is_prime_sieve_3(61)\n    True\n    >>> is_prime_sieve_3(4)\n    False\n    >>> is_prime_sieve_3(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n\ndef is_prime_sieve_4(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime_sieve_4(6)\n    False\n    >>> is_prime_sieve_4(101)\n    True\n    >>> is_prime_sieve_4(11)\n    True\n    >>> is_prime_sieve_4(13441)\n    True\n    >>> is_prime_sieve_4(61)\n    True\n    >>> is_prime_sieve_4(4)\n    False\n    >>>"}
{"task_id": "Python/32", "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n", "generation": "    # xs are coefficients of a polynomial.\n    # find_zero find x such that poly(x) = 0.\n    # find_zero returns only only zero point, even if there are many.\n    # Moreover, find_zero only takes list xs having even number of coefficients\n    # and largest non zero coefficient as it guarantees\n    # a solution.\n    #\n    # xs are coefficients of a polynomial.\n    # find_zero find x such that poly(x) = 0.\n    # find_zero returns only only zero point, even if there are many.\n    # Moreover, find_zero only takes list xs having even number of coefficients\n    # and largest non zero coefficient as it guarantees\n    # a solution.\n    #\n    # xs are coefficients of a polynomial.\n    # find_zero find x such that poly(x) = 0.\n    # find_zero returns only only zero point, even if there are many.\n    # Moreover, find_zero only takes list xs having even number of coefficients\n    # and largest non zero coefficient as it guarantees\n    # a solution.\n    #\n    # xs are coefficients of a polynomial.\n    # find_zero find x such that poly(x) = 0.\n    # find_zero returns only only zero point, even if there are many.\n    # Moreover, find_zero only takes list xs having even number of coefficients\n    # and largest non zero coefficient as it guarantees\n    # a solution.\n    #\n    # xs are coefficients of a polynomial.\n    # find_zero find x such that poly(x) = 0.\n    # find_zero returns only only zero point, even if there are many.\n    # Moreover, find_zero only takes list xs having even number of coefficients\n    # and largest non zero coefficient as it guarantees\n    # a solution.\n    #\n    # xs are coefficients of a polynomial.\n    # find_zero find x such that poly(x) = 0.\n    # find_zero returns only only zero point, even if there are many.\n    # Moreover, find_zero only takes list xs having even number of coefficients\n    # and largest non zero coefficient as it guarantees\n    # a solution.\n    #\n    # xs are coefficients of a polynomial.\n    # find_zero find x such that poly(x) = 0.\n    # find_zero returns only only zero point, even if there are many.\n    # Moreover, find_zero only takes list xs having even number of coefficients\n    # and largest non zero coefficient as it guarantees\n    # a solution.\n    #\n    # xs are coefficients of a polynomial.\n    # find_zero find x such that poly(x) = 0.\n    # find_zero returns only only zero point, even if there are many.\n    # Moreover, find_zero only takes list xs having even number of coefficients\n    # and largest non zero coefficient as it guarantees\n    # a solution.\n    #\n    # xs are coefficients of a polynomial.\n    # find_zero find x such that poly(x) = 0.\n    # find_zero returns only only zero point, even if there are many.\n    #"}
{"task_id": "Python/33", "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n", "generation": "    l = sorted(l)\n    l_prime = []\n    for i in range(len(l)):\n        if l[i] % 3 == 0:\n            l_prime.append(l[i])\n    return l_prime\n\n\ndef sort_first(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_first([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_first([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l = sorted(l)\n    l_prime = []\n    for i in range(len(l)):\n        if l[i] % 3!= 0:\n            l_prime.append(l[i])\n    return l_prime\n\n\ndef sort_second(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_second([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_second([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l = sorted(l)\n    l_prime = []\n    for i in range(len(l)):\n        if l[i] % 3 == 0:\n            l_prime.append(l[i])\n    return l_prime\n\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l = sorted(l)\n    l_prime = []\n    for i in range(len(l)):\n        if l[i] % 3!= 0:\n            l_prime.append(l[i])\n    return l_prime\n\n\ndef sort_first(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_first([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_first([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l = sorted(l)\n    l_prime = []\n    for i in range(len(l)):\n        if l[i] % 3!= 0:\n            l_prime.append(l[i])\n    return l_prime\n\n\ndef sort_second(l: list):\n    \"\"\"This function takes a list l and returns a list"}
{"task_id": "Python/34", "prompt": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n", "generation": "    return sorted(set(l))\n\n\ndef get_unique_elements(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n\ndef get_unique_elements_in_list(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n\ndef get_unique_elements_in_list_sorted(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n\ndef get_unique_elements_in_list_sorted_unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(get_unique_elements_in_list_sorted(l)))\n\n\ndef get_unique_elements_in_list_sorted_unique_in_list(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(get_unique_elements_in_list_sorted_unique(l)))\n\n\ndef get_unique_elements_in_list_sorted_unique_in_list_sorted(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(get_unique_elements_in_list_sorted_unique_in_list(l)))\n\n\ndef get_unique_elements_in_list_sorted_unique_in_list_sorted_unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(get_unique_elements_in_list_sorted_unique_in_list_sorted(l)))\n\n\ndef get_unique_elements_in_list_sorted_unique_in_list_sorted_unique_in_list(\n    l: list,\n):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(get_unique_elements_in_list_sorted_unique_in_list_sorted(l)))\n\n\ndef get_unique_elements_in_list_sorted_unique_in_list_sorted_unique_in_list_sorted(\n    l: list,\n):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(\n        set(get_unique_elements_in_list_sorted_unique_in_list_sorted_unique(l))\n    )\n\n\ndef get_unique_elements_in_list_sorted_unique_in_list_sorted_unique_in_list_sorted_unique(\n    l:"}
{"task_id": "Python/35", "prompt": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n", "generation": "    return max(l)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l)\n\n\ndef sum_list(l: list):\n    \"\"\"Return sum of all elements in the list.\n    >>> sum_list([1, 2, 3])\n    6\n    >>> sum_list([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -1\n    \"\"\"\n    return sum(l)\n\n\ndef product_list(l: list):\n    \"\"\"Return product of all elements in the list.\n    >>> product_list([1, 2, 3])\n    6\n    >>> product_list([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -1\n    \"\"\"\n    return product(l)\n\n\ndef count_list(l: list):\n    \"\"\"Return number of elements in the list.\n    >>> count_list([1, 2, 3])\n    3\n    >>> count_list([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    2\n    \"\"\"\n    return len(l)\n\n\ndef count_list_unique(l: list):\n    \"\"\"Return number of elements in the list.\n    >>> count_list_unique([1, 2, 3])\n    2\n    >>> count_list_unique([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    1\n    \"\"\"\n    return len(set(l))\n\n\ndef count_list_unique_2(l: list):\n    \"\"\"Return number of elements in the list.\n    >>> count_list_unique_2([1, 2, 3])\n    2\n    >>> count_list_unique_2([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    1\n    \"\"\"\n    return len(set(l))\n\n\ndef count_list_unique_3(l: list):\n    \"\"\"Return number of elements in the list.\n    >>> count_list_unique_3([1, 2, 3])\n    2\n    >>> count_list_unique_3([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    1\n    \"\"\"\n    return len(set(l))\n\n\ndef count_list_unique_4(l: list):\n    \"\"\"Return number of elements in the list.\n    >>> count_list_unique_4([1, 2, 3])\n    2\n    >>> count_list_unique_4([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    1\n    \"\"\"\n    return len(set(l))\n\n\ndef count_list_unique_5(l: list):\n    \"\"\"Return number of elements in the list.\n    >>> count_list_unique_5([1, 2, 3])\n    2\n    >>> count_list_unique_5([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    1\n    \"\"\"\n    return len(set(l))\n\n\ndef count_list_unique_6(l: list):\n    \"\"\"Return number of elements in the list.\n    >>> count_list_unique_6([1, 2, 3])\n    2\n    >>> count_list_unique_6([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    1\n    \"\"\"\n    return len(set(l))\n\n\ndef count_list_unique_7(l: list):\n    \"\"\"Return number of elements in the list.\n    >>> count"}
{"task_id": "Python/36", "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n", "generation": "    return sum(1 for i in range(1, n + 1) if i % 11 == 0 or i % 13 == 0)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n<|endoftext|>"}
{"task_id": "Python/37", "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n", "generation": "    l_prime = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(l[i])\n        else:\n            l_prime.append(l[i])\n            l_prime.sort()\n    return l_prime\n\n\ndef sort_pairs(l: list):\n    \"\"\"\n    >>> sort_pairs([1, 3, 2, 4])\n    [(1, 2), (3, 4)]\n    >>> sort_pairs([3, 1, 4, 2])\n    [(1, 2), (3, 4)]\n    >>> sort_pairs([1, 2, 2, 3])\n    [(1, 2), (2, 3)]\n    \"\"\"\n    l_prime = []\n    for i in range(len(l)):\n        l_prime.append((l[i], i))\n    l_prime.sort()\n    return l_prime\n\n\ndef merge(l1: list, l2: list):\n    \"\"\"\n    >>> merge([1, 2, 3], [4, 5, 6])\n    [1, 2, 3, 4, 5, 6]\n    >>> merge([1, 2, 3], [])\n    [1, 2, 3]\n    >>> merge([], [1, 2, 3])\n    [1, 2, 3]\n    \"\"\"\n    l_prime = []\n    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] < l2[j]:\n            l_prime.append(l1[i])\n            i += 1\n        else:\n            l_prime.append(l2[j])\n            j += 1\n    while i < len(l1):\n        l_prime.append(l1[i])\n        i += 1\n    while j < len(l2):\n        l_prime.append(l2[j])\n        j += 1\n    return l_prime\n\n\ndef merge_sort(l: list):\n    \"\"\"\n    >>> merge_sort([1, 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    >>> merge_sort([])\n    []\n    \"\"\"\n    if len(l) == 1:\n        return l\n    else:\n        l1 = l[: len(l) // 2]\n        l2 = l[len(l) // 2 :]\n        l1 = merge_sort(l1)\n        l2 = merge_sort(l2)\n        return merge(l1, l2)\n\n\ndef count_inversions(l: list):\n    \"\"\"\n    >>> count_inversions([1, 2, 3, 4, 5])\n    1\n    >>> count_inversions([1, 2, 3, 4, 5, 6])\n    2\n    >>> count_inversions([1, 2, 3, 4, 5, 6, 7])\n    3\n    >>> count_inversions([1, 2, 3, 4, 5, 6, 7, 8])\n    6\n    \"\"\"\n    if len(l) == 1:\n        return 0\n    else:\n        l1 = l[: len(l) // 2]\n        l2 = l[len(l) // 2 :]\n        l1 = count_inversions(l1)\n        l2 = count_inversions(l2)\n        return l1 + l2 + merge_count(l1, l2)\n\n\ndef merge_count(l1: list, l2: list):\n    \"\"\"\n    >>> merge_count([1, 2, 3, 4, 5], [6, 7, 8, 9])\n    0\n    >>> merge_count([1, 2, 3, 4, 5], [])\n    0\n    >>> merge_count([],"}
{"task_id": "Python/38", "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n", "generation": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef encode_cyclic_with_padding(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # pad groups with spaces.\n    groups = [group + \" \" * (3 - len(group)) for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic_with_padding(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # pad groups with spaces.\n    groups = [group + \" \" * (3 - len(group)) for group in groups]\n    return \"\".join(groups)\n\n\ndef encode_cyclic_with_padding_and_truncation(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # pad groups with spaces.\n    groups = [group + \" \" * (3 - len(group)) for group in groups]\n    return \"\".join(groups)[:3]\n\n\ndef decode_cyclic_with_padding_and_truncation(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # pad groups with spaces.\n    groups = [group + \" \" * (3 - len(group)) for group in groups]\n    return \"\".join(groups)[:3]\n\n\ndef encode_cyclic_with_padding_and_truncation_and_padding"}
{"task_id": "Python/39", "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n", "generation": "    if n <= 1:\n        return n\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n\n\ndef prime_fib_list(n: int):\n    \"\"\"\n    prime_fib_list returns a list of n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_list(1)\n    [2]\n    >>> prime_fib_list(2)\n    [3, 5]\n    >>> prime_fib_list(3)\n    [5, 13, 89]\n    >>> prime_fib_list(4)\n    [13, 89, 233, 610]\n    \"\"\"\n    if n <= 1:\n        return [n]\n    else:\n        return prime_fib_list(n - 1) + prime_fib_list(n - 2)\n\n\ndef prime_fib_list_with_index(n: int):\n    \"\"\"\n    prime_fib_list_with_index returns a list of n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_list_with_index(1)\n    [2]\n    >>> prime_fib_list_with_index(2)\n    [3, 5]\n    >>> prime_fib_list_with_index(3)\n    [5, 13, 89]\n    >>> prime_fib_list_with_index(4)\n    [13, 89, 233, 610]\n    \"\"\"\n    if n <= 1:\n        return [n]\n    else:\n        return prime_fib_list_with_index(n - 1) + [n - 1] + prime_fib_list_with_index(\n            n - 2\n        )\n\n\ndef prime_fib_list_with_index_with_index(n: int):\n    \"\"\"\n    prime_fib_list_with_index_with_index returns a list of n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_list_with_index_with_index(1)\n    [2]\n    >>> prime_fib_list_with_index_with_index(2)\n    [3, 5]\n    >>> prime_fib_list_with_index_with_index(3)\n    [5, 13, 89]\n    >>> prime_fib_list_with_index_with_index(4)\n    [13, 89, 233, 610]\n    \"\"\"\n    if n <= 1:\n        return [n]\n    else:\n        return prime_fib_list_with_index_with_index(n - 1) + [n - 1] + [n - 2]\n\n\ndef prime_fib_list_with_index_with_index_with_index(n: int):\n    \"\"\"\n    prime_fib_list_with_index_with_index_with_index returns a list of n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_list_with_index_with_index_with_index(1)\n    [2]\n    >>> prime_fib_list_with_index_with_index_with_index(2)\n    [3, 5]\n    >>> prime_fib_list_with_index_with_index_with_index(3)\n    [5, 13, 89]\n    >>> prime_fib_list_with_index_with_index_with_index(4)\n    [13, 89, 233, 610]\n    \"\"\"\n    if n <= 1:\n        return [n]\n    else:\n        return (\n            prime_fib_list_with_index_with_index_with_index(n - 1)\n            + [n - 1]\n            + [n - 2"}
{"task_id": "Python/40", "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n", "generation": "    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n\ndef triples_sum_to_zero_naive(l: list):\n    \"\"\"\n    triples_sum_to_zero_naive takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero_naive([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero_naive([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero_naive([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero_naive([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero_naive([1])\n    False\n    \"\"\"\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n\ndef triples_sum_to_zero_naive_2(l: list):\n    \"\"\"\n    triples_sum_to_zero_naive_2 takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero_naive_2([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero_naive_2([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero_naive_2([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero_naive_2([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero_naive_2([1])\n    False\n    \"\"\"\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n\ndef triples_sum_to_zero_naive_3(l: list):\n    \"\"\"\n    triples_sum_to_zero_naive_3 takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero_naive_3([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero_naive_3([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero_naive_3([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero_naive_3([2, 4, -5, 3, 9, 7])"}
{"task_id": "Python/41", "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n", "generation": "    collisions = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (\n                car_race_collision_helper(i, j)\n                and car_race_collision_helper(j, i)\n                and car_race_collision_helper(i, j)\n                and car_race_collision_helper(j, i)\n            ):\n                collisions += 1\n    return collisions\n\n\ndef car_race_collision_helper(i: int, j: int):\n    \"\"\"\n    Helper function for car_race_collision.\n    \"\"\"\n    return (\n        car_race_collision_helper_helper(i, j)\n        and car_race_collision_helper_helper(j, i)\n        and car_race_collision_helper_helper(i, j)\n        and car_race_collision_helper_helper(j, i)\n    )\n\n\ndef car_race_collision_helper_helper(i: int, j: int):\n    \"\"\"\n    Helper function for car_race_collision_helper.\n    \"\"\"\n    return (\n        car_race_collision_helper_helper_helper(i, j)\n        and car_race_collision_helper_helper_helper(j, i)\n        and car_race_collision_helper_helper_helper(i, j)\n        and car_race_collision_helper_helper_helper(j, i)\n    )\n\n\ndef car_race_collision_helper_helper_helper(i: int, j: int):\n    \"\"\"\n    Helper function for car_race_collision_helper_helper.\n    \"\"\"\n    return (\n        car_race_collision_helper_helper_helper_helper(i, j)\n        and car_race_collision_helper_helper_helper_helper(j, i)\n        and car_race_collision_helper_helper_helper_helper(i, j)\n        and car_race_collision_helper_helper_helper_helper(j, i)\n    )\n\n\ndef car_race_collision_helper_helper_helper_helper(i: int, j: int):\n    \"\"\"\n    Helper function for car_race_collision_helper_helper_helper.\n    \"\"\"\n    return (\n        car_race_collision_helper_helper_helper_helper_helper(i, j)\n        and car_race_collision_helper_helper_helper_helper_helper(j, i)\n        and car_race_collision_helper_helper_helper_helper_helper(i, j)\n        and car_race_collision_helper_helper_helper_helper_helper(j, i)\n    )\n\n\ndef car_race_collision_helper_helper_helper_helper(i: int, j: int):\n    \"\"\"\n    Helper function for car_race_collision_helper_helper_helper_helper.\n    \"\"\"\n    return (\n        car_race_collision_helper_helper_helper_helper_helper_helper(i, j)\n        and car_race_collision_helper_helper_helper_helper_helper_helper(j, i)\n        and car_race_collision_hel"}
{"task_id": "Python/42", "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n", "generation": "    return [x + 1 for x in l]\n\n\ndef get_max_value(l: list):\n    \"\"\"Return the maximum value in a list.\n    >>> get_max_value([1, 2, 3])\n    3\n    >>> get_max_value([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    10\n    \"\"\"\n    return max(l)\n\n\ndef get_max_value_incr_list(l: list):\n    \"\"\"Return the maximum value in a list.\n    >>> get_max_value_incr_list([1, 2, 3])\n    3\n    >>> get_max_value_incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    10\n    \"\"\"\n    return max(incr_list(l))\n\n\ndef add_lists(x: list, y: list):\n    \"\"\"Return the sum of the two lists x and y.\n    >>> add_lists([1, 2, 3], [4, 5, 6])\n    [7, 8, 9]\n    \"\"\"\n    return [x[i] + y[i] for i in range(len(x))]\n\n\ndef mult_lists(x: list, y: list):\n    \"\"\"Return the product of the two lists x and y.\n    >>> mult_lists([1, 2, 3], [4, 5, 6])\n    24\n    \"\"\"\n    return [x[i] * y[i] for i in range(len(x))]\n\n\ndef index(l: list, e: int):\n    \"\"\"Return the index of the first element of list l equal to e.\n    >>> index([1, 2, 3], 3)\n    0\n    >>> index([1, 2, 3], 2)\n    1\n    >>> index([1, 2, 3], 1)\n    2\n    \"\"\"\n    for i in range(len(l)):\n        if l[i] == e:\n            return i\n    return -1\n\n\ndef contains(l: list, e: int):\n    \"\"\"Return True if list l contains element e,\n    and False otherwise.\n    >>> contains([1, 2, 3], 2)\n    True\n    >>> contains([1, 2, 3], 4)\n    False\n    \"\"\"\n    return index(l, e)!= -1\n\n\ndef count_if(condition: callable, l: list):\n    \"\"\"Return the number of elements in list l\n    which satisfy the predicate condition.\n    >>> count_if(lambda x: x == 2, [1, 2, 3, 4])\n    2\n    >>> count_if(lambda x: x > 2, [1, 2, 3, 4])\n    3\n    \"\"\"\n    count = 0\n    for i in l:\n        if condition(i):\n            count += 1\n    return count\n\n\ndef count_if_not(condition: callable, l: list):\n    \"\"\"Return the number of elements in list l\n    which do not satisfy the predicate condition.\n    >>> count_if_not(lambda x: x == 2, [1, 2, 3, 4])\n    1\n    >>> count_if_not(lambda x: x > 2, [1, 2, 3, 4])\n    3\n    \"\"\"\n    return len(l) - count_if(condition, l)\n\n\ndef find_if(l: list, predicate: callable):\n    \"\"\"Return the first element of l that satisfies predicate.\n    >>> find_if([1, 2, 3], lambda x: x > 2)\n    2\n    >>> find_if([1, 2, 3], lambda x: x == 0)\n    \"\"\"\n    for i in l:\n        if predicate(i):\n            return i\n    return None\n\n\ndef find_if_not(l: list, predicate: callable):\n    \"\"\"Return the first element of l that does not satisfy\n    predicate.\n    >>> find_if_not([1,"}
{"task_id": "Python/43", "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n", "generation": "    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\ndef pairs_sum_to_zero_2(l):\n    \"\"\"\n    pairs_sum_to_zero_2 takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_2([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero_2([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero_2([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero_2([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero_2([1])\n    False\n    \"\"\"\n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\ndef pairs_sum_to_zero_3(l):\n    \"\"\"\n    pairs_sum_to_zero_3 takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_3([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero_3([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero_3([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero_3([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero_3([1])\n    False\n    \"\"\"\n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\ndef pairs_sum_to_zero_4(l):\n    \"\"\"\n    pairs_sum_to_zero_4 takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_4([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero_4([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero_4([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero_4([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero_4([1])\n    False\n    \"\"\"\n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\ndef pairs_sum_to_zero_5(l):\n    \"\"\"\n    pairs_sum_to_zero_5 takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum"}
{"task_id": "Python/44", "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n", "generation": "    if base < 2:\n        raise ValueError(\"base must be greater than 1.\")\n    if base > 10:\n        raise ValueError(\"base must be less than 10.\")\n    if x < 0:\n        raise ValueError(\"x must be greater than 0.\")\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return \"\".join(reversed(digits))\n\n\ndef change_base_2(x: int):\n    \"\"\"Change numerical base of input number x to base 2.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_2(8)\n    '1000'\n    >>> change_base_2(7)\n    '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"x must be greater than 0.\")\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % 2))\n        x //= 2\n    return \"\".join(reversed(digits))\n\n\ndef change_base_3(x: int):\n    \"\"\"Change numerical base of input number x to base 3.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_3(8)\n    '11100'\n    >>> change_base_3(7)\n    '11111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"x must be greater than 0.\")\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % 3))\n        x //= 3\n    return \"\".join(reversed(digits))\n\n\ndef change_base_4(x: int):\n    \"\"\"Change numerical base of input number x to base 4.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_4(8)\n    '11100'\n    >>> change_base_4(7)\n    '11111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"x must be greater than 0.\")\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % 4))\n        x //= 4\n    return \"\".join(reversed(digits))\n\n\ndef change_base_5(x: int):\n    \"\"\"Change numerical base of input number x to base 5.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_5(8)\n    '11100'\n    >>> change_base_5(7)\n    '11111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"x must be greater than 0.\")\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % 5))\n        x //= 5\n    return \"\".join(reversed(digits))\n\n\ndef change_base_6(x: int):\n    \"\"\"Change numerical base of input number x to base 6.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_6(8)\n    '11100'\n    >>> change_base_6(7)\n    '11111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"x must be greater than 0.\")\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % 6))\n        x //= 6\n    return \"\".join(reversed(digits))\n\n\ndef change_"}
{"task_id": "Python/45", "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n", "generation": "    return 0.5 * h * a\n\n\ndef triangle_perimeter(a, h):\n    \"\"\"Given length of a side and high return perimeter for a triangle.\n    >>> triangle_perimeter(5, 3)\n    12.0\n    \"\"\"\n    return a + h + a\n\n\ndef triangle_circumference(a, h):\n    \"\"\"Given length of a side and high return circumference for a triangle.\n    >>> triangle_circumference(5, 3)\n    14.0\n    \"\"\"\n    return 2 * triangle_area(a, h)\n\n\ndef triangle_inradius(a, h):\n    \"\"\"Given length of a side and high return inradius for a triangle.\n    >>> triangle_inradius(5, 3)\n    2.0\n    \"\"\"\n    return triangle_area(a, h) / (2 * a)\n\n\ndef triangle_outradius(a, h):\n    \"\"\"Given length of a side and high return outradius for a triangle.\n    >>> triangle_outradius(5, 3)\n    3.0\n    \"\"\"\n    return triangle_area(a, h) / (2 * h)\n\n\ndef triangle_eccentricity(a, h):\n    \"\"\"Given length of a side and high return eccentricity for a triangle.\n    >>> triangle_eccentricity(5, 3)\n    2.0\n    \"\"\"\n    return triangle_circumference(a, h) / triangle_area(a, h)\n\n\ndef triangle_semiperimeter(a, h):\n    \"\"\"Given length of a side and high return semiperimeter for a triangle.\n    >>> triangle_semiperimeter(5, 3)\n    7.0\n    \"\"\"\n    return triangle_perimeter(a, h) / 2\n\n\ndef triangle_equilateral(a, h):\n    \"\"\"Given length of a side and high return equilateral for a triangle.\n    >>> triangle_equilateral(5, 3)\n    True\n    \"\"\"\n    return a == h\n\n\ndef triangle_isosceles(a, h):\n    \"\"\"Given length of a side and high return isosceles for a triangle.\n    >>> triangle_isosceles(5, 3)\n    False\n    \"\"\"\n    return a == h or a == h\n\n\ndef triangle_scalene(a, h):\n    \"\"\"Given length of a side and high return scalene for a triangle.\n    >>> triangle_scalene(5, 3)\n    True\n    \"\"\"\n    return a!= h and a!= h\n\n\ndef triangle_type(a, h):\n    \"\"\"Given length of a side and high return triangle type for a triangle.\n    >>> triangle_type(5, 3)\n    'equilateral'\n    >>> triangle_type(5, 5)\n    'isosceles'\n    >>> triangle_type(5, 6)\n    'scalene'\n    \"\"\"\n    if triangle_equilateral(a, h):\n        return \"equilateral\"\n    elif triangle_isosceles(a, h):\n        return \"isosceles\"\n    elif triangle_scalene(a, h):\n        return \"scalene\"\n    else:\n        return \"unknown\"\n\n\ndef triangle_color(a, h):\n    \"\"\"Given length of a side and high return triangle color for a triangle.\n    >>> triangle_color(5, 3)\n    'black'\n    >>> triangle_color(5, 5)\n    'white'\n    >>> triangle_color(5, 6)\n    'green'\n    \"\"\"\n    if triangle_equilateral(a, h):\n        return \"black\"\n    elif triangle_isosceles(a, h):\n        return \"black\"\n    elif triangle_scalene(a, h):\n        return \"white\"\n    else:\n        return \"green\"\n\n\ndef triangle_equilateral_color(a, h):\n    \"\"\"Given length of a side and high return triangle color for a triangle.\n    >>> triangle_equilateral_color(5, 3)\n    'black'\n    >>> triangle_equilateral_color(5, 5)\n    'white'\n    >>> triangle_equilateral_color(5, 6)\n    'green'\n    \"\"\"\n    if"}
{"task_id": "Python/46", "prompt": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n", "generation": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\n\ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 0\n    fib5(2) -> 2\n    fib5(3) -> 0\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    >>> fib5(5)\n    5\n    >>> fib5(6)\n    10\n    >>> fib5(7)\n    15\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    elif n == 4:\n        return 2\n    else:\n        return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4) + fib5(n - 5)\n\n\ndef fib6(n: int):\n    \"\"\"The Fib6 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib6(0) -> 0\n    fib6(1) -> 0\n    fib6(2) -> 2\n    fib6(3) -> 0\n    fib6(n) -> fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-5) + fib6(n-6).\n    Please write a function to efficiently compute the n-th element of the fib6 number sequence.  Do not use recursion.\n    >>> fib6(5)\n    6\n    >>> fib6(6)\n    12\n    >>> fib6(7)\n    18\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    elif n == 4:\n        return 2\n    elif n == 5:\n        return 0\n    else:\n        return fib6(n - 1) + fib6(n - 2) + fib6(n - 3) + fib6(n - 4) + fib6(n - 5) + fib6(n - 6)\n\n\ndef fib7(n: int):\n    \"\"\"The Fib7 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib7(0) -> 0\n    fib7(1) -> 0\n    fib7(2) -> 2\n    fib7(3) -> 0\n    fib7(n) -> fib7(n-1) + fib7(n-2) + fib7(n-3) + fib7(n-4) + fib7(n-5) + fib7(n-6) + fib7(n-7).\n    Please write a"}
{"task_id": "Python/47", "prompt": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n", "generation": "    return sorted(l)[len(l) // 2]\n\n\ndef mean(l: list):\n    \"\"\"Return mean of elements in the list l.\n    >>> mean([3, 1, 2, 4, 5])\n    4.0\n    >>> mean([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sum(l) / len(l)\n\n\ndef mode(l: list):\n    \"\"\"Return mode of elements in the list l.\n    >>> mode([3, 1, 2, 4, 5])\n    [4, 5]\n    >>> mode([-10, 4, 6, 1000, 10, 20])\n    [1000, 10, 20]\n    \"\"\"\n    counts = {}\n    for i in l:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    return sorted(counts.items(), key=lambda x: x[1], reverse=True)[0][0]\n\n\ndef median_low(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median_low([3, 1, 2, 4, 5])\n    2.0\n    >>> median_low([-10, 4, 6, 1000, 10, 20])\n    4.0\n    \"\"\"\n    return sorted(l)[len(l) // 2]\n\n\ndef median_high(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median_high([3, 1, 2, 4, 5])\n    5.0\n    >>> median_high([-10, 4, 6, 1000, 10, 20])\n    10.0\n    \"\"\"\n    return sorted(l)[len(l) // 2]\n\n\ndef median_grouped(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median_grouped([3, 1, 2, 4, 5])\n    3.0\n    >>> median_grouped([-10, 4, 6, 1000, 10, 20])\n    5.0\n    \"\"\"\n    return sorted(l)[len(l) // 2]\n\n\ndef mode_grouped(l: list):\n    \"\"\"Return mode of elements in the list l.\n    >>> mode_grouped([3, 1, 2, 4, 5])\n    [4, 5]\n    >>> mode_grouped([-10, 4, 6, 1000, 10, 20])\n    [1000, 10, 20]\n    \"\"\"\n    counts = {}\n    for i in l:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    return sorted(counts.items(), key=lambda x: x[1], reverse=True)[0][0]\n\n\ndef mean_grouped(l: list):\n    \"\"\"Return mean of elements in the list l.\n    >>> mean_grouped([3, 1, 2, 4, 5])\n    4.0\n    >>> mean_grouped([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return sum(l) / len(l)\n\n\ndef median_grouped_low(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median_grouped_low([3, 1, 2, 4, 5])\n    2.0\n    >>> median_grouped_low([-10, 4, 6, 1000, 10, 20])\n    4.0\n    \"\"\"\n    return sorted(l)[len(l) // 2]\n\n\ndef median_grouped_high(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median_grouped_high([3, 1, 2, 4, 5])\n    5.0\n    >>> median_grouped_high([-10, 4, 6, 1000, 10, 20])\n    10.0\n    \"\"\"\n    return sorted(l)[len(l) // 2]\n\n\ndef mode_grouped_grouped(l: list):\n    \"\"\"Return mode of elements in the list"}
{"task_id": "Python/48", "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n", "generation": "    return text == text[::-1]\n\n\ndef is_palindrome_v2(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_v2('')\n    True\n    >>> is_palindrome_v2('aba')\n    True\n    >>> is_palindrome_v2('aaaaa')\n    True\n    >>> is_palindrome_v2('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1].lower()\n\n\ndef is_palindrome_v3(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_v3('')\n    True\n    >>> is_palindrome_v3('aba')\n    True\n    >>> is_palindrome_v3('aaaaa')\n    True\n    >>> is_palindrome_v3('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1].lower()\n\n\ndef is_palindrome_v4(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_v4('')\n    True\n    >>> is_palindrome_v4('aba')\n    True\n    >>> is_palindrome_v4('aaaaa')\n    True\n    >>> is_palindrome_v4('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1].lower()\n\n\ndef is_palindrome_v5(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_v5('')\n    True\n    >>> is_palindrome_v5('aba')\n    True\n    >>> is_palindrome_v5('aaaaa')\n    True\n    >>> is_palindrome_v5('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1].lower()\n\n\ndef is_palindrome_v6(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_v6('')\n    True\n    >>> is_palindrome_v6('aba')\n    True\n    >>> is_palindrome_v6('aaaaa')\n    True\n    >>> is_palindrome_v6('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1].lower()\n\n\ndef is_palindrome_v7(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_v7('')\n    True\n    >>> is_palindrome_v7('aba')\n    True\n    >>> is_palindrome_v7('aaaaa')\n    True\n    >>> is_palindrome_v7('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1].lower()\n\n\ndef is_palindrome_v8(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_v8('')\n    True\n    >>> is_palindrome_v8('aba')\n    True\n    >>> is_palindrome_v8('aaaaa')\n    True\n    >>> is_palindrome_v8('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1].lower()\n\n\ndef is_palindrome_v9(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_v9('')\n    True\n    >>> is_palindrome_v9('aba')\n    True\n    >>> is_palindrome_v9('aaaaa')\n    True\n    >>> is_palindrome_v9('zbcd')\n    False\n    \"\"\"\n"}
{"task_id": "Python/49", "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n", "generation": "    return (2 ** n) % p\n\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the modular multiplicative inverse of 2^n modulo p.\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    2\n    >>> modp_inv(0, 101)\n    1\n    >>> modp_inv(3, 11)\n    8\n    >>> modp_inv(100, 101)\n    1\n    \"\"\"\n    return pow(2, n - 1, p)\n\n\ndef modp_gcd(a: int, b: int, p: int):\n    \"\"\"Return the greatest common divisor of a and b modulo p.\n    >>> modp_gcd(3, 5, 11)\n    3\n    >>> modp_gcd(1101, 101, 101)\n    1\n    >>> modp_gcd(0, 101, 101)\n    1\n    >>> modp_gcd(3, 11, 11)\n    3\n    >>> modp_gcd(100, 101, 101)\n    1\n    \"\"\"\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\n\ndef modp_lcm(a: int, b: int, p: int):\n    \"\"\"Return the least common multiple of a and b modulo p.\n    >>> modp_lcm(3, 5, 11)\n    15\n    >>> modp_lcm(1101, 101, 101)\n    101\n    >>> modp_lcm(0, 101, 101)\n    101\n    >>> modp_lcm(3, 11, 11)\n    21\n    >>> modp_lcm(100, 101, 101)\n    101\n    \"\"\"\n    return (a * b) // modp_gcd(a, b, p)\n\n\ndef modp_extended_gcd(a: int, b: int, p: int):\n    \"\"\"Return a tuple (g, x, y) such that g = gcd(a, b) = a * x + b * y\n    and x, y satisfy the equation g = a * x + b * y modulo p.\n    >>> modp_extended_gcd(3, 5, 11)\n    (1, -1, 1)\n    >>> modp_extended_gcd(1101, 101, 101)\n    (1, 0, 1)\n    >>> modp_extended_gcd(0, 101, 101)\n    (1, 0, 1)\n    >>> modp_extended_gcd(3, 11, 11)\n    (3, 1, 2)\n    >>> modp_extended_gcd(100, 101, 101)\n    (1, -1, 1)\n    \"\"\"\n    x0, x1, y0, y1 = 1, 0, 0, 1\n    while b!= 0:\n        q, a, b = a // b, b, a % b\n        x0, x1 = x1, x0 - q * x1\n        y0, y1 = y1, y0 - q * y1\n    return a, x0, y0\n\n\ndef modp_inverse(a: int, p: int):\n    \"\"\"Return the modular inverse of a modulo p.\n    >>> modp_inverse(3, 5)\n    2\n    >>> modp_inverse(1101, 101)\n    2\n    >>> modp_inverse(0, 101)\n    1\n    >>> modp_inverse(3, 11)\n    8\n    >>> modp_inverse(100, 101)\n    1\n    \"\"\"\n    g, x, y = modp_extended_gcd(a, p, p)\n    assert g == 1\n    return x % p\n\n\ndef modp_multiply(a: int, b: int, p: int):\n"}
{"task_id": "Python/50", "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n", "generation": "    return \"\".join([chr((ord(ch) - 5 + ord(\"a\")) % 26) for ch in s])\n\n\ndef encode_shift_with_key(s: str, key: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function and key. Returns encoded string.\n    \"\"\"\n    return \"\".join([chr((ord(ch) + 5 - ord(key[i % len(key)])) % 26) for i, ch in enumerate(s)])\n\n\ndef decode_shift_with_key(s: str, key: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function and key. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr((ord(ch) - 5 + ord(key[i % len(key)])) % 26) for i, ch in enumerate(s)])\n\n\ndef encode_shift_with_key_and_padding(s: str, key: str, pad_char: str = \" \"):\n    \"\"\"\n    takes as input string encoded with encode_shift function and key. Returns encoded string.\n    \"\"\"\n    return \"\".join([chr((ord(ch) + 5 - ord(key[i % len(key)])) % 26) for i, ch in enumerate(s)]) + pad_char * (\n        len(s) % len(pad_char)\n    )\n\n\ndef decode_shift_with_key_and_padding(s: str, key: str, pad_char: str = \" \"):\n    \"\"\"\n    takes as input string encoded with encode_shift function and key. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr((ord(ch) - 5 + ord(key[i % len(key)])) % 26) for i, ch in enumerate(s)]) + pad_char * (\n        len(s) % len(pad_char)\n    )\n\n\ndef encode_shift_with_key_and_padding_and_trim(s: str, key: str, pad_char: str = \" \"):\n    \"\"\"\n    takes as input string encoded with encode_shift function and key. Returns encoded string.\n    \"\"\"\n    return \"\".join([chr((ord(ch) + 5 - ord(key[i % len(key)])) % 26) for i, ch in enumerate(s)]) + pad_char * (\n        len(s) % len(pad_char)\n    )[: len(s) % len(pad_char)]\n\n\ndef decode_shift_with_key_and_padding_and_trim(s: str, key: str, pad_char: str = \" \"):\n    \"\"\"\n    takes as input string encoded with encode_shift function and key. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr((ord(ch) - 5 + ord(key[i % len(key)])) % 26) for i, ch in enumerate(s)]) + pad_char * (\n        len(s) % len(pad_char)\n    )[: len(s) % len(pad_char)]\n\n\ndef encode_shift_with_key_and_padding_and_trim_and_shift(\n    s: str, key: str, pad_char: str = \" \"\n):\n    \"\"\"\n    takes as input string encoded with encode_shift function and key. Returns encoded string.\n    \"\"\"\n    return \"\".join([chr((ord(ch) + 5 - ord(key[i % len(key)])) % 26) for i, ch in enumerate(s)]) + pad_char * (\n        len(s) % len(pad_char)\n    )[: len(s) % len(pad_char)]\n\n\ndef decode_shift_with_key_and_padding_and_trim_and_shift(\n    s: str, key: str, pad_char: str = \" \"\n):\n    "}
{"task_id": "Python/51", "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n", "generation": "    vowels = \"aeiouAEIOU\"\n    text = text.lower()\n    text = \"\".join([i for i in text if i not in vowels])\n    return text\n\n\ndef remove_vowels_list(text_list):\n    \"\"\"\n    remove_vowels_list is a function that takes a list of strings and returns a list of strings without vowels.\n    >>> remove_vowels_list(['abcdef\\nghijklm', 'abcdef'])\n    ['bcdf\\nghjklm', 'bcdf']\n    >>> remove_vowels_list(['abcdef', 'abcdef'])\n    ['bcdf', 'bcdf']\n    >>> remove_vowels_list(['aaaaa', 'aaaaa'])\n    []\n    >>> remove_vowels_list(['aaBAA', 'aaBAA'])\n    ['B', 'B']\n    >>> remove_vowels_list(['zbcd', 'zbcd'])\n    ['zbcd', 'zbcd']\n    \"\"\"\n    return [remove_vowels(text) for text in text_list]\n\n\ndef remove_vowels_set(text_set):\n    \"\"\"\n    remove_vowels_set is a function that takes a set of strings and returns a set of strings without vowels.\n    >>> remove_vowels_set(set(['abcdef\\nghijklm', 'abcdef'])\n    {'bcdf\\nghjklm', 'bcdf'}\n    >>> remove_vowels_set(set(['abcdef', 'abcdef'])\n    {'bcdf', 'bcdf'}\n    >>> remove_vowels_set(set(['aaaaa', 'aaaaa'])\n    {}\n    >>> remove_vowels_set(set(['aaBAA', 'aaBAA'])\n    {'B', 'B'}\n    >>> remove_vowels_set(set(['zbcd', 'zbcd'])\n    {'zbcd', 'zbcd'}\n    \"\"\"\n    return set(remove_vowels_list(text_set))\n\n\ndef remove_vowels_dict(text_dict):\n    \"\"\"\n    remove_vowels_dict is a function that takes a dictionary of strings and returns a dictionary of strings without vowels.\n    >>> remove_vowels_dict({'abcdef\\nghijklm': 'bcdf\\nghjklm', 'abcdef': 'bcdf'})\n    {'abcdef\\nghijklm': 'bcdf\\nghjklm', 'abcdef': 'bcdf'}\n    >>> remove_vowels_dict({'abcdef': 'bcdf', 'abcdef': 'bcdf'})\n    {'abcdef': 'bcdf'}\n    >>> remove_vowels_dict({'aaaaa': 'aaaaa', 'aaaaa': 'aaaaa'})\n    {}\n    >>> remove_vowels_dict({'aaBAA': 'B', 'aaBAA': 'B'})\n    {'aaBAA': 'B'}\n    >>> remove_vowels_dict({'zbcd': 'zbcd', 'zbcd': 'zbcd'})\n    {}\n    \"\"\"\n    return {k: remove_vowels(v) for k, v in text_dict.items()}\n\n\ndef remove_vowels_list_dict(text_list_dict):\n    \"\"\"\n    remove_vowels_list_dict is a function that takes a list of dictionaries of strings and returns a list of dictionaries of strings without vowels.\n    >>> remove_vowels_list_dict([{'abc"}
{"task_id": "Python/52", "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n", "generation": "    for i in l:\n        if i < t:\n            return False\n    return True\n\n\ndef get_n_grams(text: str, n: int) -> list:\n    \"\"\"Return list of n-grams from text.\n    >>> get_n_grams(\"This is a test.\", 3)\n    ['This', 'is', 'a', 'test']\n    \"\"\"\n    return [text[i : i + n] for i in range(len(text) - n + 1)]\n\n\ndef get_n_grams_from_list(text: list, n: int) -> list:\n    \"\"\"Return list of n-grams from text.\n    >>> get_n_grams_from_list([\"This\", \"is\", \"a\", \"test\"], 3)\n    ['This', 'is', 'a', 'test']\n    \"\"\"\n    return [text[i : i + n] for i in range(len(text) - n + 1)]\n\n\ndef get_n_grams_from_list_with_start_and_end(text: list, n: int) -> list:\n    \"\"\"Return list of n-grams from text.\n    >>> get_n_grams_from_list_with_start_and_end([\"This\", \"is\", \"a\", \"test\"], 3)\n    ['This', 'is', 'a', 'test']\n    \"\"\"\n    return [text[i : i + n] for i in range(len(text) - n + 1)]\n\n\ndef get_n_grams_from_list_with_start_and_end_and_length(text: list, n: int) -> list:\n    \"\"\"Return list of n-grams from text.\n    >>> get_n_grams_from_list_with_start_and_end_and_length([\"This\", \"is\", \"a\", \"test\"], 3)\n    ['This', 'is', 'a', 'test']\n    \"\"\"\n    return [text[i : i + n] for i in range(len(text) - n + 1)]\n\n\ndef get_n_grams_from_list_with_start_and_end_and_length_and_threshold(\n    text: list, n: int, t: int\n) -> list:\n    \"\"\"Return list of n-grams from text.\n    >>> get_n_grams_from_list_with_start_and_end_and_length_and_threshold([\"This\", \"is\", \"a\", \"test\"], 3, 5)\n    ['This', 'is', 'a', 'test']\n    \"\"\"\n    return [text[i : i + n] for i in range(len(text) - n + 1)]\n\n\ndef get_n_grams_from_list_with_start_and_end_and_length_and_threshold_and_max_length(\n    text: list, n: int, t: int, max_length: int\n) -> list:\n    \"\"\"Return list of n-grams from text.\n    >>> get_n_grams_from_list_with_start_and_end_and_length_and_threshold_and_max_length([\"This\", \"is\", \"a\", \"test\"], 3, 5, 10)\n    ['This', 'is', 'a', 'test']\n    \"\"\"\n    return [text[i : i + n] for i in range(len(text) - n + 1)]\n\n\ndef get_n_grams_from_list_with_start_and_end_and_length_and_threshold_and_max_length_and_min_length(\n    text: list, n: int, t: int, max_length: int, min_length: int\n) -> list:\n    \"\"\"Return list of n-grams from text.\n    >>> get_n_grams_from_list_with_start_and_end_and_length_and_threshold_and_max_length_and_min_length([\"This\", \"is\", \"a\","}
{"task_id": "Python/53", "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n", "generation": "    return x + y\n\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    -10\n    \"\"\"\n    return x - y\n\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \"\"\"\n    return x * y\n\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0.5\n    >>> divide(5, 7)\n    2.0\n    \"\"\"\n    return x / y\n\n\ndef square(x: int):\n    \"\"\"Square a number x\n    >>> square(3)\n    9\n    >>> square(4)\n    16\n    \"\"\"\n    return x * x\n\n\ndef cube(x: int):\n    \"\"\"Cube a number x\n    >>> cube(3)\n    27\n    >>> cube(4)\n    64\n    \"\"\"\n    return x * x * x\n\n\ndef power(x: int, y: int):\n    \"\"\"Power of x to the y\n    >>> power(3, 3)\n    81\n    >>> power(4, 2)\n    256\n    \"\"\"\n    return x ** y\n\n\ndef mod(x: int, y: int):\n    \"\"\"Modulus of x to the y\n    >>> mod(5, 3)\n    2\n    >>> mod(4, 3)\n    1\n    \"\"\"\n    return x % y\n\n\ndef add_numbers(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add_numbers(3, 4)\n    7\n    >>> add_numbers(3, 5)\n    8\n    \"\"\"\n    return x + y\n\n\ndef increment(x: int):\n    \"\"\"Increment a number x\n    >>> increment(3)\n    4\n    >>> increment(4)\n    5\n    \"\"\"\n    return x + 1\n\n\ndef predicate(x: int):\n    \"\"\"Return true if x is odd, false otherwise\n    >>> predicate(3)\n    False\n    >>> predicate(4)\n    True\n    \"\"\"\n    return x % 2 == 1\n\n\ndef predicate_n(x: int):\n    \"\"\"Return true if x is odd, false otherwise\n    >>> predicate_n(3)\n    False\n    >>> predicate_n(4)\n    True\n    \"\"\"\n    return x % 2 == 1\n\n\ndef count_conditions(condition: callable):\n    \"\"\"Returns the number of times a predicate is true.\n    >>> count_conditions(predicate)\n    2\n    >>> count_conditions(predicate_n)\n    2\n    \"\"\"\n    count = 0\n    for i in range(1, 101):\n        if condition(i):\n            count += 1\n    return count\n\n\ndef product_without_division(x: int, y: int):\n    \"\"\"Multiply two numbers x and y without using the division operator\n    >>> product_without_division(2, 3)\n    6\n    >>> product_without_division(3, 2)\n    6\n    \"\"\"\n    return x * y\n\n\ndef factorial(x: int):\n    \"\"\"Compute the factorial of x.\n    >>> factorial(5)\n    120\n    >>> factorial(4)\n    24\n    >>> factorial(0)\n    1\n    \"\"\"\n    return 1 if x == 0 else x * factorial(x - 1)\n\n\ndef fibonacci(n: int):\n    \"\"\"Compute the nth Fibonacci number.\n    >>> fibonacci(5)\n    5\n    >>> fibonacci(8)\n    13\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    \"\"\"\n    return 0 if n == 0 else 1 if n == 1 else fibonacci(n - 1) + fibonacci(n - 2)\n\n\ndef count_change(amount: int):\n    \"\"\"Return the number of ways to make change for"}
{"task_id": "Python/54", "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n", "generation": "    return s0.replace(\" \", \"\") == s1.replace(\" \", \"\")\n\n\ndef same_chars_and_whitespace(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters and whitespace.\n    >>> same_chars_and_whitespace('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars_and_whitespace('abcd', 'dddddddabc')\n    True\n    >>> same_chars_and_whitespace('dddddddabc', 'abcd')\n    True\n    >>> same_chars_and_whitespace('eabcd', 'dddddddabc')\n    False\n    >>> same_chars_and_whitespace('abcd', 'dddddddabce')\n    False\n    >>> same_chars_and_whitespace('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return s0.replace(\" \", \"\") == s1.replace(\" \", \"\") and s0.strip() == s1.strip()\n\n\ndef same_chars_and_whitespace_and_punctuation(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters, whitespace and punctuation.\n    >>> same_chars_and_whitespace_and_punctuation('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars_and_whitespace_and_punctuation('abcd', 'dddddddabc')\n    True\n    >>> same_chars_and_whitespace_and_punctuation('dddddddabc', 'abcd')\n    True\n    >>> same_chars_and_whitespace_and_punctuation('eabcd', 'dddddddabc')\n    False\n    >>> same_chars_and_whitespace_and_punctuation('abcd', 'dddddddabce')\n    False\n    >>> same_chars_and_whitespace_and_punctuation('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return (\n        s0.replace(\" \", \"\") == s1.replace(\" \", \"\")\n        and s0.strip() == s1.strip()\n        and s0.strip(\".\").replace(\".\", \"\") == s1.strip(\".\").replace(\".\", \"\")\n    )\n\n\ndef same_chars_and_whitespace_and_punctuation_and_special_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters, whitespace and punctuation,\n    and special characters.\n    >>> same_chars_and_whitespace_and_punctuation_and_special_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars_and_whitespace_and_punctuation_and_special_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars_and_whitespace_and_punctuation_and_special_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars_and_whitespace_and_punctuation_and_special_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars"}
{"task_id": "Python/55", "prompt": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n", "generation": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\ndef summation(n, term):\n    \"\"\"Return the sum of the first n terms in the Fibonacci\n    sequence.\n\n    >>> fibonacci(11)\n    89\n    >>> fibonacci(5)\n    5\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return term(n)\n    else:\n        return term(n) + summation(n - 1, term)\n\n\ndef square(x):\n    return x * x\n\n\ndef summation_using_list_comprehension(n, term):\n    \"\"\"Return the sum of the first n terms in the Fibonacci\n    sequence.\n\n    >>> fibonacci(11)\n    89\n    >>> fibonacci(5)\n    5\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    \"\"\"\n    return sum([term(i) for i in range(n + 1)])\n\n\ndef factorial(n):\n    \"\"\"Return n factorial for n >= 0 by recursion.\n\n    >>> factorial(4)\n    24\n    >>> factorial(6)\n    720\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\ndef make_adder(n):\n    \"\"\"Return a function that takes an argument K and returns N + K.\n\n    >>> add_three = make_adder(3)\n    >>> add_three(1) + add_three(2)\n    9\n    >>> make_adder(1)(2)\n    3\n    \"\"\"\n    return lambda k: n + k\n\n\ndef summation_using_function_def(n, term):\n    \"\"\"Return the sum of the first n terms in the Fibonacci\n    sequence.\n\n    >>> fib = summation_using_function_def(5, make_adder(3))\n    >>> fib(5)\n    8\n    >>> fib(0)\n    0\n    >>> fib(1)\n    1\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return term(n)\n    else:\n        return term(n) + summation_using_function_def(n - 1, term)\n\n\ndef product(n, term):\n    \"\"\"Return the product of the first n terms in the Fibonacci\n    sequence.\n\n    >>> product(4, make_adder(10))\n    78400\n    >>> product(6, make_adder(1))\n    362880\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return term(n)\n    else:\n        return term(n) * product(n - 1, term)\n\n\ndef compose1(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n\n    def h(x):\n        return f(g(x))\n\n    return h\n\n\n# The following example is not covered in the book.\ndef compose2(f, g):\n    \"\"\"Return a function h, such that h(x) = f(g(x)).\"\"\"\n\n    def h(x):\n        return f(g(x))\n\n    return h\n\n\ndef repeated(f, n):\n    \"\"\"Return the function that computes the nth application of f.\n\n    >>> add_three = repeated(increment, 3)(lambda x: x + 3)\n    >>> add_three(5)\n    8\n    >>> repeated(repeated(increment, 5), 8)(5)\n    625\n    >>> repeated(repeated(add_three, 5), 3)(5)\n    8\n    \"\"\"\n    return lambda x: f(repeated(f, n - 1)(x))\n\n\ndef num_sevens(n):\n    \"\"\"Return the number of sevens that are in"}
{"task_id": "Python/56", "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n", "generation": "    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"<<\", \"\")\n    brackets = brackets.replace(\">>\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n    return brackets.count(\"<\") == brackets.count(\">\")\n\n\ndef bracket_pair_to_bracket(pair: str):\n    \"\"\" pair is a string of \"[\" and \"]\".\n    return the corresponding bracket pair.\n\n    >>> bracket_pair_to_bracket(\"[\")\n    '<'\n    >>> bracket_pair_to_bracket(\"]\")\n    '>'\n    >>> bracket_pair_to_bracket(\"[<\")\n    '<'\n    >>> bracket_pair_to_bracket(\"[>\")\n    '>'\n    >>> bracket_pair_to_bracket(\"[<>\")\n    '<>'\n    \"\"\"\n    return pair[0] + pair[-1]\n\n\ndef bracket_pair_to_open_close(pair: str):\n    \"\"\" pair is a string of \"[\" and \"]\".\n    return the corresponding bracket pair.\n\n    >>> bracket_pair_to_open_close(\"[\")\n    '<'\n    >>> bracket_pair_to_open_close(\"]\")\n    '>'\n    >>> bracket_pair_to_open_close(\"[<\")\n    '<'\n    >>> bracket_pair_to_open_close(\"[>\")\n    '>'\n    >>> bracket_pair_to_open_close(\"[<>\")\n    '<>'\n    \"\"\"\n    return pair[0] + pair[-1]\n\n\ndef bracket_pair_to_open_close_pair(pair: str):\n    \"\"\" pair is a string of \"[\" and \"]\".\n    return the corresponding bracket pair.\n\n    >>> bracket_pair_to_open_close_pair(\"[\")\n    ('<', '>')\n    >>> bracket_pair_to_open_close_pair(\"]\")\n    ('>', '<')\n    >>> bracket_pair_to_open_close_pair(\"[<\")\n    ('<', '>')\n    >>> bracket_pair_to_open_close_pair(\"[>\")\n    ('>', '<')\n    >>> bracket_pair_to_open_close_pair(\"[<>\")\n    ('<', '>')\n    \"\"\"\n    return pair[0] + pair[-1], pair[0] + pair[-1]\n\n\ndef bracket_pair_to_bracket_pair(pair: str):\n    \"\"\" pair is a string of \"[\" and \"]\".\n    return the corresponding bracket pair.\n\n    >>> bracket_pair_to_bracket_pair(\"[\")\n    ('<', '>')\n    >>> bracket_pair_to_bracket_pair(\"]\")\n    ('>', '<')\n    >>> bracket_pair_to_bracket_pair(\"[<\")\n    ('<', '>')\n    >>> bracket_pair_to_bracket_pair(\"[>\")\n    ('>', '<')\n    >>> bracket_pair_to_bracket_pair(\"[<>\")\n    ('<', '>')\n    \"\"\"\n    return pair[0] + pair[-1], pair[-1] + pair[0]\n\n\ndef bracket_pair_to_bracket_pair_pair(pair: str):\n    \"\"\" pair is a string of \"[\" and \"]\".\n    return the corresponding bracket pair.\n\n    >>> bracket_pair_to_bracket_pair_pair(\"[\")\n    ('<', '>')\n    >>> bracket_pair_to_bracket_pair_pair(\"]\")\n    ('>', '<')\n    >>> bracket_pair_to_bracket_pair_pair(\"[<\")\n    ('<', '>')\n    >>> bracket_pair_to_bracket_pair_pair(\"[>\")\n"}
{"task_id": "Python/57", "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n", "generation": "    if len(l) < 2:\n        return True\n    if l[0] > l[1]:\n        return False\n    if l[0] < l[1]:\n        return False\n    return monotonic(l[1:])\n\n\ndef monotonic_decreasing(l: list):\n    \"\"\"Return True is list elements are monotonically decreasing.\n    >>> monotonic_decreasing([1, 2, 4, 20])\n    False\n    >>> monotonic_decreasing([1, 20, 4, 10])\n    True\n    >>> monotonic_decreasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0] < l[1]:\n        return False\n    if l[0] > l[1]:\n        return False\n    return monotonic_decreasing(l[1:])\n\n\ndef monotonic_increasing_or_decreasing(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic_increasing_or_decreasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing_or_decreasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing_or_decreasing([4, 1, 0, -10])\n    False\n    \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0] > l[1]:\n        return False\n    if l[0] < l[1]:\n        return False\n    return monotonic_increasing_or_decreasing(l[1:])\n\n\ndef monotonic_increasing_or_decreasing_with_start(l: list, start: int):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing with start.\n    >>> monotonic_increasing_or_decreasing_with_start([1, 2, 4, 20], 0)\n    True\n    >>> monotonic_increasing_or_decreasing_with_start([1, 20, 4, 10], 0)\n    False\n    >>> monotonic_increasing_or_decreasing_with_start([4, 1, 0, -10], 0)\n    False\n    \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0] > l[1]:\n        return False\n    if l[0] < l[1]:\n        return False\n    return monotonic_increasing_or_decreasing_with_start(l[1:], start)\n\n\ndef monotonic_increasing_or_decreasing_with_end(l: list, end: int):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing with end.\n    >>> monotonic_increasing_or_decreasing_with_end([1, 2, 4, 20], 20)\n    True\n    >>> monotonic_increasing_or_decreasing_with_end([1, 20, 4, 10], 20)\n    False\n    >>> monotonic_increasing_or_decreasing_with_end([4, 1, 0, -10], 20)\n    False\n    \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0] > l[1]:\n        return False\n    if l[0] < l[1]:\n        return False\n    return monotonic_increasing_or_decreasing_with_end(l[1:], end)\n\n\ndef monotonic_increasing_or_decreasing_with_start_and_end(l: list, start: int, end: int):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing with start and end.\n    >>> monotonic_increasing_or_decreasing_with_start_and_end([1, 2, 4, 20], 0, 20)\n    True\n    >>> monotonic_increasing_or"}
{"task_id": "Python/58", "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n", "generation": "    return list(set(l1) & set(l2))\n\n\ndef common_prefix(l1: list, l2: list):\n    \"\"\"Return the common prefix between two lists.\n    >>> common_prefix([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    []\n    >>> common_prefix([5, 3, 2, 8], [3, 2])\n    ['3']\n    >>> common_prefix([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    ['1', '5', '653']\n\n    \"\"\"\n    prefix = []\n    for i in range(min(len(l1), len(l2))):\n        if l1[i]!= l2[i]:\n            break\n        prefix.append(l1[i])\n    return prefix\n\n\ndef common_suffix(l1: list, l2: list):\n    \"\"\"Return the common suffix between two lists.\n    >>> common_suffix([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    []\n    >>> common_suffix([5, 3, 2, 8], [3, 2])\n    ['8']\n    >>> common_suffix([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    ['5', '7', '653', '121']\n\n    \"\"\"\n    suffix = []\n    for i in range(max(len(l1), len(l2))):\n        if l1[-i - 1]!= l2[-i - 1]:\n            break\n        suffix.append(l1[-i - 1])\n    return suffix\n\n\ndef common_substring(l1: list, l2: list):\n    \"\"\"Return the common substring between two lists.\n    >>> common_substring([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    []\n    >>> common_substring([5, 3, 2, 8], [3, 2])\n    ['8']\n    >>> common_substring([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    ['1', '5', '653']\n\n    \"\"\"\n    substring = []\n    for i in range(min(len(l1), len(l2))):\n        if l1[i : i + len(substring)]!= l2[i : i + len(substring)]:\n            break\n        substring.append(l1[i : i + len(substring)])\n    return substring\n\n\ndef longest_common_substring(l1: list, l2: list):\n    \"\"\"Return the longest common substring between two lists.\n    >>> longest_common_substring([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    '1 5 653'\n    >>> longest_common_substring([5, 3, 2, 8], [3, 2])\n    '8'\n    >>> longest_common_substring([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    '1 5 653'\n\n    \"\"\"\n    substring = []\n    for i in range(min(len(l1), len(l2))):\n        if l1[i : i + len(substring)]!= l2[i : i + len(substring)]:\n            break\n        substring.append(l1[i : i + len(substring)])\n    return \" \"."}
{"task_id": "Python/59", "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n", "generation": "    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is prime, else return False. Assume n > 1.\n    >>> is_prime(13195)\n    True\n    >>> is_prime(2048)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef next_prime(n: int):\n    \"\"\"Return the smallest prime number that is greater than n. Assume n > 1.\n    >>> next_prime(13195)\n    23\n    >>> next_prime(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 2\n    for i in range(n + 1, 2 * n):\n        if is_prime(i):\n            return i\n    return 2 * n\n\n\ndef is_palindrome(n: int):\n    \"\"\"Return True if n is a palindrome, else return False. Assume n > 0.\n    >>> is_palindrome(13195)\n    True\n    >>> is_palindrome(2048)\n    False\n    \"\"\"\n    n = str(n)\n    return n == n[::-1]\n\n\ndef is_pandigital(n: int):\n    \"\"\"Return True if n is a pandigital, else return False. Assume n > 0.\n    >>> is_pandigital(123456789)\n    True\n    >>> is_pandigital(123456788)\n    False\n    \"\"\"\n    n = str(n)\n    if len(n)!= 9:\n        return False\n    for i in range(1, 10):\n        if n.count(str(i))!= 1:\n            return False\n    return True\n\n\ndef is_triangle(n: int):\n    \"\"\"Return True if n is a triangle, else return False. Assume n > 0.\n    >>> is_triangle(0)\n    True\n    >>> is_triangle(1)\n    True\n    >>> is_triangle(2)\n    True\n    >>> is_triangle(3)\n    False\n    >>> is_triangle(4)\n    False\n    >>> is_triangle(5)\n    False\n    >>> is_triangle(6)\n    False\n    >>> is_triangle(7)\n    False\n    >>> is_triangle(8)\n    False\n    >>> is_triangle(9)\n    False\n    \"\"\"\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n > 2:\n        return is_triangle(n - 1) and is_triangle(n - 2)\n\n\ndef is_pentagonal(n: int):\n    \"\"\"Return True if n is a pentagonal number, else return False. Assume n > 0.\n    >>> is_pentagonal(0)\n    True\n    >>> is_pentagonal(1)\n    True\n    >>> is_pentagonal(2)\n    False\n    >>> is_pentagonal(3)\n    False\n    >>> is_pentagonal(4)\n    False\n    >>> is_pentagonal(5)\n    False\n    >>> is_pentagonal(6)\n    False\n    >>> is_pentagonal(7)\n    False\n    >>> is_pentagonal(8)\n    False\n    >>> is_pentagonal(9)\n    False\n    \"\"\"\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    if n == 2:\n        return False\n    if n > 2:\n        return is_pentagonal(n - 1) and is_pentagonal(n - 2)\n\n\ndef"}
{"task_id": "Python/60", "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n", "generation": "    return sum(range(1, n + 1))\n\n\ndef sum_to_n_recursive(n: int):\n    \"\"\"sum_to_n_recursive is a function that sums numbers from 1 to n.\n    >>> sum_to_n_recursive(30)\n    465\n    >>> sum_to_n_recursive(100)\n    5050\n    >>> sum_to_n_recursive(5)\n    15\n    >>> sum_to_n_recursive(10)\n    55\n    >>> sum_to_n_recursive(1)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return sum_to_n_recursive(n - 1) + n\n\n\ndef sum_to_n_iterative(n: int):\n    \"\"\"sum_to_n_iterative is a function that sums numbers from 1 to n.\n    >>> sum_to_n_iterative(30)\n    465\n    >>> sum_to_n_iterative(100)\n    5050\n    >>> sum_to_n_iterative(5)\n    15\n    >>> sum_to_n_iterative(10)\n    55\n    >>> sum_to_n_iterative(1)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n_iterative(n - 1)\n\n\ndef sum_to_n_recursive_iterative(n: int):\n    \"\"\"sum_to_n_recursive_iterative is a function that sums numbers from 1 to n.\n    >>> sum_to_n_recursive_iterative(30)\n    465\n    >>> sum_to_n_recursive_iterative(100)\n    5050\n    >>> sum_to_n_recursive_iterative(5)\n    15\n    >>> sum_to_n_recursive_iterative(10)\n    55\n    >>> sum_to_n_recursive_iterative(1)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n_recursive_iterative(n - 1)\n\n\ndef sum_to_n_iterative_recursive(n: int):\n    \"\"\"sum_to_n_iterative_recursive is a function that sums numbers from 1 to n.\n    >>> sum_to_n_iterative_recursive(30)\n    465\n    >>> sum_to_n_iterative_recursive(100)\n    5050\n    >>> sum_to_n_iterative_recursive(5)\n    15\n    >>> sum_to_n_iterative_recursive(10)\n    55\n    >>> sum_to_n_iterative_recursive(1)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n_iterative_recursive(n - 1)\n\n\ndef sum_to_n_iterative_recursive_iterative(n: int):\n    \"\"\"sum_to_n_iterative_recursive_iterative is a function that sums numbers from 1 to n.\n    >>> sum_to_n_iterative_recursive_iterative(30)\n    465\n    >>> sum_to_n_iterative_recursive_iterative(100)\n    5050\n    >>> sum_to_n_iterative_recursive_iterative(5)\n    15\n    >>> sum_to_n_iterative_recursive_iterative(10)\n    55\n    >>> sum_to_n_iterative_recursive_iterative(1)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n_iterative_recursive_iterative(n - 1)\n\n\ndef sum_to_n_"}
{"task_id": "Python/61", "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n", "generation": "    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    return brackets.count(\"(\") == brackets.count(\")\")\n\n\ndef bracket_pair_to_parentheses(bracket_pair: str):\n    \"\"\"\n    >>> bracket_pair_to_parentheses(\"(\")\n    '()'\n    >>> bracket_pair_to_parentheses(\"()\")\n    '()'\n    >>> bracket_pair_to_parentheses(\"(()())\")\n    '(()())(()())'\n    \"\"\"\n    return \"({})\".format(bracket_pair)\n\n\ndef parentheses_to_bracket_pair(parentheses: str):\n    \"\"\"\n    >>> parentheses_to_bracket_pair(\"()\")\n    '()'\n    >>> parentheses_to_bracket_pair(\"(()())\")\n    '(()())(()())'\n    \"\"\"\n    return parentheses[1:-1]\n\n\ndef bracket_pair_to_parentheses_pair(bracket_pair: str):\n    \"\"\"\n    >>> bracket_pair_to_parentheses_pair(\"(\")\n    ('(', ')'))\n    >>> bracket_pair_to_parentheses_pair(\"()\")\n    ('(', ')')\n    >>> bracket_pair_to_parentheses_pair(\"(()())\")\n    ('(', ')')\n    \"\"\"\n    return bracket_pair_to_parentheses(bracket_pair), parentheses_to_bracket_pair(\n        bracket_pair\n    )\n\n\ndef parentheses_pair_to_parentheses_pair_with_brackets(\n    parentheses_pair: str, brackets: str\n):\n    \"\"\"\n    >>> parentheses_pair_to_parentheses_pair_with_brackets(\"(\", \")\")\n    ('(', ')')\n    >>> parentheses_pair_to_parentheses_pair_with_brackets(\"(()\", \")\")\n    ('(', ')')\n    >>> parentheses_pair_to_parentheses_pair_with_brackets(\"(()())\", \")\")\n    ('(', ')')\n    >>> parentheses_pair_to_parentheses_pair_with_brackets(\"(()())(()())\", \")\")\n    ('(', ')')\n    \"\"\"\n    return parentheses_pair_to_parentheses_pair(parentheses_pair), brackets\n\n\ndef parentheses_pair_to_parentheses_pair_with_brackets_pair(\n    parentheses_pair: str, brackets: str\n):\n    \"\"\"\n    >>> parentheses_pair_to_parentheses_pair_with_brackets_pair(\"(\", \")\")\n    ('(', ')')\n    >>> parentheses_pair_to_parentheses_pair_with_brackets_pair(\"(()\", \")\")\n    ('(', ')')\n    >>> parentheses_pair_to_parentheses_pair_with_brackets_pair(\"(()())\", \")\")\n    ('(', ')')\n    >>> parentheses_pair_to_parentheses_pair_with_brackets_pair(\"(()())(()())\", \")\")\n    ('(', ')')\n    \"\"\"\n    return parentheses_pair_to_parentheses_pair_with_brackets(\n        parentheses_pair, brackets\n    )\n\n\ndef parentheses_pair_to_parentheses_pair_with_brackets_pair_with_brackets(\n    parentheses_pair: str, brackets: str\n):\n    \"\"\"\n    >>> parentheses_pair_to_parentheses_pair_with_brackets_pair_with_brackets(\"(\", \")\")\n    ('(', ')')\n    >>> parentheses_pair_to_parentheses_pair_with_brackets_pair_with_brackets(\"(()\", \")\")\n    ('(', ')')\n    >>> parentheses_pair_to_parentheses_pair_with_brackets_pair_with_brackets(\"(()())\", \")\")\n    ('"}
{"task_id": "Python/62", "prompt": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n", "generation": "    return [xs[i] * i for i in range(1, len(xs))]\n\n\ndef derivative_of_polynomial(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative_of_polynomial([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative_of_polynomial([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [xs[i] * i for i in range(1, len(xs))]\n\n\ndef derivative_of_polynomial_with_derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative_of_polynomial_with_derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative_of_polynomial_with_derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [xs[i] * i for i in range(1, len(xs))]\n\n\ndef derivative_of_polynomial_with_derivative_of_polynomial(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative_of_polynomial_with_derivative_of_polynomial([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative_of_polynomial_with_derivative_of_polynomial([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [xs[i] * i for i in range(1, len(xs))]\n\n\ndef derivative_of_polynomial_with_derivative_of_polynomial_with_derivative(\n    xs: list\n):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative_of_polynomial_with_derivative_of_polynomial_with_derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative_of_polynomial_with_derivative_of_polynomial_with_derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [xs[i] * i for i in range(1, len(xs))]\n\n\ndef derivative_of_polynomial_with_derivative_of_polynomial_with_derivative_of_polynomial(\n    xs: list\n):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative_of_polynomial_with_derivative_of_polynomial_with_derivative_of_polynomial([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative_of_polynomial_with_derivative_of_polynomial_with_derivative_of_polynomial(["}
{"task_id": "Python/63", "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n", "generation": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n\ndef fibfib_recursive(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib_recursive(1)\n    0\n    >>> fibfib_recursive(5)\n    4\n    >>> fibfib_recursive(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib_recursive(n - 1) + fibfib_recursive(n - 2) + fibfib_recursive(n - 3)\n\n\ndef fibfib_iterative(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib_iterative(1)\n    0\n    >>> fibfib_iterative(5)\n    4\n    >>> fibfib_iterative(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for i in range(3, n + 1):\n            a, b, c = b, c, a + b\n        return c\n\n\ndef fibfib_bottom_up(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib_bottom_up(1)\n    0\n    >>> fibfib_bottom_up(5)\n    4\n    >>> fibfib_bottom_up(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib_bottom_up(n - 1) + fibfib_bottom_up(n - 2) + fibfib_bottom_up(n - 3)\n\n\n"}
{"task_id": "Python/64", "prompt": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n", "generation": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for letter in s:\n        if letter in vowels:\n            count += 1\n    return count\n\n\"\"\"\nWrite a function that takes a string as input and returns the number\nof occurrences of each letter in the string. Here, 'a' occurs three times,\n'e' occurs once, 'i' occurs once, 'o' occurs once, and 'u' occurs once.\n\nExample:\n>>> count_letters(\"abcde\")\n['a', 'e', 'i', 'o', 'u']\n>>> count_letters(\"ACEDY\")\n['a', 'e', 'i', 'o', 'u']\n\"\"\"\n\ndef count_letters(s):\n    \"\"\"Write a function that takes a string as input and returns the\n    number of occurrences of each letter in the string. Here, 'a' occurs\n    three times, 'e' occurs once, 'i' occurs once, 'o' occurs once, and 'u'\n    occurs once.\n\n    Example:\n    >>> count_letters(\"abcde\")\n    ['a', 'e', 'i', 'o', 'u']\n    >>> count_letters(\"ACEDY\")\n    ['a', 'e', 'i', 'o', 'u']\n    \"\"\"\n    count = []\n    for letter in s:\n        count.append(s.count(letter))\n    return count\n\n\"\"\"\nWrite a function that takes a string as input and returns the number\nof occurrences of each letter in the string. Here, 'a' occurs three times,\n'e' occurs once, 'i' occurs once, 'o' occurs once, and 'u' occurs once.\n\nExample:\n>>> count_letters(\"abcde\")\n['a', 'e', 'i', 'o', 'u']\n>>> count_letters(\"ACEDY\")\n['a', 'e', 'i', 'o', 'u']\n\"\"\"\n\ndef count_letters(s):\n    \"\"\"Write a function that takes a string as input and returns the\n    number of occurrences of each letter in the string. Here, 'a' occurs\n    three times, 'e' occurs once, 'i' occurs once, 'o' occurs once, and 'u'\n    occurs once.\n\n    Example:\n    >>> count_letters(\"abcde\")\n    ['a', 'e', 'i', 'o', 'u']\n    >>> count_letters(\"ACEDY\")\n    ['a', 'e', 'i', 'o', 'u']\n    \"\"\"\n    count = []\n    for letter in s:\n        count.append(s.count(letter))\n    return count\n\n\"\"\"\nWrite a function that takes a string as input and returns the number\nof occurrences of each letter in the string. Here, 'a' occurs three times,\n'e' occurs once, 'i' occurs once, 'o' occurs once, and 'u' occurs once.\n\nExample:\n>>> count_letters(\"abcde\")\n['a', 'e', 'i', 'o', 'u']\n>>> count_letters(\"ACEDY\")\n['a', 'e', 'i', 'o', 'u']\n\"\"\"\n\ndef count_letters(s):\n    \"\"\"Write a function that takes a string as input and returns the\n    number of occurrences of each letter in the string. Here, 'a' occurs\n    three times, 'e' occurs once, 'i' occurs once, 'o' occurs once, and 'u'\n    occurs once.\n\n    Example:\n    >>> count_letters(\"abcde\")\n    ['a', 'e', 'i', 'o', 'u']\n    >>> count_letters(\"ACEDY\")\n    ['a', 'e', 'i', 'o', 'u']\n    \"\"\"\n    count = []\n    for"}
{"task_id": "Python/65", "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n", "generation": "    if shift > len(x):\n        return x[::-1]\n    return x[shift:] + x[:shift]\n\n\ndef _test():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    _test()\n<|endoftext|>"}
{"task_id": "Python/66", "prompt": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n", "generation": "    return sum(ord(c) for c in s)\n\n\ndef digitSum2(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum2(\"\") => 0\n        digitSum2(\"abAB\") => 131\n        digitSum2(\"abcCd\") => 67\n        digitSum2(\"helloE\") => 69\n        digitSum2(\"woArBld\") => 131\n        digitSum2(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) for c in s)\n\n\ndef digitSum3(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum3(\"\") => 0\n        digitSum3(\"abAB\") => 131\n        digitSum3(\"abcCd\") => 67\n        digitSum3(\"helloE\") => 69\n        digitSum3(\"woArBld\") => 131\n        digitSum3(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) for c in s)\n\n\ndef digitSum4(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum4(\"\") => 0\n        digitSum4(\"abAB\") => 131\n        digitSum4(\"abcCd\") => 67\n        digitSum4(\"helloE\") => 69\n        digitSum4(\"woArBld\") => 131\n        digitSum4(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) for c in s)\n\n\ndef digitSum5(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum5(\"\") => 0\n        digitSum5(\"abAB\") => 131\n        digitSum5(\"abcCd\") => 67\n        digitSum5(\"helloE\") => 69\n        digitSum5(\"woArBld\") => 131\n        digitSum5(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) for c in s)\n\n\ndef digitSum6(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum6(\"\") => 0\n        digitSum6(\"abAB\") => 131\n        digitSum6(\"abcCd\") => 67\n        digitSum6(\"helloE\") => 69\n        digitSum6(\"woArBld\") => 131\n        digitSum6(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) for c in s)\n\n\ndef digitSum7(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum7(\"\") => 0\n        digitSum7(\"abAB\") => 131\n        digitSum7(\"abcCd\") => 67\n        digitSum7(\"helloE\") => 69\n        digitSum7(\"woArBld\") => 131\n        digitSum7(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) for c in s)\n\n\ndef digitSum8(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum8(\"\") => 0\n        digitSum8(\"abAB\") => 131\n        digitSum8(\"abcCd\") => 67\n        digitSum8(\"helloE\") => 69\n        digitSum8(\"woArBld\") => 131\n        digitSum8(\"aAaaaXa\") => 153\n"}
{"task_id": "Python/67", "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n", "generation": "    # your code here\n    s = s.split()\n    s = [int(i) for i in s]\n    n = n.split()\n    n = [int(i) for i in n]\n    s = [i for i in s if i!= \"and\"]\n    n = [i for i in n if i!= \"and\"]\n    s = [i for i in s if i!= \"apples\"]\n    n = [i for i in n if i!= \"apples\"]\n    s = [i for i in s if i!= \"oranges\"]\n    n = [i for i in n if i!= \"oranges\"]\n    s = [i for i in s if i!= \"mango\"]\n    n = [i for i in n if i!= \"mango\"]\n    s = [i for i in s if i!= \"fruit\"]\n    n = [i for i in n if i!= \"fruit\"]\n    s = [i for i in s if i!= \"mango\"]\n    n = [i for i in n if i!= \"mango\"]\n    s = [i for i in s if i!= \"mango\"]\n    n = [i for i in n if i!= \"mango\"]\n    s = [i for i in s if i!= \"mango\"]\n    n = [i for i in n if i!= \"mango\"]\n    s = [i for i in s if i!= \"mango\"]\n    n = [i for i in n if i!= \"mango\"]\n    s = [i for i in s if i!= \"mango\"]\n    n = [i for i in n if i!= \"mango\"]\n    s = [i for i in s if i!= \"mango\"]\n    n = [i for i in n if i!= \"mango\"]\n    s = [i for i in s if i!= \"mango\"]\n    n = [i for i in n if i!= \"mango\"]\n    s = [i for i in s if i!= \"mango\"]\n    n = [i for i in n if i!= \"mango\"]\n    s = [i for i in s if i!= \"mango\"]\n    n = [i for i in n if i!= \"mango\"]\n    s = [i for i in s if i!= \"mango\"]\n    n = [i for i in n if i!= \"mango\"]\n    s = [i for i in s if i!= \"mango\"]\n    n = [i for i in n if i!= \"mango\"]\n    s = [i for i in s if i!= \"mango\"]\n    n = [i for i in n if i!= \"mango\"]\n    s = [i for i in s if i!= \"mango\"]\n    n = [i for i in n if i!= \"mango\"]\n    s = [i for i in s if i!= \"mango\"]\n    n = [i for i in n if i!= \"mango\"]\n    s = [i for i in s if i!= \"mango\"]\n    n = [i for i in n if i!= \"mango\"]\n    s = [i for i in s if i!= \"mango\"]\n    n = [i for i in n if i!= \"mango\"]\n    s = [i for i in s if i!= \"mango\"]\n    n = [i for i in n if i!= \"mango\"]\n    s = [i for i in s if i!= \"mango\"]\n    n = [i for i"}
{"task_id": "Python/68", "prompt": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n", "generation": "    if len(arr) == 0:\n        return []\n    smallest_value = arr[0]\n    smallest_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < smallest_value:\n            smallest_value = arr[i]\n            smallest_index = i\n    return [smallest_value, smallest_index]\n\n\ndef main():\n    print(find_smallest_even_value([4, 2, 3]))\n    print(find_smallest_even_value([1, 2, 3]))\n    print(find_smallest_even_value([5, 0, 3, 0, 4, 2]))\n    print(find_smallest_even_value([5, 0, 3, 0, 4])))\n    print(find_smallest_even_value([5, 0, 3, 0, 4, 2, 0])))\n    print(find_smallest_even_value([5, 0, 3, 0, 4, 2, 0, 1])))\n    print(find_smallest_even_value([5, 0, 3, 0, 4, 2, 0, 1, 2])))\n\n\nif __name__ == \"__main__\":\n    main()\n<|endoftext|>"}
{"task_id": "Python/69", "prompt": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n", "generation": "    # Your code here\n    return -1\n\n\ndef search_2(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Your code here\n    return -1\n\n\ndef search_3(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Your code here\n    return -1\n\n\ndef search_4(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Your code here\n    return -1\n\n\ndef search_5(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Your code here\n    return -1\n\n\n# DO NOT CHANGE ANYTHING BELOW THIS\n###########################################\n\n\ndef test(did_pass):\n    \"\"\"  Print the result of a test.  \"\"\"\n    linenum = sys._getframe(1).f_lineno  # Get the caller's line number.\n    if did_pass:\n        msg = \"Test at line {0} ok.\".format(linenum)\n    else:\n        msg = \"Test at line {0} FAILED.\".format(linenum)\n    print(msg)\n\n\ndef test_suite():\n    \"\"\" Run the suite of tests for code in this module (this file).\n    \"\"\"\n    test(search_1(test_data) == 2)\n    test(search_2(test_data) == 3)\n    test(search_3(test_data) == -1"}
{"task_id": "Python/70", "prompt": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n", "generation": "    lst = sorted(lst)\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        return lst\n    if len(lst) == 3:\n        return lst\n    if len(lst) == 4:\n        return lst\n    if len(lst) == 5:\n        return lst\n    if len(lst) == 6:\n        return lst\n    if len(lst) == 7:\n        return lst\n    if len(lst) == 8:\n        return lst\n    if len(lst) == 9:\n        return lst\n    if len(lst) == 10:\n        return lst\n    if len(lst) == 11:\n        return lst\n    if len(lst) == 12:\n        return lst\n    if len(lst) == 13:\n        return lst\n    if len(lst) == 14:\n        return lst\n    if len(lst) == 15:\n        return lst\n    if len(lst) == 16:\n        return lst\n    if len(lst) == 17:\n        return lst\n    if len(lst) == 18:\n        return lst\n    if len(lst) == 19:\n        return lst\n    if len(lst) == 20:\n        return lst\n    if len(lst) == 21:\n        return lst\n    if len(lst) == 22:\n        return lst\n    if len(lst) == 23:\n        return lst\n    if len(lst) == 24:\n        return lst\n    if len(lst) == 25:\n        return lst\n    if len(lst) == 26:\n        return lst\n    if len(lst) == 27:\n        return lst\n    if len(lst) == 28:\n        return lst\n    if len(lst) == 29:\n        return lst\n    if len(lst) == 30:\n        return lst\n    if len(lst) == 31:\n        return lst\n    if len(lst) == 32:\n        return lst\n    if len(lst) == 33:\n        return lst\n    if len(lst) == 34:\n        return lst\n    if len(lst) == 35:\n        return lst\n    if len(lst) == 36:\n        return lst\n    if len(lst) == 37:\n        return lst\n    if len(lst) == 38:\n        return lst\n    if len(lst) == 39:\n        return lst\n    if len(lst) == 40:\n        return lst\n    if len(lst) == 41:\n        return lst\n    if len(lst) == 42:\n        return lst\n    if len(lst) == 43:\n        return lst\n    if len(lst) == 44:\n        return lst\n    if len(lst) == 45:\n        return lst\n    if len(lst) == 46:\n        return lst\n    if len(lst) == 47:\n        return lst\n    if len(lst) == 48:\n        return lst\n    if len(lst) == 49:\n        return lst\n    if len(lst) == 50:\n        return lst\n    if len(lst) == 51:\n        return lst\n    if len(lst) == 52:\n        return lst\n    if len(lst) == 53:\n        return lst\n    if len(lst) == 54:\n        return lst\n    if len"}
{"task_id": "Python/71", "prompt": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n", "generation": "    if a + b > c and a + c > b and b + c > a:\n        return round(math.sqrt(a*a + b*b + c*c) / 2, 2)\n    else:\n        return -1\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return round(math.sqrt(a*a + b*b + c*c) / 2, 2)\n    else:\n        return -1\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return round(math.sqrt(a*a + b*b + c*c) / 2, 2)\n    else:\n        return -1\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return round(math.sqrt(a*a + b*b + c*c) / 2, 2)\n    else:\n        return -1\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return round(math.sqrt(a*a + b*b + c*c) / 2, 2)\n    else:\n        return -1\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2"}
{"task_id": "Python/72", "prompt": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n", "generation": "    \n    # your code here\n    return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"}
{"task_id": "Python/73", "prompt": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n", "generation": "    # 1. Find the length of the array.\n    length = len(arr)\n\n    # 2. Find the minimum number of elements that need to be changed to make the array palindromic.\n    min_change = length\n\n    # 3. Iterate through the array, and check if the number of elements that need to be changed is less than the minimum number of elements that need to be changed.\n    for i in range(length - 1):\n        if arr[i]!= arr[i + 1]:\n            min_change -= 1\n\n    # 4. Return the minimum number of elements that need to be changed to make the array palindromic.\n    return min_change\n\n\ndef smallest_change_2(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # 1. Find the length of the array.\n    length = len(arr)\n\n    # 2. Find the minimum number of elements that need to be changed to make the array palindromic.\n    min_change = length\n\n    # 3. Iterate through the array, and check if the number of elements that need to be changed is less than the minimum number of elements that need to be changed.\n    for i in range(length - 1):\n        if arr[i]!= arr[i + 1]:\n            min_change -= 1\n\n    # 4. Return the minimum number of elements that need to be changed to make the array palindromic.\n    return min_change\n\n\ndef smallest_change_3(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # 1. Find the length of the array.\n    length = len(arr)\n\n    # 2. Find the minimum number of elements that need to be changed to make the array palindromic.\n    min_change = length\n\n    # 3. Iterate through the array, and check if the number of elements that need to be changed is less than the minimum number of elements that need to be changed.\n    for i in range(length - 1):\n        if arr[i]!= arr[i + 1]:\n            min_change -= 1\n\n    # 4. Return the minimum number of elements that need to be changed to make the array palindromic.\n    return min_change\n\n\ndef smallest_change_4(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6"}
{"task_id": "Python/74", "prompt": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n", "generation": "    \n    # your code here\n    \n    return lst1\n\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']) )\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) )\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) )\nprint(total_match(['4'], ['1', '2', '3', '4', '5']) )\nprint(total_match(['hi', 'admin'], ['hi', 'admin']) )\nprint(total_match(['hi', 'admin'], ['admin', 'admin']) )\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin']) )\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'hi']) )\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'hi', 'hi']) )\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'hi', 'hi', 'hi']) )\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'hi', 'hi', 'hi', 'hi']) )\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi']) )\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi']) )\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi']) )\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi']) )\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi']) )\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi']) )\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi']) )\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi']) )\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi']) )\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi"}
{"task_id": "Python/75", "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n", "generation": "    for i in range(2, 100):\n        if a % i == 0:\n            return False\n    return True\n\n\ndef is_prime(a):\n    \"\"\"Write a function that returns true if the given number is prime and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 2:\n        return False\n    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return True\n\n\ndef is_prime_2(a):\n    \"\"\"Write a function that returns true if the given number is prime and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_prime_2(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 2:\n        return False\n    if a == 2:\n        return True\n    if a % 2 == 0:\n        return False\n    for i in range(3, int(a ** 0.5) + 1, 2):\n        if a % i == 0:\n            return False\n    return True\n\n\ndef is_prime_3(a):\n    \"\"\"Write a function that returns true if the given number is prime and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_prime_3(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 2:\n        return False\n    if a == 2:\n        return True\n    if a % 2 == 0:\n        return False\n    for i in range(3, int(a ** 0.5) + 1, 2):\n        if a % i == 0:\n            return False\n    return True\n\n\ndef is_prime_4(a):\n    \"\"\"Write a function that returns true if the given number is prime and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_prime_4(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 2:\n        return False\n    if a == 2:\n        return True\n    if a % 2 == 0:\n        return False\n    for i in range(3, int(a ** 0.5) + 1, 2):\n        if a % i == 0:\n            return False\n    return True\n\n\ndef is_prime_5(a):\n    \"\"\"Write a function that returns true if the given number is prime and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_prime_5(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 2:\n        return False\n    if a == 2:\n        return True\n    if a % 2 == 0:\n        return False\n    for i in range(3, int(a ** 0.5) + 1, 2):\n        if a % i == 0:\n            return False\n    return True\n\n\ndef is_prime_6(a):\n    \"\"\"Write a function that returns true if the given number is prime and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_prime_6(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 2:\n        return False\n    if a == 2:\n        return True\n    if a % 2 == 0:\n        return False\n    for i in range(3, int(a ** 0.5) + 1, 2):\n        if a % i == 0:\n            return False\n    return True\n\n\ndef is_prime_7(a):\n    \"\"\"Write a function that returns true if the given number is prime and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_prime_7(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 2"}
{"task_id": "Python/76", "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n", "generation": "    # Your code here\n    if n == 1:\n        return True\n    if n == 0:\n        return False\n    if n % 2 == 0:\n        return is_simple_power(n // 2, n)\n    else:\n        return is_simple_power(n * 3 + 1, n)\n\n\ndef is_simple_power2(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    # Your code here\n    if n == 1:\n        return True\n    if n == 0:\n        return False\n    if n % 2 == 0:\n        return is_simple_power2(x, n // 2)\n    else:\n        return is_simple_power2(x, n * 3 + 1)\n\n\ndef is_simple_power3(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    # Your code here\n    if n == 1:\n        return True\n    if n == 0:\n        return False\n    if n % 2 == 0:\n        return is_simple_power3(x, n // 2)\n    else:\n        return is_simple_power3(x, n * 3 + 1)\n\n\ndef is_simple_power4(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    # Your code here\n    if n == 1:\n        return True\n    if n == 0:\n        return False\n    if n % 2 == 0:\n        return is_simple_power4(x, n // 2)\n    else:\n        return is_simple_power4(x, n * 3 + 1)\n\n\ndef is_simple_power5(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>"}
{"task_id": "Python/77", "prompt": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n", "generation": "    # your code here\n    if a**3 == a:\n        return True\n    else:\n        return False\n\nprint iscube(1)\nprint iscube(2)\nprint iscube(-1)\nprint iscube(64)\nprint iscube(0)\nprint iscube(180)\n\n'''\n\n# Write a function that takes an integer a and returns True \n# if this ingeger is a cube of some integer number.\n# Note: you may assume the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==> False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n# iscube(180) ==> False\n'''\n\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    # your code here\n    if a**3 == a:\n        return True\n    else:\n        return False\n\nprint iscube(1)\nprint iscube(2)\nprint iscube(-1)\nprint iscube(64)\nprint iscube(0)\nprint iscube(180)\n\n'''\n\n# Write a function that takes an integer a and returns True \n# if this ingeger is a cube of some integer number.\n# Note: you may assume the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==> False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n# iscube(180) ==> False\n'''\n\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    # your code here\n    if a**3 == a:\n        return True\n    else:\n        return False\n\nprint iscube(1)\nprint iscube(2)\nprint iscube(-1)\nprint iscube(64)\nprint iscube(0)\nprint iscube(180)\n\n'''\n\n# Write a function that takes an integer a and returns True \n# if this ingeger is a cube of some integer number.\n# Note: you may assume the input is always valid.\n# Examples:\n# iscube(1) ==> True\n# iscube(2) ==> False\n# iscube(-1) ==> True\n# iscube(64) ==> True\n# iscube(0) ==> True\n# iscube(180) ==> False\n'''\n\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180"}
{"task_id": "Python/78", "prompt": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n", "generation": "    # Your code here\n    pass\n\n\ndef _key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Your code here\n    pass\n\n\ndef _key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Your code here\n    pass\n\n\ndef _key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n"}
{"task_id": "Python/79", "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n", "generation": "    binary = \"\"\n    while decimal > 0:\n        binary += str(decimal % 2)\n        decimal //= 2\n    binary = binary[::-1]\n    binary = \"db\" + binary + \"db\"\n    return binary\n\n\ndef binary_to_decimal(binary):\n    \"\"\"You will be given a string with binary numbers and your task is to convert it to decimal format.\n    The function should return a string, with each character representing a decimal number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    binary_to_decimal(\"db1111db\")   # returns 15\n    binary_to_decimal(\"db100000db\") # returns 32\n    \"\"\"\n    decimal = 0\n    for i in range(len(binary) - 1, -1, -1):\n        if binary[i] == \"1\":\n            decimal += 2 ** (len(binary) - 1 - i)\n    return decimal\n\n\ndef binary_to_text(binary):\n    \"\"\"You will be given a string with binary numbers and your task is to convert it to text format.\n    The function should return a string, with each character representing a text character. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    binary_to_text(\"db1111db\")   # returns \"one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one"}
{"task_id": "Python/80", "prompt": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n", "generation": "    if len(s) < 3:\n        return False\n    if len(set(s)) == len(s):\n        return True\n    return False\n\n\ndef _is_happy_2(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    if len(set(s)) == len(s):\n        return True\n    return False\n\n\ndef _is_happy_3(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    if len(set(s)) == len(s):\n        return True\n    return False\n\n\ndef _is_happy_4(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    if len(set(s)) == len(s):\n        return True\n    return False\n\n\ndef _is_happy_5(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    if len(set(s)) == len(s):\n        return True\n    return False\n\n\ndef _is_happy_6(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    if len(set(s)) == len(s):\n        return True\n    return False\n\n\ndef _is_happy_7(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n"}
{"task_id": "Python/81", "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n", "generation": "    grades = sorted(grades)\n    if len(grades) == 0:\n        return []\n    if grades[-1] >= 4.0:\n        return [\"A+\"] * len(grades)\n    elif grades[-1] >= 3.7:\n        return [\"A\"] * len(grades)\n    elif grades[-1] >= 3.3:\n        return [\"A-\"] * len(grades)\n    elif grades[-1] >= 3.0:\n        return [\"B+\"] * len(grades)\n    elif grades[-1] >= 2.7:\n        return [\"B\"] * len(grades)\n    elif grades[-1] >= 2.3:\n        return [\"B-\"] * len(grades)\n    elif grades[-1] >= 2.0:\n        return [\"C+\"] * len(grades)\n    elif grades[-1] >= 1.7:\n        return [\"C\"] * len(grades)\n    elif grades[-1] >= 1.3:\n        return [\"C-\"] * len(grades)\n    elif grades[-1] >= 1.0:\n        return [\"D+\"] * len(grades)\n    elif grades[-1] >= 0.7:\n        return [\"D\"] * len(grades)\n    elif grades[-1] >= 0.0:\n        return [\"D-\"] * len(grades)\n    else:\n        return [\"E\"] * len(grades)\n\n\ndef get_letter_grade(gpa):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    grades = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]\n    for i in range(len(grades)):\n        if gpa >= grades[i"}
{"task_id": "Python/82", "prompt": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n", "generation": "    if len(string) == 1:\n        return False\n    for i in range(2, len(string)):\n        if len(string) % i == 0:\n            return False\n    return True\n\n\ndef is_prime(number):\n    \"\"\"Write a function that takes a number and returns True if the number is a prime number or False otherwise\n    Examples\n    is_prime(5) == True\n    is_prime(6) == True\n    is_prime(7) == True\n    is_prime(8) == False\n    \"\"\"\n    if number == 1:\n        return False\n    for i in range(2, number):\n        if number % i == 0:\n            return False\n    return True\n\n\ndef is_prime_list(list):\n    \"\"\"Write a function that takes a list and returns True if the list is a prime list or False otherwise\n    Examples\n    is_prime_list([5, 6, 7, 8]) == True\n    is_prime_list([5, 6, 7, 9]) == False\n    is_prime_list([]) == True\n    \"\"\"\n    if len(list) == 1:\n        return False\n    for i in range(2, len(list)):\n        if len(list) % i == 0:\n            return False\n    return True\n\n\ndef is_prime_dict(dict):\n    \"\"\"Write a function that takes a dictionary and returns True if the dictionary is a prime dictionary or False otherwise\n    Examples\n    is_prime_dict({5: 6, 6: 7, 7: 8}) == True\n    is_prime_dict({5: 6, 6: 7, 9: 10}) == False\n    is_prime_dict({}) == True\n    \"\"\"\n    if len(dict) == 1:\n        return False\n    for key in dict:\n        if len(dict[key]) % key == 0:\n            return False\n    return True\n\n\ndef is_prime_tuple(tuple):\n    \"\"\"Write a function that takes a tuple and returns True if the tuple is a prime tuple or False otherwise\n    Examples\n    is_prime_tuple((5, 6, 7, 8)) == True\n    is_prime_tuple((5, 6, 7, 9)) == False\n    is_prime_tuple(()) == True\n    \"\"\"\n    if len(tuple) == 1:\n        return False\n    for i in range(2, len(tuple)):\n        if len(tuple) % i == 0:\n            return False\n    return True\n\n\ndef is_prime_set(set):\n    \"\"\"Write a function that takes a set and returns True if the set is a prime set or False otherwise\n    Examples\n    is_prime_set({5, 6, 7, 8}) == True\n    is_prime_set({5, 6, 7, 9}) == False\n    is_prime_set({}) == True\n    \"\"\"\n    if len(set) == 1:\n        return False\n    for i in range(2, len(set)):\n        if len(set) % i == 0:\n            return False\n    return True\n\n\ndef is_prime_frozenset(frozenset):\n    \"\"\"Write a function that takes a frozenset and returns True if the frozenset is a prime frozenset or False otherwise\n    Examples\n    is_prime_frozenset({5, 6, 7, 8}) == True\n    is_prime_frozenset({5, 6, 7, 9}) == False\n    is_prime_frozenset({}) == True\n    \"\"\"\n    if len(frozenset) == 1:\n        return False\n    for i in range(2, len(frozenset)):\n        if len(frozenset) % i == 0:\n            return False\n    return True\n\n\ndef is_prime_iterable(iterable):\n    \"\"\"Write a function that takes an iterable and returns True if the iterable is a prime iterable or False otherwise\n    Examples\n    is_prime_iterable([5"}
{"task_id": "Python/83", "prompt": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n", "generation": "    if n == 1:\n        return 1\n    else:\n        return sum(\n            [\n                _one_ends(n - i)\n                for i in range(1, int(math.log10(n))) + 1)\n                if n - i > 0\n            ]\n        )\n\n\ndef _one_ends_with_one_starts(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1 and also have 1 at the start or end.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return sum(\n            [\n                _one_ends_with_one_starts(n - i)\n                for i in range(1, int(math.log10(n))) + 1)\n                if n - i > 0\n            ]\n        )\n\n\ndef _one_ends_with_one_starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1 and also have 1 at the start or end,\n    and also have 1 at the end.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return sum(\n            [\n                _one_ends_with_one_starts_one_ends(n - i)\n                for i in range(1, int(math.log10(n))) + 1)\n                if n - i > 0\n            ]\n        )\n\n\ndef _one_ends_with_one_starts_one_ends_one_starts(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1 and also have 1 at the start or end,\n    and also have 1 at the end and also have 1 at the start.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return sum(\n            [\n                _one_ends_with_one_starts_one_ends_one_starts(n - i)\n                for i in range(1, int(math.log10(n))) + 1)\n                if n - i > 0\n            ]\n        )\n\n\ndef _one_ends_with_one_starts_one_ends_one_starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1 and also have 1 at the start or end,\n    and also have 1 at the end and also have 1 at the start and also have 1 at the end.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return sum(\n            [\n                _one_ends_with_one_starts_one_ends_one_starts_one_ends(n - i)\n                for i in range(1, int(math.log10(n))) + 1)\n                if n - i > 0\n            ]\n        )\n\n\ndef _one_ends_with_one_starts_one_ends_one_starts_one_ends_one_starts(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1 and also have 1 at the start or end,\n    and also have 1 at the end and also have 1 at the start and also have 1 at the end,\n    and also have 1 at the start and also have 1 at the end.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return sum(\n            [\n                _one_ends_with_one_starts_one_ends_one_starts_one_ends_one_starts(\n                    n - i\n                )\n                for i in range(1, int(math.log10(n))) + 1)\n                if n - i > 0\n            ]\n        )\n\n\ndef _one_ends_with"}
{"task_id": "Python/84", "prompt": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n", "generation": "    if N == 0:\n        return \"0\"\n    else:\n        return str(bin(N)[2:]).zfill(len(bin(N)[2:])))\n\n\ndef get_sum_of_digits_in_binary_of_positive_integers_in_decimal(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"0\"\n    else:\n        return str(bin(N)[2:]).zfill(len(bin(N)[2:])))\n\n\ndef get_sum_of_digits_in_binary_of_positive_integers_in_octal(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"0\"\n    else:\n        return str(bin(N)[2:]).zfill(len(bin(N)[2:])))\n\n\ndef get_sum_of_digits_in_binary_of_positive_integers_in_hexadecimal(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"0\"\n    else:\n        return str(bin(N)[2:]).zfill(len(bin(N)[2:])))\n\n\ndef get_sum_of_digits_in_binary_of_positive_integers_in_decimal_and_hexadecimal(\n    N,\n):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"0\"\n    else:\n        return str(bin(N)[2:]).zfill(len(bin(N)[2:])))\n\n\ndef get_sum_of_digits_in_binary_of_positive_integers_in_decimal_and_octal(\n    N,\n):\n    \"\"\"Given a positive integer N, return the"}
{"task_id": "Python/85", "prompt": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n", "generation": "    return sum(lst[i::2] for i in range(2 * len(lst)))\n\n\ndef get_all_sublists(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return [lst[i::2] for i in range(2 * len(lst))]\n\n\ndef get_all_sublists_with_length(lst, length):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return [lst[i::2] for i in range(2 * length)]\n\n\ndef get_all_sublists_with_length_and_max_length(lst, length, max_length):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return [lst[i::2] for i in range(2 * length)]\n\n\ndef get_all_sublists_with_length_and_max_length_and_min_length(\n    lst, length, max_length, min_length\n):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return [lst[i::2] for i in range(2 * length)]\n\n\ndef get_all_sublists_with_length_and_max_length_and_min_length_and_max_length(\n    lst, length, max_length, min_length, max_length\n):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return [lst[i::2] for i in range(2 * length)]\n\n\ndef get_all_sublists_with_length_and_max_length_and_min_length_and_max_length_and_min_length(\n    lst, length, max_length, min_length, max_length, min_length\n):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return [lst[i::2] for i in range(2 * length)]\n\n\ndef get_all_sublists_with_length_and_max_length_and_min_length_and_max_length_and_min_length_and_max_length_and_min_length(\n    lst, length, max_length, min_length, max_length, min_length\n):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return [lst[i::2] for i in range(2 * length)]\n\n\ndef get_all_sublists_with_length_and_max_length_and_min_length_and_max_length_and_min_length_and_max_length_and_min_length_and_max_length_and_min_length(\n    lst, length, max_length, min_length, max_length, min_length\n):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return [lst[i::2] for i in range(2 * length)]\n\n\ndef get_all_sublists_with_length_and_max_length_"}
{"task_id": "Python/86", "prompt": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n", "generation": "    # your code here\n    s = s.split(\" \")\n    s = [i for i in s if i!= \"\"]\n    s = \" \".join(s)\n    s = s.split(\" \")\n    s = [i for i in s if i!= \"\"]\n    s = \" \".join(s)\n    s = s.split(\" \")\n    s = [i for i in s if i!= \"\"]\n    s = \" \".join(s)\n    s = s.split(\" \")\n    s = [i for i in s if i!= \"\"]\n    s = \" \".join(s)\n    s = s.split(\" \")\n    s = [i for i in s if i!= \"\"]\n    s = \" \".join(s)\n    s = s.split(\" \")\n    s = [i for i in s if i!= \"\"]\n    s = \" \".join(s)\n    s = s.split(\" \")\n    s = [i for i in s if i!= \"\"]\n    s = \" \".join(s)\n    s = s.split(\" \")\n    s = [i for i in s if i!= \"\"]\n    s = \" \".join(s)\n    s = s.split(\" \")\n    s = [i for i in s if i!= \"\"]\n    s = \" \".join(s)\n    s = s.split(\" \")\n    s = [i for i in s if i!= \"\"]\n    s = \" \".join(s)\n    s = s.split(\" \")\n    s = [i for i in s if i!= \"\"]\n    s = \" \".join(s)\n    s = s.split(\" \")\n    s = [i for i in s if i!= \"\"]\n    s = \" \".join(s)\n    s = s.split(\" \")\n    s = [i for i in s if i!= \"\"]\n    s = \" \".join(s)\n    s = s.split(\" \")\n    s = [i for i in s if i!= \"\"]\n    s = \" \".join(s)\n    s = s.split(\" \")\n    s = [i for i in s if i!= \"\"]\n    s = \" \".join(s)\n    s = s.split(\" \")\n    s = [i for i in s if i!= \"\"]\n    s = \" \".join(s)\n    s = s.split(\" \")\n    s = [i for i in s if i!= \"\"]\n    s = \" \".join(s)\n    s = s.split(\" \")\n    s = [i for i in s if i!= \"\"]\n    s = \" \".join(s)\n    s = s.split(\" \")\n    s = [i for i in s if i!= \"\"]\n    s = \" \".join(s)\n    s = s.split(\" \")\n    s = [i for i in s if i!= \"\"]\n    s = \" \".join(s)\n    s = s.split(\" \")\n    s = [i for i in s if i!= \"\"]\n    s = \" \".join(s)\n    s = s.split(\" \")\n    s = [i for i in s if i!= \"\"]\n    s = \" \".join(s)\n    s = s.split(\" \")\n    s = [i for i in s if i!= \"\"]\n    s = \" \".join(s)\n    s = s.split(\" \")\n    s = [i for i in s if i!= \"\"]\n    s = \" \".join(s)\n    s = s.split(\" \")\n    s = [i for i in s if i!= \"\"]\n    s = \""}
{"task_id": "Python/87", "prompt": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n", "generation": "    # Your code here\n    lst = sorted(lst, key=lambda x: x[0])\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    for i in range(len(lst)):\n        if lst[i][0] == x:\n            return [(lst[i][0], lst[i][1])]\n    return []\n\n\ndef get_column(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by columns in ascending order.\n    Also, sort coordinates of the column by rows in descending order.\n    \n    Examples:\n    get_column([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (1, 0), (1, 1), (1, 2)]\n    get_column([], 1) == []\n    get_column([[], [1], [1, 2, 3]], 3) == [(2, 0), (2, 1), (2, 2)]\n    \"\"\"\n    # Your code here\n    lst = sorted(lst, key=lambda x: x[1])\n    lst = sorted(lst, key=lambda x: x[0], reverse=True)\n    for i in range(len(lst)):\n        if lst[i][1] == x:\n            return [(lst[i][0], lst[i][1])]\n    return []\n\n\ndef get_diagonal(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the diagonal by columns in descending order.\n    \n    Examples:\n    get_diagonal([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (2, 5), (3, 6), (4, 0), (4, 1), (4, 2)]\n    get_diagonal([], 1) == []\n    get_di"}
{"task_id": "Python/88", "prompt": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n", "generation": "    # TODO: implement this function\n    pass\n\n\ndef sort_array_by_sum_of_first_index_values(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array_by_sum_of_first_index_values([]) => []\n    * sort_array_by_sum_of_first_index_values([5]) => [5]\n    * sort_array_by_sum_of_first_index_values([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array_by_sum_of_first_index_values([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # TODO: implement this function\n    pass\n\n\ndef sort_array_by_sum_of_last_index_values(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array_by_sum_of_last_index_values([]) => []\n    * sort_array_by_sum_of_last_index_values([5]) => [5]\n    * sort_array_by_sum_of_last_index_values([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array_by_sum_of_last_index_values([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # TODO: implement this function\n    pass\n\n\ndef sort_array_by_sum_of_first_and_last_index_values(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array_by_sum_of_first_and_last_index_values([]) => []\n    * sort_array_by_sum_of_first_and_last_index_values([5]) => [5]\n    * sort_array_by_sum_of_first_and_last_index_values([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array_by_sum_of_first_and_last_index_values([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # TODO"}
{"task_id": "Python/89", "prompt": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n", "generation": "    # Create a list of the alphabet\n    alphabet = list(string.ascii_lowercase)\n\n    # Create a list of the alphabet shifted down by two places\n    alphabet_shifted_down_by_two = alphabet[2:] + alphabet[:2]\n\n    # Create a list of the alphabet shifted down by two places\n    alphabet_shifted_down_by_two_reversed = alphabet_shifted_down_by_two[::-1]\n\n    # Create a list of the alphabet shifted down by two places\n    alphabet_shifted_down_by_two_reversed_reversed = alphabet_shifted_down_by_two_reversed[\n        ::-1\n    ]\n\n    # Create a list of the alphabet shifted down by two places\n    alphabet_shifted_down_by_two_reversed_reversed_reversed = (\n        alphabet_shifted_down_by_two_reversed_reversed[::-1]\n    )[::-1]\n\n    # Create a list of the alphabet shifted down by two places\n    alphabet_shifted_down_by_two_reversed_reversed_reversed_reversed = (\n        alphabet_shifted_down_by_two_reversed_reversed_reversed[::-1]\n    )[::-1]\n\n    # Create a list of the alphabet shifted down by two places\n    alphabet_shifted_down_by_two_reversed_reversed_reversed_reversed_reversed = (\n        alphabet_shifted_down_by_two_reversed_reversed_reversed[::-1]\n    )[::-1]\n\n    # Create a list of the alphabet shifted down by two places\n    alphabet_shifted_down_by_two_reversed_reversed_reversed_reversed_reversed_reversed = (\n        alphabet_shifted_down_by_two_reversed_reversed_reversed[::-1]\n    )[::-1]\n\n    # Create a list of the alphabet shifted down by two places\n    alphabet_shifted_down_by_two_reversed_reversed_reversed_reversed_reversed_reversed_reversed = (\n        alphabet_shifted_down_by_two_reversed_reversed_reversed[::-1]\n    )[::-1]\n\n    # Create a list of the alphabet shifted down by two places\n    alphabet_shifted_down_by_two_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed = (\n        alphabet_shifted_down_by_two_reversed_reversed_reversed[::-1]\n    )[::-1]\n\n    # Create a list of the alphabet shifted down by two places\n    alphabet_shifted_down_by_two_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed = (\n        alphabet_shifted_down_by_two_reversed_reversed_reversed[::-1]\n    )[::-1]\n\n    # Create a list of the alphabet shifted down by two places\n    alphabet_shifted_down_by_two_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed = (\n        alphabet_shifted_down_by_two_reversed_reversed_reversed[::-1]\n    )[::-1"}
{"task_id": "Python/90", "prompt": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n", "generation": "    # your code here\n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return min(lst)\n    if len(lst) > 2:\n        return min(lst[0], lst[1], key=lambda x: x)\n\n\n# print(next_smallest([1, 2, 3, 4, 5]))\n# print(next_smallest([5, 1, 4, 3, 2]))\n# print(next_smallest([]))\n# print(next_smallest([1, 1]))\n# print(next_smallest([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,"}
{"task_id": "Python/91", "prompt": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n", "generation": "    # your code here\n    S = S.lower()\n    S = S.replace(\".\", \"\")\n    S = S.replace(\"?\", \"\")\n    S = S.replace(\"!\", \"\")\n    S = S.replace(\" \", \"\")\n    S = S.replace(\"i\", \"\")\n    S = S.replace(\"'\", \"\")\n    S = S.replace(\"-\", \"\")\n    S = S.replace(\";\", \"\")\n    S = S.replace(\",\", \"\")\n    S = S.replace(\".\", \"\")\n    S = S.replace(\"'\", \"\")\n    S = S.replace(\"!\", \"\")\n    S = S.replace(\"?\", \"\")\n    S = S.replace(\";\", \"\")\n    S = S.replace(\",\", \"\")\n    S = S.replace(\".\", \"\")\n    S = S.replace(\"'\", \"\")\n    S = S.replace(\"!\", \"\")\n    S = S.replace(\"?\", \"\")\n    S = S.replace(\";\", \"\")\n    S = S.replace(\",\", \"\")\n    S = S.replace(\".\", \"\")\n    S = S.replace(\"'\", \"\")\n    S = S.replace(\"!\", \"\")\n    S = S.replace(\"?\", \"\")\n    S = S.replace(\";\", \"\")\n    S = S.replace(\",\", \"\")\n    S = S.replace(\".\", \"\")\n    S = S.replace(\"'\", \"\")\n    S = S.replace(\"!\", \"\")\n    S = S.replace(\"?\", \"\")\n    S = S.replace(\";\", \"\")\n    S = S.replace(\",\", \"\")\n    S = S.replace(\".\", \"\")\n    S = S.replace(\"'\", \"\")\n    S = S.replace(\"!\", \"\")\n    S = S.replace(\"?\", \"\")\n    S = S.replace(\";\", \"\")\n    S = S.replace(\",\", \"\")\n    S = S.replace(\".\", \"\")\n    S = S.replace(\"'\", \"\")\n    S = S.replace(\"!\", \"\")\n    S = S.replace(\"?\", \"\")\n    S = S.replace(\";\", \"\")\n    S = S.replace(\",\", \"\")\n    S = S.replace(\".\", \"\")\n    S = S.replace(\"'\", \"\")\n    S = S.replace(\"!\", \"\")\n    S = S.replace(\"?\", \"\")\n    S = S.replace(\";\", \"\")\n    S = S.replace(\",\", \"\")\n    S = S.replace(\".\", \"\")\n    S = S.replace(\"'\", \"\")\n    S = S.replace(\"!\", \"\")\n    S = S.replace(\"?\", \"\")\n    S = S.replace(\";\", \"\")\n    S = S.replace(\",\", \"\")\n    S = S.replace(\".\", \"\")\n    S = S.replace(\"'\", \"\")\n    S = S.replace(\"!\", \"\")\n    S = S.replace(\"?\", \"\")\n    S = S.replace(\";\", \"\")\n    S = S.replace(\",\", \"\")\n    S = S.replace(\".\", \"\")\n    S = S.replace(\"'\", \"\")\n    S = S.replace(\"!\", \"\")\n    S = S.replace(\"?\", \"\")\n    S = S.replace(\";\", \"\")\n    S = S.replace(\",\", \"\")\n    S = S.replace(\".\", \"\")\n    S = S.replace(\"'\", \"\")\n    S = S.replace(\"!\", \"\")\n    S = S.replace(\"?\", \"\")\n    S = S.replace(\";\", \"\")\n    S = S.replace(\",\", \"\")\n    S = S.replace(\".\", \"\")\n    S = S.replace(\"'\", \"\")\n    S = S.replace"}
{"task_id": "Python/92", "prompt": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n", "generation": "    if x == y + z:\n        return True\n    elif x == y - z:\n        return True\n    elif x == z + y:\n        return True\n    elif x == z - y:\n        return True\n    elif y == z + x:\n        return True\n    elif y == z - x:\n        return True\n    elif z == x + y:\n        return True\n    elif z == x - y:\n        return True\n    else:\n        return False\n\n\ndef any_int_2(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    if x == y + z:\n        return True\n    elif x == y - z:\n        return True\n    elif x == z + y:\n        return True\n    elif x == z - y:\n        return True\n    elif y == z + x:\n        return True\n    elif y == z - x:\n        return True\n    elif z == x + y:\n        return True\n    elif z == x - y:\n        return True\n    else:\n        return False\n\n\ndef any_int_3(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    if x == y + z:\n        return True\n    elif x == y - z:\n        return True\n    elif x == z + y:\n        return True\n    elif x == z - y:\n        return True\n    elif y == z + x:\n        return True\n    elif y == z - x:\n        return True\n    elif z == x + y:\n        return True\n    elif z == x - y:\n        return True\n    else:\n        return False\n\n\ndef any_int_4(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    if x == y + z:\n        return True\n    elif x == y - z:\n        return True\n    elif x == z + y:\n        return True\n    elif x == z - y:\n        return True\n    elif y == z + x:\n        return True\n"}
{"task_id": "Python/93", "prompt": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n", "generation": "    # replace all vowels in the message with the letter that appears 2 places ahead of that vowel in the english alphabet\n    message = message.replace(\"a\", \"2\")\n    message = message.replace(\"e\", \"2\")\n    message = message.replace(\"i\", \"2\")\n    message = message.replace(\"o\", \"2\")\n    message = message.replace(\"u\", \"2\")\n    message = message.replace(\"A\", \"22\")\n    message = message.replace(\"E\", \"22\")\n    message = message.replace(\"I\", \"22\")\n    message = message.replace(\"O\", \"22\")\n    message = message.replace(\"U\", \"22\")\n    # replace all consonants in the message with the letter that appears 2 places ahead of that consonant in the english alphabet\n    message = message.replace(\"b\", \"2\")\n    message = message.replace(\"c\", \"2\")\n    message = message.replace(\"d\", \"2\")\n    message = message.replace(\"f\", \"2\")\n    message = message.replace(\"g\", \"2\")\n    message = message.replace(\"h\", \"2\")\n    message = message.replace(\"j\", \"2\")\n    message = message.replace(\"k\", \"2\")\n    message = message.replace(\"l\", \"2\")\n    message = message.replace(\"m\", \"2\")\n    message = message.replace(\"n\", \"2\")\n    message = message.replace(\"p\", \"2\")\n    message = message.replace(\"q\", \"2\")\n    message = message.replace(\"r\", \"2\")\n    message = message.replace(\"s\", \"2\")\n    message = message.replace(\"t\", \"2\")\n    message = message.replace(\"v\", \"2\")\n    message = message.replace(\"w\", \"2\")\n    message = message.replace(\"x\", \"2\")\n    message = message.replace(\"y\", \"2\")\n    message = message.replace(\"z\", \"2\")\n    # return the encoded message\n    return message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter that \n    appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSScGG')\n    'this is a message'\n    \"\"\"\n    # replace all vowels in the message with the letter that appears 2 places ahead of that vowel in the english alphabet\n    message = message.replace(\"2\", \"a\")\n    message = message.replace(\"22\", \"e\")\n    message = message.replace(\"22\", \"i\")\n    message = message.replace(\"22\", \"o\")\n    message = message.replace(\"22\", \"u\")\n    message = message.replace(\"2\", \"A\")\n    message = message.replace(\"2\", \"E\")\n    message = message.replace(\"2\", \"I\")\n    message = message.replace(\"2\", \"O\")\n    message = message.replace(\"2\", \"U\")\n    # replace all consonants in the message with the letter that appears 2 places ahead of that consonant in the english alphabet\n    message = message.replace(\"2\", \"b\")\n    message = message.replace(\"2\", \"c\")\n    message = message.replace(\"2\", \"d\")\n    message = message.replace(\"2\", \"f\")\n    message = message.replace(\"2\", \"g\")\n    message = message.replace(\"2\", \"h\")\n    message = message.replace(\"2\", \"j\")\n    message = message.replace(\"2\", \"k\")\n    message = message.replace(\"2\", \"l\")\n    message = message.replace(\"2\", \"m\")\n    message = message.replace(\"2\", \"n\")\n"}
{"task_id": "Python/94", "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n", "generation": "    # your code here\n    if len(lst) == 0:\n        return 0\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return max(lst)\n    if len(lst) == 3:\n        return max(lst)\n    if len(lst) == 4:\n        return max(lst)\n    if len(lst) == 5:\n        return max(lst)\n    if len(lst) == 6:\n        return max(lst)\n    if len(lst) == 7:\n        return max(lst)\n    if len(lst) == 8:\n        return max(lst)\n    if len(lst) == 9:\n        return max(lst)\n    if len(lst) == 10:\n        return max(lst)\n    if len(lst) == 11:\n        return max(lst)\n    if len(lst) == 12:\n        return max(lst)\n    if len(lst) == 13:\n        return max(lst)\n    if len(lst) == 14:\n        return max(lst)\n    if len(lst) == 15:\n        return max(lst)\n    if len(lst) == 16:\n        return max(lst)\n    if len(lst) == 17:\n        return max(lst)\n    if len(lst) == 18:\n        return max(lst)\n    if len(lst) == 19:\n        return max(lst)\n    if len(lst) == 20:\n        return max(lst)\n    if len(lst) == 21:\n        return max(lst)\n    if len(lst) == 22:\n        return max(lst)\n    if len(lst) == 23:\n        return max(lst)\n    if len(lst) == 24:\n        return max(lst)\n    if len(lst) == 25:\n        return max(lst)\n    if len(lst) == 26:\n        return max(lst)\n    if len(lst) == 27:\n        return max(lst)\n    if len(lst) == 28:\n        return max(lst)\n    if len(lst) == 29:\n        return max(lst)\n    if len(lst) == 30:\n        return max(lst)\n    if len(lst) == 31:\n        return max(lst)\n    if len(lst) == 32:\n        return max(lst)\n    if len(lst) == 33:\n        return max(lst)\n    if len(lst) == 34:\n        return max(lst)\n    if len(lst) == 35:\n        return max(lst)\n    if len(lst) == 36:\n        return max(lst)\n    if len(lst) == 37:\n        return max(lst)\n    if len(lst) == 38:"}
{"task_id": "Python/95", "prompt": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n", "generation": "    if len(dict) == 0:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n    return True\n\n\ndef check_dict_case_2(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict) == 0:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n    return True\n\n\ndef check_dict_case_3(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict) == 0:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n    return True\n\n\ndef check_dict_case_4(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict) == 0:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n    return True\n\n\ndef check_dict_case_5(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False"}
{"task_id": "Python/96", "prompt": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n", "generation": "    if n == 0:\n        return []\n    elif n == 1:\n        return [2]\n    elif n == 2:\n        return [2, 3]\n    elif n == 3:\n        return [2, 3, 5]\n    elif n == 4:\n        return [2, 3, 5, 7]\n    elif n == 5:\n        return [2, 3, 5, 7, 11]\n    elif n == 6:\n        return [2, 3, 5, 7, 11, 13]\n    elif n == 7:\n        return [2, 3, 5, 7, 11, 13, 17]\n    elif n == 8:\n        return [2, 3, 5, 7, 11, 13, 17, 19]\n    else:\n        return [2, 3, 5, 7, 11, 13, 17, 19]\n\n\ndef count_up_to_2(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [2]\n    elif n == 2:\n        return [2, 3]\n    elif n == 3:\n        return [2, 3, 5]\n    elif n == 4:\n        return [2, 3, 5, 7]\n    elif n == 5:\n        return [2, 3, 5, 7, 11]\n    elif n == 6:\n        return [2, 3, 5, 7, 11, 13]\n    elif n == 7:\n        return [2, 3, 5, 7, 11, 13, 17]\n    elif n == 8:\n        return [2, 3, 5, 7, 11, 13, 17, 19]\n    else:\n        return [2, 3, 5, 7, 11, 13, 17, 19]\n\n\ndef count_up_to_3(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [2]\n    elif n == 2:\n        return [2, 3]\n    elif n == 3:\n        return [2, 3, 5]\n    elif n == 4:\n        return [2, 3, 5, 7]\n    elif n == 5:\n        return [2, 3, 5, 7, 11]\n    elif n == 6:\n        "}
{"task_id": "Python/97", "prompt": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n", "generation": "    return sum([a % 10, b % 10])\n\n\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return sum([a % 10, b % 10])\n\n\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return sum([a % 10, b % 10])\n\n\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return sum([a % 10, b % 10])\n\n\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return sum([a % 10, b % 10])\n\n\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return sum([a % 10, b % 10])\n\n\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return sum([a % 10, b % 10])\n\n\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return sum([a % 10, b % 10])\n\n\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,"}
{"task_id": "Python/98", "prompt": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n", "generation": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and i % 2 == 0:\n            count += 1\n    return count\n\n\ndef count_lower(s):\n    \"\"\"\n    Given a string s, count the number of lowercase vowels in even indices.\n    \n    For example:\n    count_lower('aBCdEf') returns 1\n    count_lower('abcdefg') returns 0\n    count_lower('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i].islower() and i % 2 == 0:\n            count += 1\n    return count\n\n\ndef count_vowels(s):\n    \"\"\"\n    Given a string s, count the number of vowels in even indices.\n    \n    For example:\n    count_vowels('aBCdEf') returns 1\n    count_vowels('abcdefg') returns 0\n    count_vowels('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i].isalpha() and i % 2 == 0:\n            count += 1\n    return count\n\n\ndef count_vowels_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_vowels_upper('aBCdEf') returns 1\n    count_vowels_upper('abcdefg') returns 0\n    count_vowels_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and i % 2 == 0:\n            count += 1\n    return count\n\n\ndef count_vowels_lower(s):\n    \"\"\"\n    Given a string s, count the number of lowercase vowels in even indices.\n    \n    For example:\n    count_vowels_lower('aBCdEf') returns 1\n    count_vowels_lower('abcdefg') returns 0\n    count_vowels_lower('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i].islower() and i % 2 == 0:\n            count += 1\n    return count\n\n\ndef count_vowels_vowel(s):\n    \"\"\"\n    Given a string s, count the number of vowels in even indices.\n    \n    For example:\n    count_vowels_vowel('aBCdEf') returns 1\n    count_vowels_vowel('abcdefg') returns 0\n    count_vowels_vowel('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i].isalpha() and i % 2 == 0:\n            if s[i].lower() in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                count += 1\n    return count\n\n\ndef count_vowels_vowel_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_vowels_vowel_upper('aBCdEf') returns 1\n    count_vowels_vowel_upper('abcdefg') returns 0\n    count_vowels_vowel_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and i % 2 == 0:\n            if s[i].lower() in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                count += 1\n    return count\n\n\ndef count_vowels_vowel_lower(s):\n    \"\"\"\n    "}
{"task_id": "Python/99", "prompt": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n", "generation": "    return int(round(float(value))))\n\n\ndef closest_float(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest float to it. If the number is equidistant\n    from two floats, round it away from zero.\n\n    Examples\n    >>> closest_float(\"10\")\n    10.0\n    >>> closest_float(\"15.3\")\n    15.3\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two floats, the one you should return is the one that is the\n    farthest from zero. For example closest_float(\"14.5\") should\n    return 15.0 and closest_float(\"-14.5\") should return -15.0.\n    '''\n    return round(float(value))\n\n\ndef closest_float_to_zero(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest float to zero. If the number is equidistant\n    from two floats, round it away from zero.\n\n    Examples\n    >>> closest_float_to_zero(\"10\")\n    10.0\n    >>> closest_float_to_zero(\"15.3\")\n    15.0\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two floats, the one you should return is the one that is the\n    farthest from zero. For example closest_float_to_zero(\"14.5\") should\n    return 15.0 and closest_float_to_zero(\"-14.5\") should return -15.0.\n    '''\n    return round(float(value))\n\n\ndef closest_float_to_one(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest float to one. If the number is equidistant\n    from two floats, round it away from zero.\n\n    Examples\n    >>> closest_float_to_one(\"10\")\n    10.0\n    >>> closest_float_to_one(\"15.3\")\n    15.0\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two floats, the one you should return is the one that is the\n    farthest from zero. For example closest_float_to_one(\"14.5\") should\n    return 15.0 and closest_float_to_one(\"-14.5\") should return -15.0.\n    '''\n    return round(float(value))\n\n\ndef closest_float_to_two(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest float to two. If the number is equidistant\n    from two floats, round it away from zero.\n\n    Examples\n    >>> closest_float_to_two(\"10\")\n    10.0\n    >>> closest_float_to_two(\"15.3\")\n    15.0\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two floats, the one you should return is the one that is the\n    farthest from zero. For example closest_float_to_two(\"14.5\") should\n    return 15.0 and closest_float_to_two(\"-14.5\") should return -15.0.\n    '''\n    return round(float(value))\n\n\ndef closest_float_to_three(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest float to three. If the number is equidistant\n    from two floats, round"}
{"task_id": "Python/100", "prompt": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n", "generation": "    if n % 2 == 0:\n        return [n] * (n // 2)\n    else:\n        return [n] * (n // 2 + 1)\n\n\ndef make_a_pile_2(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile_2(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [n] * (n // 2)\n    else:\n        return [n] * (n // 2 + 1)\n\n\ndef make_a_pile_3(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile_3(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [n] * (n // 2)\n    else:\n        return [n] * (n // 2 + 1)\n\n\ndef make_a_pile_4(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile_4(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [n] * (n // 2)\n    else:\n        return [n] * (n // 2 + 1)\n\n\ndef make_a_pile_5(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile_5(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [n] * (n // 2)\n    else:\n        return [n] * (n // 2 + 1)\n\n\ndef make_a_pile_6(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents"}
{"task_id": "Python/101", "prompt": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n", "generation": "    return s.split()\n\n\ndef words_string_to_array(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n\n\ndef words_string_to_array_with_spaces(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my name is John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split(\" \")\n\n\ndef words_string_to_array_with_commas(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my name is John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split(\",\")\n\n\ndef words_string_to_array_with_spaces_and_commas(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my name is John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split(\" \") + s.split(\",\")\n\n\ndef words_string_to_array_with_spaces_and_commas_and_spaces(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my name is John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split(\" \") + s.split(\",\") + s.split(\" \")\n\n\ndef words_string_to_array_with_spaces_and_commas_and_spaces_and_commas(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my name is John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split(\" \") + s.split(\",\") + s.split(\" \") + s.split(\",\")\n\n\ndef words_string_"}
{"task_id": "Python/102", "prompt": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n", "generation": "    if x <= y:\n        return x\n    else:\n        return y\n\n\ndef choose_num_inclusive(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num_inclusive(12, 15) = 14\n    choose_num_inclusive(13, 12) = -1\n    \"\"\"\n    if x <= y:\n        return x\n    else:\n        return y\n\n\ndef choose_num_inclusive_2(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num_inclusive_2(12, 15) = 14\n    choose_num_inclusive_2(13, 12) = -1\n    \"\"\"\n    if x <= y:\n        return x\n    else:\n        return y\n\n\ndef choose_num_inclusive_3(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num_inclusive_3(12, 15) = 14\n    choose_num_inclusive_3(13, 12) = -1\n    \"\"\"\n    if x <= y:\n        return x\n    else:\n        return y\n\n\ndef choose_num_inclusive_4(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num_inclusive_4(12, 15) = 14\n    choose_num_inclusive_4(13, 12) = -1\n    \"\"\"\n    if x <= y:\n        return x\n    else:\n        return y\n\n\ndef choose_num_inclusive_5(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num_inclusive_5(12, 15) = 14\n    choose_num_inclusive_5(13, 12) = -1\n    \"\"\"\n    if x <= y:\n        return x\n    else:\n        return y\n\n\ndef choose_num_inclusive_6(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num_inclusive_6(12, 15) = 14\n    choose_num_inclusive_6(13, 12) = -1\n    \"\"\"\n    if x <= y:\n        return x\n    else:\n        return y\n\n\ndef choose_num_inclusive_7(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num_inclusive_7(12, 15) = 14\n    choose_num_inclusive_7(13, 12) = -1\n    \"\"\"\n    if x <= y:\n        "}
{"task_id": "Python/103", "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n", "generation": "    if n > m:\n        return -1\n    binary_n = bin(n)[2:]\n    binary_m = bin(m)[2:]\n    binary_sum = binary_n + binary_m\n    binary_sum = binary_sum.zfill(len(binary_n) + len(binary_m))\n    return binary_sum\n\n\ndef get_binary_from_int(n):\n    \"\"\"You are given a positive integer n, and your task is to convert it to binary.\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than 2**31 - 1, return -1.\n    Example:\n    get_binary_from_int(1) => \"0b1\"\n    get_binary_from_int(7) => -1\n    get_binary_from_int(10) => \"0b1010\"\n    get_binary_from_int(20) => \"0b10100\"\n    get_binary_from_int(33) => \"0b11010\"\n    \"\"\"\n    if n > 2 ** 31 - 1:\n        return -1\n    binary_n = bin(n)[2:]\n    binary_n = binary_n.zfill(len(binary_n))\n    return binary_n\n\n\ndef get_binary_from_int_with_padding(n):\n    \"\"\"You are given a positive integer n, and your task is to convert it to binary.\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than 2**31 - 1, return -1.\n    Example:\n    get_binary_from_int(1) => \"0b1\"\n    get_binary_from_int(7) => \"0b11\"\n    get_binary_from_int(10) => \"0b1010\"\n    get_binary_from_int(20) => \"0b10100\"\n    get_binary_from_int(33) => \"0b11010\"\n    \"\"\"\n    if n > 2 ** 31 - 1:\n        return -1\n    binary_n = bin(n)[2:]\n    binary_n = binary_n.zfill(len(binary_n) + 4)\n    return binary_n\n\n\ndef get_binary_from_int_with_padding_2(n):\n    \"\"\"You are given a positive integer n, and your task is to convert it to binary.\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than 2**31 - 1, return -1.\n    Example:\n    get_binary_from_int(1) => \"0b1\"\n    get_binary_from_int(7) => \"0b11\"\n    get_binary_from_int(10) => \"0b1010\"\n    get_binary_from_int(20) => \"0b10100\"\n    get_binary_from_int(33) => \"0b11010\"\n    \"\"\"\n    if n > 2 ** 31 - 1:\n        return -1\n    binary_n = bin(n)[2:]\n    binary_n = binary_n.zfill(len(binary_n) + 8)\n    return binary_n\n\n\ndef get_binary_from_int_with_padding_3(n):\n    \"\"\"You are given a positive integer n, and your task is to convert it to binary.\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than 2**31 - 1, return -1.\n    Example:\n    get_binary_from_int(1) => \"0b1\"\n    get_binary_from_int(7) => \"0b11\"\n    get_binary_from_int(10)"}
{"task_id": "Python/104", "prompt": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n", "generation": "    unique_digits = []\n    for i in x:\n        if i not in unique_digits:\n            unique_digits.append(i)\n    return sorted(unique_digits)\n\n\ndef get_unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> get_unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> get_unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique_digits = []\n    for i in x:\n        if i not in unique_digits:\n            unique_digits.append(i)\n    return sorted(unique_digits)\n\n\ndef get_unique_digits_2(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> get_unique_digits_2([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> get_unique_digits_2([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique_digits = []\n    for i in x:\n        if i not in unique_digits:\n            unique_digits.append(i)\n    return sorted(unique_digits)\n\n\ndef get_unique_digits_3(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> get_unique_digits_3([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> get_unique_digits_3([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique_digits = []\n    for i in x:\n        if i not in unique_digits:\n            unique_digits.append(i)\n    return sorted(unique_digits)\n\n\ndef get_unique_digits_4(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> get_unique_digits_4([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> get_unique_digits_4([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique_digits = []\n    for i in x:\n        if i not in unique_digits:\n            unique_digits.append(i)\n    return sorted(unique_digits)\n\n\ndef get_unique_digits_5(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> get_unique_digits_5([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> get_unique_digits_5([152, 323, 1422, 10])\n    []\n    \"\"\"\n    unique_digits = []\n    for i in x:\n        if i not in unique_digits:\n            unique_digits.append(i)\n    return sorted(unique_digits)\n\n\ndef get_unique_digits_6(x):\n    \"\"\"Given a list of positive integers x. return a sorted list"}
{"task_id": "Python/105", "prompt": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n", "generation": "    arr = sorted(arr)\n    arr = arr[::-1]\n    arr = [str(i) for i in arr]\n    return arr\n\n\ndef get_tokens(arr):\n    \"\"\"\n    Given an array of integers, return an array of the tokens in the array.\n    \n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    arr = sorted(arr)\n    arr = arr[::-1]\n    arr = [str(i) for i in arr]\n    return arr\n\n\ndef get_tokens_and_ids(arr):\n    \"\"\"\n    Given an array of integers, return an array of the tokens in the array,\n    and an array of the corresponding IDs of the tokens.\n    \n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n      return = [1, 2, 3, 4, 5, 6, 7, 8]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1, 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    arr = sorted(arr)\n    arr = arr[::-1]\n    arr = [str(i) for i in arr]\n    arr = [int(i) for i in arr]\n    return arr\n\n\ndef get_tokens_and_ids_with_special_tokens(arr):\n    \"\"\"\n    Given an array of integers, return an array of the tokens in the array,\n    and an array of the corresponding IDs of the tokens,\n    with special tokens added to the beginning and end of the array.\n    \n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr ->"}
{"task_id": "Python/106", "prompt": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n", "generation": "    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1))))\n    return result\n\n\ndef factorial(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1))))\n    return result\n\n\ndef factorial(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1))))\n    return result\n\n\ndef factorial(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1))))\n    return result\n\n\ndef factorial(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1))))\n    return result\n\n\ndef factorial(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1"}
{"task_id": "Python/107", "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n", "generation": "    even_palindromes = 0\n    odd_palindromes = 0\n\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_palindromes += 1\n        else:\n            odd_palindromes += 1\n\n    return (even_palindromes, odd_palindromes)\n\n\ndef _odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even_palindromes = 0\n    odd_palindromes = 0\n\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_palindromes += 1\n        else:\n            odd_palindromes += 1\n\n    return (even_palindromes, odd_palindromes)\n\n\ndef _odd_palindrome_2(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even_palindromes = 0\n    odd_palindromes = 0\n\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_palindromes += 1\n        else:\n            odd_palindromes += 1\n\n    return (even_palindromes, odd_palindromes)\n\n\ndef _odd_palindrome_3(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3"}
{"task_id": "Python/108", "prompt": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n", "generation": "    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count\n\n\ndef count_nums_2(arr):\n    \"\"\"\n    Write a function count_nums_2 which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums_2([]) == 0\n    >>> count_nums_2([-1, 11, -11]) == 1\n    >>> count_nums_2([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count\n\n\ndef count_nums_3(arr):\n    \"\"\"\n    Write a function count_nums_3 which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums_3([]) == 0\n    >>> count_nums_3([-1, 11, -11]) == 1\n    >>> count_nums_3([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count\n\n\ndef count_nums_4(arr):\n    \"\"\"\n    Write a function count_nums_4 which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums_4([]) == 0\n    >>> count_nums_4([-1, 11, -11]) == 1\n    >>> count_nums_4([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count\n\n\ndef count_nums_5(arr):\n    \"\"\"\n    Write a function count_nums_5 which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums_5([]) == 0\n    >>> count_nums_5([-1, 11, -11]) == 1\n    >>> count_nums_5([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count\n\n\ndef count_nums_6(arr):\n    \"\"\"\n    Write a function count_nums_6 which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums_6([]) == 0\n    >>> count_nums_6([-1, 11, -11]) == 1\n    >>> count_nums_6([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count\n\n\ndef count_nums_7(arr):\n    \"\"\"\n    Write a function count_nums_7 which"}
{"task_id": "Python/109", "prompt": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n", "generation": "    if len(arr) == 0:\n        return True\n    else:\n        for i in range(len(arr) - 1):\n            if arr[i] > arr[i + 1]:\n                return False\n        return True\n\n\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if len(arr) == 0:\n        return True\n    else:\n        for i in range(len(arr) - 1):\n            if arr[i] > arr[i + 1]:\n                return False\n        return True\n\n\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array"}
{"task_id": "Python/110", "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n", "generation": "    # Your code here\n    if lst1 == lst2:\n        return \"YES\"\n    elif lst1 == []:\n        return \"NO\"\n    elif lst2 == []:\n        return \"NO\"\n    elif lst1[0] == lst2[0]:\n        return \"YES\"\n    elif lst1[0] == lst2[-1]:\n        return \"YES\"\n    elif lst1[-1] == lst2[0]:\n        return \"YES\"\n    elif lst1[-1] == lst2[-1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\n###############################################################################################################################\n\n# Problem 4: Paying Debt off in a Year\n\n\ndef debt_to_nothing(debt):\n    \"\"\"\n    You are given a list of non-negative integers representing debt payments\n    over a period of time. Each integer represents a dollar amount of money you\n    pay off each day. You must pay at least one debt per period and you must\n    restore your balance at the end of the period each day.\n\n    Write a function to compute the total amount of money you need to pay\n    off your debt in a year.\n\n    You can assume that the initial balance is equal to the debt.\n\n    For example, given [1, 1, 1, 0, 0, 0], you need to pay off at least one\n    debt each year to clear all debt.\n\n    :param debt: list of non-negative integers\n    :return: integer\n    \"\"\"\n    # Your code here\n    if debt == []:\n        return 0\n    else:\n        debt_sum = 0\n        for i in range(len(debt)):\n            debt_sum += debt[i]\n        return debt_sum\n\n\ndef debt_to_nothing_dp(debt):\n    \"\"\"\n    You are given a list of non-negative integers representing debt payments\n    over a period of time. Each integer represents a dollar amount of money you\n    pay off each day. You must pay at least one debt per period and you must\n    restore your balance at the end of the period each day.\n\n    Write a function to compute the total amount of money you need to pay\n    off your debt in a year.\n\n    You can assume that the initial balance is equal to the debt.\n\n    For example, given [1, 1, 1, 0, 0, 0], you need to pay off at least one\n    debt each year to clear all debt.\n\n    :param debt: list of non-negative integers\n    :return: integer\n    \"\"\"\n    # Your code here\n    if debt == []:\n        return 0\n    else:\n        dp = [0] * len(debt)\n        dp[0] = debt[0]\n        for i in range(1, len(debt)):\n            dp[i] = dp[i - 1] + debt[i]\n        return dp[-1]\n\n\n###############################################################################################################################\n\n# Problem 5: Longest Increasing Subsequence\n\n\ndef longest_increasing_subsequence(seq):\n    \"\"\"\n    Given a sequence of integers, find the length of the longest\n    subsequence of increasing numbers.\n\n    For example:\n\n    Given [1, 3, 5, 7, 9, 2, 4, 6, 8], the longest increasing subsequence is [1, 2, 4, 6, 8].\n\n    Given [1, 2, 3, 4, 5], the longest increasing subsequence is [1, 2, 3,"}
{"task_id": "Python/111", "prompt": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n", "generation": "    histogram = {}\n    for letter in test:\n        if letter in histogram:\n            histogram[letter] += 1\n        else:\n            histogram[letter] = 1\n    return histogram\n\n\ndef histogram_vowels(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram_vowels('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram_vowels('a b b b a') == {'a': 2, 'b': 2}\n    histogram_vowels('a b c a b') == {'a': 2, 'b': 2}\n    histogram_vowels('b b b b b a') == {'b': 4}\n    histogram_vowels('') == {}\n\n    \"\"\"\n    histogram = {}\n    for letter in test:\n        if letter in histogram:\n            histogram[letter] += 1\n        else:\n            histogram[letter] = 1\n    return histogram\n\n\ndef histogram_consonants(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram_consonants('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram_consonants('a b b b b a') == {'a': 2, 'b': 2}\n    histogram_consonants('a b c a b') == {'a': 2, 'b': 2}\n    histogram_consonants('b b b b b a') == {'b': 4}\n    histogram_consonants('') == {}\n\n    \"\"\"\n    histogram = {}\n    for letter in test:\n        if letter in histogram:\n            histogram[letter] += 1\n        else:\n            histogram[letter] = 1\n    return histogram\n\n\ndef histogram_vowels_and_consonants(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram_vowels_and_consonants('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram_vowels_and_consonants('a b b b b a') == {'a': 2, 'b': 2}\n    histogram_vowels_and_consonants('a b c a b') == {'a': 2, 'b': 2}\n    histogram_vowels_and_consonants('b b b b b b a') == {'b': 4}\n    histogram_vowels_and_consonants('') == {}\n\n    \"\"\"\n    histogram = {}\n    for letter in test:\n        if letter in histogram:\n            histogram[letter] += 1\n        else:\n            histogram[letter] = 1\n    return histogram\n\n\ndef histogram_vowels_and_consonants_with_spaces(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters"}
{"task_id": "Python/112", "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n", "generation": "    result = \"\"\n    for i in range(len(s)):\n        if s[i] == c[0]:\n            result += s[i]\n            c = c[1:]\n        else:\n            result += s[i]\n    if c == \"\":\n        return result, True\n    else:\n        return result, False\n\n\ndef _delete_duplicates(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    for i in range(len(s)):\n        if s[i] == c[0]:\n            result += s[i]\n            c = c[1:]\n        else:\n            result += s[i]\n    if c == \"\":\n        return result, True\n    else:\n        return result, False\n\n\ndef _delete_duplicates_2(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    for i in range(len(s)):\n        if s[i] == c[0]:\n            result += s[i]\n            c = c[1:]\n        else:\n            result += s[i]\n    if c == \"\":\n        return result, True\n    else:\n        return result, False\n\n\ndef _delete_duplicates_3(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = \"\"\n    for i in range(len(s)):\n        if s[i] == c[0]:\n            result += s[i]\n            c = c[1:]\n        else:\n            result += s[i]\n    if"}
{"task_id": "Python/113", "prompt": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n", "generation": "    odds = []\n    for s in lst:\n        odds.append(str(odd_count(s))))\n    return odds\n\n\ndef odd_count(s):\n    \"\"\"Given a string, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count('1234567')\n    4\n    >>> odd_count('3')\n    1\n    \"\"\"\n    odds = 0\n    for c in s:\n        if c.isdigit():\n            odds += 1\n    return odds\n\n\ndef count_unique(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of unique elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of unique digits in the i'th string of the input.\n\n    >>> count_unique(['1234567'])\n    4\n    >>> count_unique(['3',\"11111111\"])\n    2\n    \"\"\"\n    count = 0\n    for s in lst:\n        count += count_unique(s)\n    return count\n\n\ndef count_unique(s):\n    \"\"\"Given a string, return a list.\n    Each element i of the output should be \"the number of unique elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of unique digits in the i'th string of the input.\n\n    >>> count_unique('1234567')\n    4\n    >>> count_unique('3')\n    2\n    \"\"\"\n    count = 0\n    for c in s:\n        if c.isdigit():\n            count += 1\n    return count\n\n\ndef char_histogram(s):\n    \"\"\"Given a string, return a dictionary.\n    The keys of the dictionary are the characters in the string, and the values are\n    the number of times that character appears in the string.\n\n    >>> char_histogram('abcde')\n    {'a': 5, 'b': 4, 'c': 3, 'd': 2, 'e': 1}\n    \"\"\"\n    hist = {}\n    for c in s:\n        if c in hist:\n            hist[c] += 1\n        else:\n            hist[c] = 1\n    return hist\n\n\ndef reverse_words(s):\n    \"\"\"Given a string, return a list.\n    The words in the list should be reversed.\n\n    >>> reverse_words('the sky is blue')\n    ['blue is sky the']\n    >>> reverse_words('  hello world!  ')\n    ['world! hello']\n    >>> reverse_words('a good   example')\n    ['example good a']\n    \"\"\"\n    words = []\n    for word in s.split():\n        words.append(word[::-1])\n    return words\n\n\ndef reverse_words(s):\n    \"\"\"Given a string, return a list.\n    The words in the list should be reversed.\n\n    >>> reverse_words('the sky is blue')\n    ['blue is sky the']\n    >>> reverse_words('  hello world!  ')\n    ['world! hello']\n    >>> reverse_words('a good   example')\n    ['example good a']\n    \"\"\"\n    words = []\n    for word in s.split():\n        words.append(word[::-1])\n    return words\n\n\ndef average(lst):\n    \"\"\"Given a list of numbers,"}
{"task_id": "Python/114", "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n", "generation": "    min_sum = float(\"inf\")\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if nums[i:j]!= []:\n                min_sum = min(min_sum, sum(nums[i:j]))\n    return min_sum\n\n\ndef minSubArraySum2(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float(\"inf\")\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            min_sum = min(min_sum, nums[i] + minSubArraySum2(nums[i + 1 :]))\n    return min_sum\n\n\ndef minSubArraySum3(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float(\"inf\")\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            min_sum = min(min_sum, nums[i] + minSubArraySum3(nums[i + 1 :]))\n    return min_sum\n\n\ndef minSubArraySum4(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float(\"inf\")\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            min_sum = min(min_sum, nums[i] + minSubArraySum4(nums[i + 1 :]))\n    return min_sum\n\n\ndef minSubArraySum5(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float(\"inf\")\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            min_sum = min(min_sum, nums[i] + minSubArraySum5(nums[i + 1 :]))\n    return min_sum\n\n\ndef minSubArraySum6(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float(\"inf\")\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            min_sum = min(min_sum, nums[i] + minSubArraySum6(nums[i + 1 :]))\n    return min_sum\n\n\ndef minSubArraySum7(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of num"}
{"task_id": "Python/115", "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n", "generation": "    # your code here\n    # print(grid)\n    # print(bucket_capacity)\n    # print(len(grid))\n    # print(len(grid[0]))\n    # print(grid[0][0])\n    # print(grid[0][1])\n    # print(grid[0][2])\n    # print(grid[0][3])\n    # print(grid[0][4])\n    # print(grid[0][5])\n    # print(grid[0][6])\n    # print(grid[0][7])\n    # print(grid[0][8])\n    # print(grid[0][9])\n    # print(grid[0][10])\n    # print(grid[0][11])\n    # print(grid[0][12])\n    # print(grid[0][13])\n    # print(grid[0][14])\n    # print(grid[0][15])\n    # print(grid[0][16])\n    # print(grid[0][17])\n    # print(grid[0][18])\n    # print(grid[0][19])\n    # print(grid[0][20])\n    # print(grid[0][21])\n    # print(grid[0][22])\n    # print(grid[0][23])\n    # print(grid[0][24])\n    # print(grid[0][25])\n    # print(grid[0][26])\n    # print(grid[0][27])\n    # print(grid[0][28])\n    # print(grid[0][29])\n    # print(grid[0][30])\n    # print(grid[0][31])\n    # print(grid[0][32])\n    # print(grid[0][33])\n    # print(grid[0][34])\n    # print(grid[0][35])\n    # print(grid[0][36])\n    # print(grid[0][37])\n    # print(grid[0][38])\n    # print(grid[0][39])\n    # print(grid[0][40])\n    # print(grid[0][41])\n    # print(grid[0][42])\n    # print(grid[0][43])\n    # print(grid[0][44])\n    # print(grid[0][45])\n    # print(grid[0][46])\n    # print(grid[0][47])\n    # print(grid[0][48])\n    # print(grid[0][49])\n    # print(grid[0][50])\n    # print(grid[0][51])\n    # print(grid[0][52])\n    # print(grid[0][53])\n    # print(grid[0][54])\n    # print(grid[0][55])\n    # print(grid[0][56])\n    # print(grid[0][57])\n    #"}
{"task_id": "Python/116", "prompt": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n", "generation": "    # TODO: implement this function\n    pass\n\n\ndef sort_array_by_number_of_zeroes(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of zeroes in their binary representation in ascending order.\n    For similar number of zeroes, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array_by_number_of_zeroes([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array_by_number_of_zeroes([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array_by_number_of_zeroes([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # TODO: implement this function\n    pass\n\n\ndef sort_array_by_number_of_ones(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array_by_number_of_ones([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array_by_number_of_ones([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array_by_number_of_ones([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # TODO: implement this function\n    pass\n\n\ndef sort_array_by_number_of_zeroes_and_ones(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of zeroes and ones in their binary representation in ascending order.\n    For similar number of zeroes and ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array_by_number_of_zeroes_and_ones([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array_by_number_of_zeroes_and_ones([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array_by_number_of_zeroes_and_ones([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # TODO: implement this function\n    pass\n\n\ndef sort_array_by_number_of_zeroes_and_ones_in_descending_order(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of zeroes and ones in their binary representation in descending order.\n    For similar number of zeroes and ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array_by_number_of_zeroes_and_ones_in_descending_order([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n    >>> sort_array_by_number_of_zeroes_and_ones_in_descending_order([-2, -3, -4,"}
{"task_id": "Python/117", "prompt": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n", "generation": "    words = []\n    for i in range(len(s)):\n        if s[i] in consonants:\n            if i + n <= len(s):\n                words.append(s[i : i + n])\n    return words\n\n\ndef select_words_with_vowels(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n vowels, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words_with_vowels(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words_with_vowels(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words_with_vowels(\"simple white space\", 2) ==> []\n    select_words_with_vowels(\"Hello world\", 4) ==> [\"world\"]\n    select_words_with_vowels(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] in vowels:\n            if i + n <= len(s):\n                words.append(s[i : i + n])\n    return words\n\n\ndef select_words_with_consonants_and_vowels(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants and n vowels, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words_with_consonants_and_vowels(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words_with_consonants_and_vowels(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words_with_consonants_and_vowels(\"simple white space\", 2) ==> []\n    select_words_with_consonants_and_vowels(\"Hello world\", 4) ==> [\"world\"]\n    select_words_with_consonants_and_vowels(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] in consonants and s[i] in vowels:\n            if i + n <= len(s):\n                words.append(s[i : i + n])\n    return words\n\n\ndef select_words_with_consonants_and_vowels_and_special_characters(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, n vowels, and special characters, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words_with_consonants"}
{"task_id": "Python/118", "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n", "generation": "    vowels = \"aeiou\"\n    closest_vowel = \"\"\n    for vowel in vowels:\n        if vowel in word:\n            if word.index(vowel) < word.index(word[-1]):\n                closest_vowel = vowel\n            else:\n                closest_vowel = word[-1]\n    return closest_vowel\n\n\ndef get_closest_vowel_2(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = \"aeiou\"\n    closest_vowel = \"\"\n    for vowel in vowels:\n        if vowel in word:\n            if word.index(vowel) < word.index(word[-1]):\n                closest_vowel = vowel\n            else:\n                closest_vowel = word[-1]\n    return closest_vowel\n\n\ndef get_closest_vowel_3(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = \"aeiou\"\n    closest_vowel = \"\"\n    for vowel in vowels:\n        if vowel in word:\n            if word.index(vowel) < word.index(word[-1]):\n                closest_vowel = vowel\n            else:\n                closest_vowel = word[-1]\n    return closest_vowel\n\n\ndef get_closest_vowel_4(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_"}
{"task_id": "Python/119", "prompt": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n", "generation": "    # Your code here\n    if len(lst) == 0:\n        return 'Yes'\n    if len(lst) == 1:\n        if lst[0] == '(' or lst[0] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    if lst[0] == '(' and lst[-1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[-1] == '(':\n        return 'Yes'\n    if lst[0] == ')' and lst[-1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[-1] == ')':\n        return 'No'\n    if lst[0] == ')' and lst[-1] == '(':\n        return 'No'\n    if lst[0] == ')' and lst[-1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[-1] == '(':\n        return 'No'\n    if lst[0] == ')' and lst[-1] == ')':\n        return 'No'\n    if lst[0] == ')' and lst[-1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[-1] == ')':\n        return 'No'\n    if lst[0] == ')' and lst[-1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[-1] == '(':\n        return 'No'\n    if lst[0] == ')' and lst[-1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[-1] == '(':\n        return 'No'\n    if lst[0] == ')' and lst[-1] == ')':\n        return 'No'\n    if lst[0] == ')' and lst[-1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[-1] == ')':\n        return 'No'\n    if lst[0] == ')' and lst[-1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[-1] == '(':\n        return 'No'\n    if lst[0] == ')' and lst[-1] == ')':\n        return 'No'\n    if lst[0] == ')' and lst[-1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[-1] == '(':\n        return 'No'\n    if lst[0] == ')' and lst[-1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[-1] == ')':\n        return 'No'\n    if lst[0] == ')' and lst[-1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[-1] == '(':\n        return 'No'\n    if lst[0] == ')' and lst[-1] == ')':\n        return 'No'\n    if lst[0]"}
{"task_id": "Python/120", "prompt": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n", "generation": "    # O(n)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)\n    # O(k)"}
{"task_id": "Python/121", "prompt": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n", "generation": "    return sum(lst[i::2] for i in range(2, len(lst), 2)))\n\n\ndef solution_2(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(lst[i::2] for i in range(2, len(lst), 2))\n\n\ndef solution_3(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(lst[i::2] for i in range(2, len(lst), 2))\n\n\ndef solution_4(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(lst[i::2] for i in range(2, len(lst), 2))\n\n\ndef solution_5(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(lst[i::2] for i in range(2, len(lst), 2))\n\n\ndef solution_6(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(lst[i::2] for i in range(2, len(lst), 2))\n\n\ndef solution_7(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(lst[i::2] for i in range(2, len(lst), 2))\n\n\ndef solution_8(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(lst[i::2] for i in range(2, len(lst), 2))\n\n\ndef solution_9(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n"}
{"task_id": "Python/122", "prompt": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n", "generation": "    return sum(arr[:k]) - sum(arr[k:])\n\n\ndef get_sum_of_elements_with_at_most_three_digits(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most three digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(arr[:k]) - sum(arr[k:])\n\n\ndef get_sum_of_elements_with_at_most_four_digits(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most four digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(arr[:k]) - sum(arr[k:])\n\n\ndef get_sum_of_elements_with_at_most_five_digits(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most five digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(arr[:k]) - sum(arr[k:])\n\n\ndef get_sum_of_elements_with_at_most_six_digits(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most six digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(arr[:k]) - sum(arr[k:])\n\n\ndef get_sum_of_elements_with_at_most_seven_digits(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most seven digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(arr[:k]) - sum(arr[k:])\n\n\ndef get_sum_of_elements_with_at_most_eight_digits(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most eight digits from the first k elements of arr.\n\n    Example:\n\n        Input"}
{"task_id": "Python/123", "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n", "generation": "    odd_collatz_list = []\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = (3 * n) + 1\n        odd_collatz_list.append(n)\n    odd_collatz_list.sort()\n    return odd_collatz_list\n\n\ndef get_odd_collatz_list(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz_list(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    odd_collatz_list = []\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = (3 * n) + 1\n        odd_collatz_list.append(n)\n    odd_collatz_list.sort()\n    return odd_collatz_list\n\n\ndef get_odd_collatz_list_with_limit(n, limit):\n    \"\"\"\n    Given a positive integer n and a limit, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz_list_with_limit(5, 10) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    odd_collatz_list = []\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = (3 * n) + 1\n        odd_collatz_list.append(n)\n    odd_collatz_list.sort()\n    return odd_collatz_list[:limit]\n\n\ndef get_odd_collatz_list_with_limit_collatz(n, limit):\n    \"\"\"\n    Given a positive integer n and a limit, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n"}
{"task_id": "Python/124", "prompt": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n", "generation": "    if date == \"\":\n        return False\n    else:\n        date = date.split(\"-\")\n        if len(date)!= 3:\n            return False\n        else:\n            if int(date[2]) > 31:\n                return False\n            elif int(date[2]) < 1:\n                return False\n            elif int(date[1]) > 12:\n                return False\n            elif int(date[0]) < 1:\n                return False\n            elif int(date[0]) > 31:\n                return False\n            elif int(date[0]) < 1:\n                return False\n            elif int(date[1]) < 1:\n                return False\n            elif int(date[1]) > 12:\n                return False\n            else:\n                return True\n\n\ndef get_date_from_string(date_string):\n    \"\"\"You have to write a function which returns a date object from a given date string.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    get_date_from_string('03-11-2000') => datetime.date(2000, 3, 11)\n\n    get_date_from_string('15-01-2012') => datetime.date(2012, 1, 15)\n\n    get_date_from_string('04-0-2040') => datetime.date(2040, 4, 4)\n\n    get_date_from_string('06-04-2020') => datetime.date(2020, 6, 6)\n\n    get_date_from_string('06/04/2020') => datetime.date(2020, 6, 6)\n    \"\"\"\n    if date_string == \"\":\n        return None\n    else:\n        date_string = date_string.split(\"-\")\n        if len(date_string)!= 3:\n            return None\n        else:\n            if int(date_string[2]) > 31:\n                return None\n            elif int(date_string[2]) < 1:\n                return None\n            elif int(date_string[1]) > 12:\n                return None\n            elif int(date_string[0]) < 1:\n                return None\n            elif int(date_string[0]) > 31:\n                return None\n            elif int(date_string[0]) < 1:\n                return None\n            elif int(date_string[1]) < 1:\n                return None\n            elif int(date_string[1]) > 12:\n                return None\n            else:\n                return datetime.date(int("}
{"task_id": "Python/125", "prompt": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n", "generation": "    txt = txt.lower()\n    txt = txt.replace(\" \", \"\")\n    txt = txt.replace(\",\", \"\")\n    txt = txt.replace(\".\", \"\")\n    txt = txt.replace(\"!\", \"\")\n    txt = txt.replace(\"?\", \"\")\n    txt = txt.replace(\"-\", \"\")\n    txt = txt.replace(\"'\", \"\")\n    txt = txt.replace('\"', \"\")\n    txt = txt.replace(\"(\", \"\")\n    txt = txt.replace(\")\", \"\")\n    txt = txt.replace(\"[\", \"\")\n    txt = txt.replace(\"]\", \"\")\n    txt = txt.replace(\"{\", \"\")\n    txt = txt.replace(\"}\", \"\")\n    txt = txt.replace(\"/\", \"\")\n    txt = txt.replace(\"\\\\\", \"\")\n    txt = txt.replace(\"*\", \"\")\n    txt = txt.replace(\"+\", \"\")\n    txt = txt.replace(\"=\", \"\")\n    txt = txt.replace(\"<\", \"\")\n    txt = txt.replace(\">\", \"\")\n    txt = txt.replace(\";\", \"\")\n    txt = txt.replace(\"'\", \"\")\n    txt = txt.replace(\"`\", \"\")\n    txt = txt.replace(\"~\", \"\")\n    txt = txt.replace(\"@\", \"\")\n    txt = txt.replace(\"#\", \"\")\n    txt = txt.replace(\"$\", \"\")\n    txt = txt.replace(\"%\", \"\")\n    txt = txt.replace(\"^\", \"\")\n    txt = txt.replace(\"&\", \"\")\n    txt = txt.replace(\"*\", \"\")\n    txt = txt.replace(\"(\", \"\")\n    txt = txt.replace(\")\", \"\")\n    txt = txt.replace(\"[\", \"\")\n    txt = txt.replace(\"]\", \"\")\n    txt = txt.replace(\"{\", \"\")\n    txt = txt.replace(\"}\", \"\")\n    txt = txt.replace(\"/\", \"\")\n    txt = txt.replace(\"\\\\\", \"\")\n    txt = txt.replace(\"*\", \"\")\n    txt = txt.replace(\"+\", \"\")\n    txt = txt.replace(\"=\", \"\")\n    txt = txt.replace(\"<\", \"\")\n    txt = txt.replace(\">\", \"\")\n    txt = txt.replace(\";\", \"\")\n    txt = txt.replace(\"'\", \"\")\n    txt = txt.replace(\"`\", \"\")\n    txt = txt.replace(\"~\", \"\")\n    txt = txt.replace(\"@\", \"\")\n    txt = txt.replace(\"#\", \"\")\n    txt = txt.replace(\"$\", \"\")\n    txt = txt.replace(\"%\", \"\")\n    txt = txt.replace(\"^\", \"\")\n    txt = txt.replace(\"&\", \"\")\n    txt = txt.replace(\"*\", \"\")\n    txt = txt.replace(\"(\", \"\")\n    txt = txt.replace(\")\", \"\")\n    txt = txt.replace(\"[\", \"\")\n    txt = txt.replace(\"]\", \"\")\n    txt = txt.replace(\"{\", \"\")\n    txt = txt.replace(\"}\", \"\")\n    txt = txt.replace(\"/\", \"\")\n    txt = txt.replace(\"\\\\\", \"\")\n    txt = txt.replace(\"*\", \"\")\n    txt = txt.replace(\"+\", \"\")\n    txt = txt."}
{"task_id": "Python/126", "prompt": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n", "generation": "    # your code here\n    return True\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))\nprint(is"}
{"task_id": "Python/127", "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n", "generation": "    # your code here\n    if interval1[0] <= interval2[1] and interval2[0] <= interval1[1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\n# print(intersection((1, 2), (2, 3))))\n# print(intersection((-1, 1), (0, 4))))\n# print(intersection((-3, -1), (-5, 5))))\n# print(intersection((1, 2), (2, 3)), intersection((-1, 1), (0, 4)), intersection((-3, -1), (-5, 5))))\n# print(intersection((1, 2), (2, 3)), intersection((-1, 1), (0, 4)), intersection((-3, -1), (-5, 5))))\n# print(intersection((1, 2), (2, 3)), intersection((-1, 1), (0, 4)), intersection((-3, -1), (-5, 5))))\n# print(intersection((1, 2), (2, 3)), intersection((-1, 1), (0, 4)), intersection((-3, -1), (-5, 5))))\n# print(intersection((1, 2), (2, 3)), intersection((-1, 1), (0, 4)), intersection((-3, -1), (-5, 5))))\n# print(intersection((1, 2), (2, 3)), intersection((-1, 1), (0, 4)), intersection((-3, -1), (-5, 5))))\n# print(intersection((1, 2), (2, 3)), intersection((-1, 1), (0, 4)), intersection((-3, -1), (-5, 5))))\n# print(intersection((1, 2), (2, 3)), intersection((-1, 1), (0, 4)), intersection((-3, -1), (-5, 5))))\n# print(intersection((1, 2), (2, 3)), intersection((-1, 1), (0, 4)), intersection((-3, -1), (-5, 5))))\n# print(intersection((1, 2), (2, 3)), intersection((-1, 1), (0, 4)), intersection((-3, -1), (-5, 5))))\n# print(intersection((1, 2), (2, 3)), intersection((-1, 1), (0, 4)), intersection((-3, -1), (-5, 5))))\n# print(intersection((1, 2), (2, 3)), intersection((-1, 1), (0, 4)), intersection((-3, -1), (-5, 5))))\n# print(intersection((1, 2), (2, 3)), intersection((-1, 1), (0, 4)), intersection((-3, -1), (-5, 5))))\n# print(intersection((1, 2), (2, 3)), intersection((-1, 1), (0, 4)), intersection((-3, -1), (-5, 5))))\n# print(intersection((1, 2), (2, 3)), intersection((-1, 1), (0, 4)), intersection((-3, -1), (-5, 5))))\n# print(intersection((1, 2), (2, 3)), intersection((-1, 1), (0, 4)), intersection((-3, -1), (-5, 5"}
{"task_id": "Python/128", "prompt": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n", "generation": "    if len(arr) == 0:\n        return None\n    return sum(arr) * prod_sign(arr)\n\n\ndef prod_sign(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    product of all signs of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_sign([1, 2, 2, -4]) == -4\n    >>> prod_sign([0, 1]) == 0\n    >>> prod_sign([]) == None\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    return sum(arr) * prod_sign_int(arr)\n\n\ndef prod_sign_int(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    product of all signs of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_sign_int([1, 2, 2, -4]) == -4\n    >>> prod_sign_int([0, 1]) == 0\n    >>> prod_sign_int([]) == None\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    return sum(arr) * prod_sign_int_helper(arr)\n\n\ndef prod_sign_int_helper(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    product of all signs of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_sign_int_helper([1, 2, 2, -4]) == -4\n    >>> prod_sign_int_helper([0, 1]) == 0\n    >>> prod_sign_int_helper([]) == None\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    return prod_sign_int_helper_helper(arr) * prod_sign_int_helper_helper(arr[1:])\n\n\ndef prod_sign_int_helper_helper(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    product of all signs of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_sign_int_helper_helper([1, 2, 2, -4]) == -4\n    >>> prod_sign_int_helper_helper([0, 1]) == 0\n    >>> prod_sign_int_helper_helper([]) == None\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    return prod_sign_int_helper(arr[1:]) * prod_sign_int_helper_helper(arr[2:])\n\n\ndef prod_sign_int_helper_helper(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    product of all signs of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_sign_int_helper_helper([1, 2, 2, -4]) == -4\n    >>> prod_sign_int_helper_helper([0, 1]) == 0\n    >>> prod_sign_int_helper_helper([]) == None\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    return prod_sign_int_helper(arr[1:]) * prod_sign_int_helper_helper(arr[2:])\n\n\ndef prod_sign_int_helper_helper(arr):\n    \"\"\"\n    You are given an array arr of integers and you need"}
{"task_id": "Python/129", "prompt": "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n", "generation": "    # edge case\n    if k == 0:\n        return []\n\n    # edge case\n    if k == 1:\n        return grid\n\n    # edge case\n    if len(grid) == 1:\n        return grid\n\n    # edge case\n    if len(grid[0]) == 1:\n        return grid\n\n    # edge case\n    if len(grid) == 0:\n        return []\n\n    # edge case\n    if len(grid[0]) == 0:\n        return []\n\n    # edge case\n    if len(grid) == 2 and len(grid[0]) == 2:\n        return grid\n\n    # edge case\n    if len(grid) == 2 and len(grid[0]) == 1:\n        return grid\n\n    # edge case\n    if len(grid) == 1 and len(grid[0]) == 2:\n        return grid\n\n    # edge case\n    if len(grid) == 1 and len(grid[0]) == 1:\n        return grid\n\n    # edge case\n    if len(grid) == 0 and len(grid[0]) == 0:\n        return []\n\n    # edge case\n    if len(grid) == 0 and len(grid[0]) == 1:\n        return []\n\n    # edge case\n    if len(grid) == 1 and len(grid[0]) == 0:\n        return []\n\n    # edge case\n    if len(grid) == 1 and len(grid[0]) == 1:\n        return [grid[0][0]]\n\n    # edge case\n    if len(grid) == 2 and len(grid[0]) == 2:\n        return grid\n\n    # edge case\n    if len(grid) == 2 and len(grid[0]) == 1:\n        return [grid[0][0], grid[1][0]]\n\n    # edge case\n    if len(grid) == 1 and len(grid[0]) == 2:\n        return [grid[0][0]]\n\n    # edge case\n    if len(grid) == 1 and len(grid[0]) == 1:\n        return [grid[0][0]]\n\n    # edge case\n    if len(grid) == 0 and len(grid[0]) == 2:\n        return []\n\n    # edge case\n    if len(grid) == 2 and len(grid[0]) == 0:\n        return []\n\n    # edge case\n    if len(grid) == 1 and len(grid[0]) == 0:\n        return []\n\n    # edge case\n    if len(grid) == 0 and len(grid[0]) == 1:\n        return []\n\n    # edge case\n    "}
{"task_id": "Python/130", "prompt": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n", "generation": "    tri = [3]\n    for i in range(1, n + 1):\n        tri.append(tri[i - 1] + tri[i - 2] + tri[i + 1])\n    return tri\n\n\ndef tribonacci_sequence_numbers(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    tri = [3]\n    for i in range(1, n + 1):\n        tri.append(tri[i - 1] + tri[i - 2] + tri[i + 1])\n    return tri\n\n\ndef tribonacci_sequence_numbers_2(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    tri = [3]\n    for i in range(1, n + 1):\n        tri.append(tri[i - 1] + tri[i - 2] + tri[i + 1])\n    return tri\n\n\ndef tribonacci_sequence_numbers_3(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2)"}
{"task_id": "Python/131", "prompt": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n", "generation": "    if n == 0:\n        return 0\n    if n < 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 0\n    return n % 10 * digits(n // 10)\n\n\ndef digits_product_2(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 0\n    return n % 10 * digits_product_2(n // 10)\n\n\ndef digits_product_3(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 0\n    return n % 10 * digits_product_3(n // 10)\n\n\ndef digits_product_4(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 0\n    return n % 10 * digits_product_4(n // 10)\n\n\ndef digits_product_5(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 0\n    return n % 10 * digits_product_5(n // 10)\n\n\ndef digits_product_6(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 0\n    return n % 10 * digits_product_6(n // 10)\n\n\ndef digits_product_7(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 0\n    return n % 10 * digits_product_7(n // 10)\n\n\ndef digits_product_8(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits"}
{"task_id": "Python/132", "prompt": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n", "generation": "    \n    def is_nested_helper(string):\n        if string == '':\n            return True\n        if string[0] == '[' and string[-1] == ']':\n            return is_nested_helper(string[1:-1])\n        return False\n    \n    return is_nested_helper(string)\n\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[[') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    \n    def is_nested_helper(string):\n        if string == '':\n            return True\n        if string[0] == '[' and string[-1] == ']':\n            return is_nested_helper(string[1:-1])\n        return False\n    \n    return is_nested_helper(string)\n\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[[') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    \n    def is_nested_helper(string):\n        if string == '':\n            return True\n        if string[0] == '[' and string[-1] == ']':\n            return is_nested_helper(string[1:-1])\n        return False\n    \n    return is_nested_helper(string)\n\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[[') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    \n    def is_nested_helper(string):\n        if string == '':\n            return True\n        if string[0] == '[' and string[-1] == ']':\n            return is_nested_helper(string[1:-1])\n        return False\n    \n    return is_nested_helper(string)\n\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only"}
{"task_id": "Python/133", "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n", "generation": "    return round(sum([x ** 2 for x in lst]))\n\n\ndef sum_squares_list(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return round(sum([x ** 2 for x in lst]))\n\n\ndef sum_squares_dict(dct):\n    \"\"\"You are given a dictionary of numbers.\n    You need to return the sum of squared numbers in the given dictionary,\n    round each element in the dictionary to the upper int(Ceiling) first.\n    Examples:\n    For dct = {1:1, 2:2, 3:3} the output should be 14\n    For dct = {1:1, 4:9} the output should be 98\n    For dct = {1:1, 3:5, 5:7} the output should be 84\n    For dct = {1.4:4.2, 0:0} the output should be 29\n    For dct = {-2.4:1, 1:1} the output should be 6\n    \n\n    \"\"\"\n    return round(sum([x ** 2 for x in dct.values()]))\n\n\ndef sum_squares_set(set):\n    \"\"\"You are given a set of numbers.\n    You need to return the sum of squared numbers in the given set,\n    round each element in the set to the upper int(Ceiling) first.\n    Examples:\n    For set = {1,2,3} the output should be 14\n    For set = {1,4,9} the output should be 98\n    For set = {1,3,5,7} the output should be 84\n    For set = {1.4,4.2,0} the output should be 29\n    For set = {-2.4,1,1} the output should be 6\n    \n\n    \"\"\"\n    return round(sum([x ** 2 for x in set]))\n\n\ndef sum_squares_tuple(tup):\n    \"\"\"You are given a tuple of numbers.\n    You need to return the sum of squared numbers in the given tuple,\n    round each element in the tuple to the upper int(Ceiling) first.\n    Examples:\n    For tup = (1,2,3) the output should be 14\n    For tup = (1,4,9) the output should be 98\n    For tup = (1,3,5,7) the output should be 84\n    For tup = (1.4,4.2,0) the output should be 29\n    For tup = (-2.4,1,1) the output should be 6\n    \n\n    \"\"\"\n    return round(sum([x ** 2 for x in tup]))\n\n\ndef sum_squares_list_dict(lst, dct):\n    \"\"\"You are given a list of numbers and a dictionary of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] and dct = {1:1, 2"}
{"task_id": "Python/134", "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n", "generation": "    return txt[-1].isalpha() and not txt[-1].isspace()\n\n\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    return txt[-1].isalpha() and not txt[-1].isspace()\n\n\ndef check_if_last_char_is_a_number(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is a number and is not a part of a word, and\n    False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_number(\"apple pie\") \u279e False\n    check_if_last_char_is_a_number(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_number(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_number(\"\") \u279e False \n    '''\n    return txt[-1].isdigit() and not txt[-1].isspace()\n\n\ndef check_if_last_char_is_a_punctuation(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is a punctuation mark and is not a part of\n    a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_punctuation(\"apple pie\") \u279e False\n    check_if_last_char_is_a_punctuation(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_punctuation(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_punctuation(\"\") \u279e False \n    '''\n    return txt[-1] in string.punctuation and not txt[-1].isspace()\n\n\ndef check_if_last_char_is_a_whitespace(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is a whitespace character and is not a part\n    of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_whitespace(\"apple pie\") \u279e False\n    check_if_last_char_is_a_whitespace(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_whitespace(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_whitespace(\"\") \u279e False \n    '''\n    return txt[-1].isspace() and not txt"}
{"task_id": "Python/135", "prompt": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n", "generation": "    arr_len = len(arr)\n    for i in range(arr_len - 1):\n        if arr[i] <= arr[i + 1]:\n            return i\n    return -1\n\n\ndef can_arrange_all(arr):\n    \"\"\"Create a function which returns True if all elements in the given array are\n    greater than or equal to the element immediately preceding it. If no such\n    element exists then return False. The given array will not contain duplicate\n    values.\n\n    Examples:\n    can_arrange_all([1,2,4,3,5]) = True\n    can_arrange_all([1,2,3]) = False\n    \"\"\"\n    arr_len = len(arr)\n    for i in range(arr_len - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True\n\n\ndef can_arrange_all_2(arr):\n    \"\"\"Create a function which returns True if all elements in the given array are\n    greater than or equal to the element immediately preceding it. If no such\n    element exists then return False. The given array will not contain duplicate\n    values.\n\n    Examples:\n    can_arrange_all([1,2,4,3,5]) = True\n    can_arrange_all([1,2,3]) = False\n    \"\"\"\n    arr_len = len(arr)\n    for i in range(arr_len - 1):\n        if arr[i] >= arr[i + 1]:\n            return False\n    return True\n\n\ndef can_arrange_all_3(arr):\n    \"\"\"Create a function which returns True if all elements in the given array are\n    greater than or equal to the element immediately preceding it. If no such\n    element exists then return False. The given array will not contain duplicate\n    values.\n\n    Examples:\n    can_arrange_all([1,2,4,3,5]) = True\n    can_arrange_all([1,2,3]) = False\n    \"\"\"\n    arr_len = len(arr)\n    for i in range(arr_len - 1):\n        if arr[i] <= arr[i + 1]:\n            return False\n    return True\n\n\ndef can_arrange_all_4(arr):\n    \"\"\"Create a function which returns True if all elements in the given array are\n    greater than or equal to the element immediately preceding it. If no such\n    element exists then return False. The given array will not contain duplicate\n    values.\n\n    Examples:\n    can_arrange_all([1,2,4,3,5]) = True\n    can_arrange_all([1,2,3]) = False\n    \"\"\"\n    arr_len = len(arr)\n    for i in range(arr_len - 1):\n        if arr[i] >= arr[i + 1]:\n            return False\n    return True\n\n\ndef can_arrange_all_5(arr):\n    \"\"\"Create a function which returns True if all elements in the given array are\n    greater than or equal to the element immediately preceding it. If no such\n    element exists then return False. The given array will not contain duplicate\n    values.\n\n    Examples:\n    can_arrange_all([1,2,4,3,5]) = True\n    can_arrange_all([1,2,3]) = False\n    \"\"\"\n    arr_len = len(arr)\n    for i in range(arr_len - 1):\n        if arr[i] == arr[i + 1]:\n            return False\n    return True\n\n\ndef can_arrange_all_6(arr):\n    \"\"\"Create a function which returns True if all elements in the given array are\n    greater than or equal to the element immediately preceding it. If no such\n    element exists then return False. The given array will not contain duplicate\n    values.\n\n    Examples:\n    can_arrange_all([1,2"}
{"task_id": "Python/136", "prompt": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n", "generation": "    largest = None\n    smallest = None\n    for i in lst:\n        if i < 0:\n            return (None, None)\n        if i > largest:\n            largest = i\n        if i < smallest:\n            smallest = i\n    return (smallest, largest)\n\n\ndef _get_all_sublists(lst):\n    '''\n    Create a function that returns a list of all sublists of a list.\n\n    Examples:\n    _get_all_sublists([2, 4, 1, 3, 5, 7]) == [[2, 4, 1], [3, 5, 7]]\n    _get_all_sublists([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [[lst[0]]]\n    return [lst[:i] + lst[i+1:] for i in range(len(lst)-1)]\n\n\ndef _get_all_sublists_with_length(lst, length):\n    '''\n    Create a function that returns a list of all sublists of a list\n    with a given length.\n\n    Examples:\n    _get_all_sublists_with_length([2, 4, 1, 3, 5, 7], 2) == [[2, 4], [1, 3], [5, 7]]\n    _get_all_sublists_with_length([2, 4, 1, 3, 5, 7], 3) == [[2, 4, 1], [3, 5, 7]]\n    _get_all_sublists_with_length([2, 4, 1, 3, 5, 7], 4) == [[2, 4, 1, 3]]\n    _get_all_sublists_with_length([2, 4, 1, 3, 5, 7], 5) == [[2, 4, 1, 3, 5]]\n    _get_all_sublists_with_length([2, 4, 1, 3, 5, 7], 6) == [[2, 4, 1, 3, 5, 7]]\n    _get_all_sublists_with_length([2, 4, 1, 3, 5, 7], 7) == [[2, 4, 1, 3, 5, 7]]\n    _get_all_sublists_with_length([2, 4, 1, 3, 5, 7], 8) == [[2, 4, 1, 3, 5, 7]]\n    _get_all_sublists_with_length([2, 4, 1, 3, 5, 7], 9) == [[2, 4, 1, 3, 5, 7]]\n    _get_all_sublists_with_length([2, 4, 1, 3, 5, 7], 10) == [[2, 4, 1, 3, 5, 7]]\n    _get_all_sublists_with_length([2, 4, 1, 3, 5, 7], 11) == [[2, 4, 1, 3, 5, 7]]\n    _get_all_sublists_with_length([2, 4, 1, 3, 5, 7], 12) == [[2, 4, 1, 3, 5, 7]]\n    _get_all_sublists_with_length([2, 4, 1, 3, 5, 7], 13) == [[2, 4, 1, 3, 5, 7]]\n    _get_all_sublists_with_length([2, 4, 1, 3, 5, 7], 14) == [[2, 4, 1, 3, 5, 7]]\n    _get_all_sublists_with_length([2, 4, 1, 3, 5, 7], 15) == [[2, 4, 1, 3, 5, 7]]\n    _get_all_sublists_with"}
{"task_id": "Python/137", "prompt": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n", "generation": "    if a == b:\n        return None\n    if a > b:\n        return a\n    return b\n\n\ndef compare_two(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_two(1, 2.5) \u279e 2.5\n    compare_two(1, \"2,3\") \u279e \"2,3\"\n    compare_two(\"5,1\", \"6\") \u279e \"6\"\n    compare_two(\"1\", 1) \u279e None\n    \"\"\"\n    if a == b:\n        return None\n    if a < b:\n        return a\n    return b\n\n\ndef compare_three(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_three(1, 2.5) \u279e 2.5\n    compare_three(1, \"2,3\") \u279e \"2,3\"\n    compare_three(\"5,1\", \"6\") \u279e \"6\"\n    compare_three(\"1\", 1) \u279e None\n    \"\"\"\n    if a == b:\n        return None\n    if a > b:\n        return a\n    return b\n\n\ndef compare_four(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_four(1, 2.5) \u279e 2.5\n    compare_four(1, \"2,3\") \u279e \"2,3\"\n    compare_four(\"5,1\", \"6\") \u279e \"6\"\n    compare_four(\"1\", 1) \u279e None\n    \"\"\"\n    if a == b:\n        return None\n    if a < b:\n        return a\n    return b\n\n\ndef compare_five(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_five(1, 2.5) \u279e 2.5\n    compare_five(1, \"2,3\") \u279e \"2,3\"\n    compare_five(\"5,1\", \"6\") \u279e \"6\"\n    compare_five(\"1\", 1) \u279e None\n    \"\"\"\n    if a == b:\n        return None\n    if a < b:\n        return a\n    return b\n\n\ndef compare_six(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_six(1, 2.5) \u279e 2.5\n    compare_six(1, \"2,3\") \u279e \"2,3\"\n    comp"}
{"task_id": "Python/138", "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n", "generation": "    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n % 2 == 0:\n        return is_equal_to_sum_even(n // 2)\n    else:\n        return is_equal_to_sum_even(n - 1)\n\n\ndef is_equal_to_sum_even_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers and odd numbers\n    Example\n    is_equal_to_sum_even_odd(4) == False\n    is_equal_to_sum_even_odd(6) == False\n    is_equal_to_sum_even_odd(8) == True\n    \"\"\"\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n % 2 == 0:\n        return is_equal_to_sum_even_odd(n // 2)\n    else:\n        return is_equal_to_sum_even_odd(n - 1) and (n % 2 == 1)\n\n\ndef is_equal_to_sum_even_odd_with_extra_space(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers and odd numbers\n    Example\n    is_equal_to_sum_even_odd_with_extra_space(4) == False\n    is_equal_to_sum_even_odd_with_extra_space(6) == False\n    is_equal_to_sum_even_odd_with_extra_space(8) == True\n    \"\"\"\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n % 2 == 0:\n        return is_equal_to_sum_even_odd_with_extra_space(n // 2)\n    else:\n        return is_equal_to_sum_even_odd_with_extra_space(n - 1) and (n % 2 == 1)\n\n\ndef is_equal_to_sum_even_odd_with_extra_space_and_extra_space(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers and odd numbers\n    Example\n    is_equal_to_sum_even_odd_with_extra_space_and_extra_space(4) == False\n    is_equal_to_sum_even_odd_with_extra_space_and_extra_space(6) == False\n    is_equal_to_sum_even_odd_with_extra_space_and_extra_space(8) == True\n    \"\"\"\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n % 2 == 0:\n        return is_equal_to_sum_even_odd_with_extra_space_and_extra_space(\n            n // 2\n        )\n    else:\n        return is_equal_to_sum_even_odd_with_extra_space_and_extra_space(\n            n - 1\n        ) and (n % 2 == 1)\n\n\ndef is_equal_to_sum_even_odd_with_extra_space_and_extra_space_and_extra_space(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers and odd numbers\n    Example\n    is_equal_to_sum_even_odd_with_extra_space_and_extra_space_and_extra_space(4) == False\n    is_equal_to_sum_even_odd_with_extra_space_and_extra_space_and_extra_space(6) == False\n    is_equal_to_sum_even_odd_with_extra_space_and_extra_space_and_extra_space(8) == True\n    \"\"\"\n    if n < 0:\n        return False\n    if n == 0:\n"}
{"task_id": "Python/139", "prompt": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n", "generation": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n\n\ndef _generate_n_choose_k_combinations(n, k):\n    \"\"\"Generate all combinations of n elements chosen from the set {1, 2,..., k}\n\n    For example:\n    >>> _generate_n_choose_k_combinations(4, 2)\n    [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]\n    \"\"\"\n    if k > n:\n        return []\n    else:\n        return [tuple(sorted(combination)) for combination in itertools.combinations(range(1, k + 1), n)]\n\n\ndef _generate_n_choose_k_permutations(n, k):\n    \"\"\"Generate all permutations of n elements chosen from the set {1, 2,..., k}\n\n    For example:\n    >>> _generate_n_choose_k_permutations(4, 2)\n    [(1, 2), (1, 3), (1, 4), (2, 1), (2, 3), (2, 4), (3, 1), (3, 2), (3, 4), (4, 1), (4, 2), (4, 3)]\n    \"\"\"\n    if k > n:\n        return []\n    else:\n        return [tuple(sorted(permutation)) for permutation in itertools.permutations(range(1, k + 1), n)]\n\n\ndef _generate_n_choose_k_combinations_with_replacement(n, k):\n    \"\"\"Generate all combinations of n elements chosen from the set {1, 2,..., k} with replacement\n\n    For example:\n    >>> _generate_n_choose_k_combinations_with_replacement(4, 2)\n    [(1, 1), (1, 2), (1, 3), (1, 4), (2, 1), (2, 2), (2, 3), (2, 4), (3, 1), (3, 2), (3, 3), (3, 4), (4, 1), (4, 2), (4, 3), (4, 4)]\n    \"\"\"\n    if k > n:\n        return []\n    else:\n        return [tuple(sorted(combination)) for combination in itertools.combinations_with_replacement(range(1, k + 1), n)]\n\n\ndef _generate_n_choose_k_permutations_with_replacement(n, k):\n    \"\"\"Generate all permutations of n elements chosen from the set {1, 2,..., k} with replacement\n\n    For example:\n    >>> _generate_n_choose_k_permutations_with_replacement(4, 2)\n    [(1, 1), (1, 2), (1, 3), (1, 4), (2, 1), (2, 2), (2, 3), (2, 4), (3, 1), (3, 2), (3, 3), (3, 4), (4, 1), (4, 2), (4, 3), (4, 4)]\n    \"\"\"\n    if k > n:\n        return []\n    else:\n        return [tuple(sorted(permutation)) for permutation in itertools.permutations_with_replacement(range(1, k + 1), n)]\n\n\ndef _generate_n_choose_k_combinations_with_repetition(n, k):\n    \"\"\"Generate all combinations of n elements chosen from the set {1, 2,..., k} with repetition\n\n    For example:\n    >>> _generate_n_choose_k_combinations_with_repetition(4, 2)\n    [(1, 1), (1, 2), (1, 3), (1, 4), (2,"}
{"task_id": "Python/140", "prompt": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n", "generation": "    return re.sub(r\"\\s+\", \"_\", text).strip()\n\n\ndef fix_spaces_with_underscore(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return re.sub(r\"\\s+\", \"_\", text).strip()\n\n\ndef fix_spaces_with_hyphen(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return re.sub(r\"\\s+\", \"-\", text).strip()\n\n\ndef fix_spaces_with_hyphen_and_underscore(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return re.sub(r\"\\s+\", \"-\", text).strip()\n\n\ndef fix_spaces_with_hyphen_and_underscore_and_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return re.sub(r\"\\s+\", \"-\", text).strip()\n\n\ndef fix_spaces_with_hyphen_and_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return re.sub(r\"\\s+\", \"-\", text).strip()\n\n\ndef fix_spaces_with_hyphen_and_spaces_and_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return re.sub(r\"\\s"}
{"task_id": "Python/141", "prompt": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n", "generation": "    if not file_name.endswith(\".txt\"):\n        return \"No\"\n    if len(file_name) <= 3:\n        return \"No\"\n    if file_name.count(\".\")!= 1:\n        return \"No\"\n    if file_name[0] == \".\":\n        return \"No\"\n    if file_name[-1] not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    return \"Yes\"\n\n\ndef file_name_check_2(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a latin alphapet letter.\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if not file_name.endswith(\".txt\"):\n        return \"No\"\n    if len(file_name) <= 3:\n        return \"No\"\n    if file_name.count(\".\")!= 1:\n        return \"No\"\n    if file_name[0] not in [\"a\", \"A\", \"b\", \"B\", \"c\", \"C\", \"d\", \"D\", \"e\", \"E\", \"f\", \"F\"]:\n        return \"No\"\n    if file_name[-1] not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    return \"Yes\"\n\n\ndef file_name_check_3(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a latin alphapet letter.\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if not file_name.endswith(\".txt\"):\n        return \"No\"\n    if len(file_name) <= 3:\n        return \"No\"\n    if file_name.count(\".\")!= 1:\n        return \"No\"\n    if file_name[0] not in [\"a\", \"A\", \"b\", \"B\","}
{"task_id": "Python/142", "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n", "generation": "    sum = 0\n    for i in lst:\n        if i % 3 == 0 and i % 4!= 0:\n            sum += i ** 2\n        elif i % 3!= 0 and i % 4 == 0:\n            sum += i ** 3\n        else:\n            sum += i\n    return sum\n\n\ndef sum_squares_2(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function shall not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in lst:\n        if i % 3 == 0 and i % 4!= 0:\n            sum += i ** 2\n        elif i % 3!= 0 and i % 4 == 0:\n            sum += i ** 3\n        else:\n            sum += i\n    return sum\n\n\ndef sum_squares_3(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function shall not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in lst:\n        if i % 3 == 0 and i % 4!= 0:\n            sum += i ** 2\n        elif i % 3!= 0 and i % 4 == 0:\n            sum += i ** 3\n        else:\n            sum += i\n    return sum\n\n\ndef sum_squares_4(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function shall not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in lst:\n        if i % 3 == 0 and i % 4!= 0:\n            sum += i ** 2\n        elif i % 3!= 0 and i % 4 == 0:\n            sum += i ** 3\n        else:\n            sum += i\n    return sum\n\n\ndef sum_squares_5(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list"}
{"task_id": "Python/143", "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n", "generation": "    return \" \".join(\n        [\n            word\n            for word in sentence.split()\n            if len(word) % 2 == 1 and word.isalpha()\n        ]\n    )\n\n\ndef _get_sentence_to_words_mapping(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a dictionary that maps each word to its index in the sentence.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: {'is': 0, 'a': 1, 'test': 2}\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: {'go': 0, 'for': 1,'swimming': 2}\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    return {word: index for index, word in enumerate(sentence.split())}\n\n\ndef _get_words_to_sentence_mapping(words):\n    \"\"\"\n    You are given a list of words,\n    and you have to return a dictionary that maps each word to its index in the list.\n\n    Example 1:\n        Input: words = ['is', 'a', 'test']\n        Output: {0: 'is', 1: 'a', 2: 'test'}\n\n    Example 2:\n        Input: words = ['go', 'for','swimming']\n        Output: {0: 'go', 1: 'for', 2:'swimming'}\n\n    Constraints:\n        * 1 <= len(words) <= 100\n        * words contains only letters\n    \"\"\"\n    return {index: word for index, word in enumerate(words)}\n\n\ndef _get_words_to_words_mapping(words):\n    \"\"\"\n    You are given a list of words,\n    and you have to return a dictionary that maps each pair of words to their indices in the list.\n\n    Example 1:\n        Input: words = ['is', 'a', 'test']\n        Output: {('is', 'a'): 0, ('is', 'test'): 1, ('a', 'test'): 2}\n\n    Example 2:\n        Input: words = ['go', 'for','swimming']\n        Output: {('go', 'for'): 0, ('go','swimming'): 1, ('for','swimming'): 2}\n\n    Constraints:\n        * 1 <= len(words) <= 100\n        * words contains only letters\n    \"\"\"\n    return {\n        (word1, word2): index\n        for index, (word1, word2) in enumerate(\n            [(word1, word2) for word1, word2 in zip(words, words[1:])]\n        )\n    }\n\n\ndef _get_words_to_words_mapping_with_duplicates(words):\n    \"\"\"\n    You are given a list of words,\n    and you have to return a dictionary that maps each pair of words to their indices in the list.\n\n    Example 1:\n        Input: words = ['is', 'a', 'test']\n        Output: {('is', 'a'): 0, ('is', 'test'): 1, ('a', 'test'): 2}\n\n    Example 2:\n        Input: words = ['go', 'for','swimming']\n        Output: {('go', 'for'): 0, ('go','swimming'): 1, ('for','swimming'): 2}\n\n    Constraints:\n        * 1 <= len(words) <= 100\n        * words contains only letters\n    \"\"\"\n    return {\n"}
{"task_id": "Python/144", "prompt": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n", "generation": "    # Your code here\n    numerator = x.split(\"/\")[0]\n    denominator = x.split(\"/\")[1]\n    if int(numerator) * int(n) == int(denominator):\n        return True\n    else:\n        return False\n\n\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Your code here\n    numerator = x.split(\"/\")[0]\n    denominator = x.split(\"/\")[1]\n    if int(numerator) * int(n) == int(denominator):\n        return True\n    else:\n        return False\n\n\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Your code here\n    numerator = x.split(\"/\")[0]\n    denominator = x.split(\"/\")[1]\n    if int(numerator) * int(n) == int(denominator):\n        return True\n    else:\n        return False\n\n\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Your code here\n    numerator = x.split(\"/\")[0]\n    denominator = x.split(\"/\")[1]\n    if int(numerator) * int(n) == int(denominator):\n        return True\n    else:\n        return False\n\n\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n"}
{"task_id": "Python/145", "prompt": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n", "generation": "    # Write your code here\n    if len(nums) == 0:\n        return []\n    else:\n        nums.sort(key=lambda x: sum(int(i) for i in str(x))))\n        return nums\n\n\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #############################################################################\n# #################################"}
{"task_id": "Python/146", "prompt": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n", "generation": "    return len([x for x in nums if x > 10 and (x % 10) % 2 == 1])\n\n\ndef test_specialFilter():\n    assert specialFilter([15, -73, 14, -15]) == 1\n    assert specialFilter([33, -2, -3, 45, 21, 109]) == 2\n\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    return len([x for x in nums if x > 10 and (x % 10) % 2 == 1])\n\n\ndef test_specialFilter():\n    assert specialFilter([15, -73, 14, -15]) == 1\n    assert specialFilter([33, -2, -3, 45, 21, 109]) == 2\n\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    return len([x for x in nums if x > 10 and (x % 10) % 2 == 1])\n\n\ndef test_specialFilter():\n    assert specialFilter([15, -73, 14, -15]) == 1\n    assert specialFilter([33, -2, -3, 45, 21, 109]) == 2\n\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    return len([x for x in nums if x > 10 and (x % 10) % 2 == 1])\n\n\ndef test_specialFilter():\n    assert specialFilter([15, -73, 14, -15]) == 1\n    assert specialFilter([33, -2, -3, 45, 21, 109]) == 2\n\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    return len([x for x in nums if x > 10 and (x % 10) % 2 == 1])\n\n\ndef test_specialFilter():\n    assert specialFilter([15, -73, 14, -15]) == 1\n    assert specialFilter([33, -2, -3, 45, 21, 109]) == 2\n\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33,"}
{"task_id": "Python/147", "prompt": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n", "generation": "    triples = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1) % 3 == 0:\n                    triples.append((i, j, k))\n    return len(triples)\n\n\ndef _test():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    _test()\n<|endoftext|>"}
{"task_id": "Python/148", "prompt": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n", "generation": "    # your code here\n    planet1 = planet1.lower()\n    planet2 = planet2.lower()\n    if planet1 == planet2:\n        return (planet1,)\n    else:\n        planet1_orbit = planet1.split(\" \")[-1]\n        planet2_orbit = planet2.split(\" \")[-1]\n        if planet1_orbit == planet2_orbit:\n            return tuple(sorted(planet1_orbit))\n        else:\n            return tuple()\n\n\nprint(bf(\"Jupiter\", \"Neptune\"))\nprint(bf(\"Earth\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Uranus\"))\nprint(bf(\"Mercury\", \"Venus\"))\nprint(bf(\"Mercury\", \"Earth\"))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Mercury\", \"Saturn\"))\nprint(bf(\"Mercury\", \"Neptune\"))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Mercury\", \"Saturn\"))\nprint(bf(\"Mercury\", \"Neptune\"))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Mercury\", \"Saturn\"))\nprint(bf(\"Mercury\", \"Neptune\"))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Mercury\", \"Saturn\"))\nprint(bf(\"Mercury\", \"Neptune\"))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Mercury\", \"Saturn\"))\nprint(bf(\"Mercury\", \"Neptune\"))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Mercury\", \"Saturn\"))\nprint(bf(\"Mercury\", \"Neptune\"))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Mercury\", \"Saturn\"))\nprint(bf(\"Mercury\", \"Neptune\"))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Mercury\", \"Saturn\"))\nprint(bf(\"Mercury\", \"Neptune\"))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Mercury\", \"Saturn\"))\nprint(bf(\"Mercury\", \"Neptune\"))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Mercury\", \"Saturn\"))\nprint(bf(\"Mercury\", \"Neptune\"))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Mercury\", \"Saturn\"))\nprint(bf(\"Mercury\", \"Neptune\"))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Mercury\", \"Saturn\"))\nprint(bf(\"Mercury\", \"Neptune\"))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Mercury\", \"Saturn\"))\nprint(bf(\"Mercury\","}
{"task_id": "Python/149", "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n", "generation": "    # your code here\n    lst_sorted = []\n    for word in lst:\n        if len(word) % 2 == 1:\n            lst_sorted.append(word)\n    lst_sorted.sort()\n    return lst_sorted\n\n\ndef list_sort(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # your code here\n    lst_sorted = []\n    for word in lst:\n        if len(word) % 2 == 1:\n            lst_sorted.append(word)\n    lst_sorted.sort()\n    return lst_sorted\n\n\ndef list_sort(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # your code here\n    lst_sorted = []\n    for word in lst:\n        if len(word) % 2 == 1:\n            lst_sorted.append(word)\n    lst_sorted.sort()\n    return lst_sorted\n\n\ndef list_sort(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n"}
{"task_id": "Python/150", "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n", "generation": "    if n == 2:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return y\n        return x\n\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n == 2:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return y\n        return x\n\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n == 2:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return y\n        return x\n\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n == 2:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return y\n        return x\n\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n == 2:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return y\n        return x\n\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n == 2:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return y\n        return x\n\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x"}
{"task_id": "Python/151", "prompt": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n", "generation": "    \n    if len(lst) == 0:\n        return 0\n    \n    sum_of_squares = 0\n    for num in lst:\n        if num % 2!= 0:\n            sum_of_squares += num ** 2\n    return sum_of_squares\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))\n\n# Write a function that takes a list of numbers and returns a new list with only the odd numbers.\n\ndef odd_numbers(lst):\n    '''\n    Given a list of numbers, return a new list with only the odd numbers.\n    \n    odd_numbers([1, 3, 2, 0]) == [1, 3, 2]\n    odd_numbers([-1, -2, 0]) == [-1, -2]\n    odd_numbers([9, -2]) == [9, -2]\n    odd_numbers([0]) == [0]  \n   \n    If the input list is empty, return an empty list.\n    '''\n    \n    if len(lst) == 0:\n        return []\n    \n    odd_numbers = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers\n\nprint(odd_numbers([1, 3, 2, 0]))\nprint(odd_numbers([-1, -2, 0]))\nprint(odd_numbers([9, -2]))\nprint(odd_numbers([0]))\n\n# Write a function that takes a list of numbers and returns a new list with only the even numbers.\n\ndef even_numbers(lst):\n    '''\n    Given a list of numbers, return a new list with only the even numbers.\n    \n    even_numbers([1, 3, 2, 0]) == [3, 2]\n    even_numbers([-1, -2, 0]) == [-1, 0]\n    even_numbers([9, -2]) == [9, -2]\n    even_numbers([0]) == [0]  \n   \n    If the input list is empty, return an empty list.\n    '''\n    \n    if len(lst) == 0:\n        return []\n    \n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n\nprint(even_numbers([1, 3, 2, 0]))\nprint(even_numbers([-1, -2, 0]))\nprint(even_numbers([9, -2]))\nprint(even_numbers([0]))\n\n# Write a function that takes a list of numbers and returns a new list with all the duplicates removed.\n\ndef remove_duplicates(lst):\n    '''\n    Given a list of numbers, return a new list with all the duplicates removed.\n    \n    remove_duplicates([1, 3, 2, 0]) == [1, 3, 2]\n    remove_duplicates([-1, -2, 0]) == [-1, -2]\n    remove_duplicates([9, -2]) == [9, -2]\n    remove_duplicates([0]) == [0]  \n   \n    If the input list is empty, return an empty list.\n    '''\n    \n    if len(lst) == 0:\n        return []\n    \n    duplicates"}
{"task_id": "Python/152", "prompt": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n", "generation": "    guess = np.array(guess)\n    score = np.array(score)\n    guess = np.sort(guess)\n    score = np.sort(score)\n    guess = guess[::-1]\n    score = score[::-1]\n    guess = np.flip(guess)\n    score = np.flip(score)\n    guess = np.append(guess, score)\n    guess = np.sort(guess)\n    guess = guess[::-1]\n    guess = np.flip(guess)\n    guess = np.append(guess, score)\n    guess = np.sort(guess)\n    guess = guess[::-1]\n    guess = np.flip(guess)\n    guess = np.append(guess, score)\n    guess = np.sort(guess)\n    guess = guess[::-1]\n    guess = np.flip(guess)\n    guess = np.append(guess, score)\n    guess = np.sort(guess)\n    guess = guess[::-1]\n    guess = np.flip(guess)\n    guess = np.append(guess, score)\n    guess = np.sort(guess)\n    guess = guess[::-1]\n    guess = np.flip(guess)\n    guess = np.append(guess, score)\n    guess = np.sort(guess)\n    guess = guess[::-1]\n    guess = np.flip(guess)\n    guess = np.append(guess, score)\n    guess = np.sort(guess)\n    guess = guess[::-1]\n    guess = np.flip(guess)\n    guess = np.append(guess, score)\n    guess = np.sort(guess)\n    guess = guess[::-1]\n    guess = np.flip(guess)\n    guess = np.append(guess, score)\n    guess = np.sort(guess)\n    guess = guess[::-1]\n    guess = np.flip(guess)\n    guess = np.append(guess, score)\n    guess = np.sort(guess)\n    guess = guess[::-1]\n    guess = np.flip(guess)\n    guess = np.append(guess, score)\n    guess = np.sort(guess)\n    guess = guess[::-1]\n    guess = np.flip(guess)\n    guess = np.append(guess, score)\n    guess = np.sort(guess)\n    guess = guess[::-1]\n    guess = np.flip(guess)\n    guess = np.append(guess, score)\n    guess = np.sort(guess)\n    guess = guess[::-1]\n    guess = np.flip(guess)\n    guess = np.append(guess, score)\n    guess = np.sort(guess)\n    guess = guess[::-1]\n    guess = np"}
{"task_id": "Python/153", "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n", "generation": "    # Get the number of uppercase letters in the extension's name\n    uppercase_letters = sum(1 for c in extensions if c.isupper())\n    # Get the number of lowercase letters in the extension's name\n    lowercase_letters = sum(1 for c in extensions if c.islower())\n    # Get the number of letters in the extension's name\n    letters = len(extensions)\n    # Get the number of uppercase letters in the class name\n    uppercase_letters_in_class = sum(1 for c in class_name if c.isupper())\n    # Get the number of lowercase letters in the class name\n    lowercase_letters_in_class = sum(1 for c in class_name if c.islower())\n    # Get the number of letters in the class name\n    letters_in_class = len(class_name)\n    # Get the number of uppercase letters in the extension's name\n    uppercase_letters_in_extension = sum(1 for c in extensions if c.isupper())\n    # Get the number of lowercase letters in the extension's name\n    lowercase_letters_in_extension = sum(1 for c in extensions if c.islower())\n    # Get the number of letters in the extension's name\n    letters_in_extension = len(extensions)\n    # Get the number of uppercase letters in the class name\n    uppercase_letters_in_class_name = sum(1 for c in class_name if c.isupper())\n    # Get the number of lowercase letters in the class name\n    lowercase_letters_in_class_name = sum(1 for c in class_name if c.islower())\n    # Get the number of letters in the class name\n    letters_in_class_name = len(class_name)\n    # Get the number of uppercase letters in the extension's name\n    uppercase_letters_in_extension_name = sum(1 for c in extensions if c.isupper())\n    # Get the number of lowercase letters in the extension's name\n    lowercase_letters_in_extension_name = sum(1 for c in extensions if c.islower())\n    # Get the number of letters in the extension's name\n    letters_in_extension_name = len(extensions)\n    # Get the number of uppercase letters in the class name\n    uppercase_letters_in_class_name_name = sum(1 for c in class_name if c.isupper())\n    # Get the number of lowercase letters in the class name\n    lowercase_letters_in_class_name_name = sum(1 for c in class_name if c.islower())\n    # Get the number of letters in the class name\n    letters_in_class_name_name = len(class_name)\n    # Get the number of uppercase letters in the extension's name\n    uppercase_letters_in_extension_name_name = sum(1 for c in extensions if c.isupper())\n    # Get the number of lowercase letters in the extension's name\n    lower"}
{"task_id": "Python/154", "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n", "generation": "    # your code here\n    if a == b:\n        return True\n    else:\n        for i in range(len(a)):\n            if a[i] == b[i]:\n                continue\n            else:\n                return False\n        return True\n\n\ndef cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    # your code here\n    if a == b:\n        return True\n    else:\n        for i in range(len(a)):\n            if a[i] == b[i]:\n                continue\n            else:\n                return False\n        return True\n\n\ndef cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    # your code here\n    if a == b:\n        return True\n    else:\n        for i in range(len(a)):\n            if a[i] == b[i]:\n                continue\n            else:\n                return False\n        return True\n\n\ndef cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    # your code here\n    if a == b:\n        return True\n    else:\n        for i in range(len(a)):\n            if a[i] == b[i]:\n                continue\n            else:\n                return False\n        return True\n\n\ndef cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    # your code here\n    if a == b:\n        return True\n    else:\n        for i in range(len(a)):\n            if a[i] == b[i]:\n                "}
{"task_id": "Python/155", "prompt": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n", "generation": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return even_count, odd_count\n\n\ndef get_number_of_digits(num):\n    \"\"\"Given an integer. return a tuple that has the number of digits respectively.\n\n     Example:\n        get_number_of_digits(123) ==> (3, 1)\n    \"\"\"\n    return len(str(num)), len(str(num)[::-1])\n\n\ndef get_number_of_digits_in_range(start, end):\n    \"\"\"Given two integers. return a tuple that has the number of digits respectively.\n\n     Example:\n        get_number_of_digits_in_range(123, 456) ==> (3, 2)\n    \"\"\"\n    return len(str(start)), len(str(end)[::-1])\n\n\ndef get_number_of_digits_in_range_with_reversed_digits(start, end):\n    \"\"\"Given two integers. return a tuple that has the number of digits respectively.\n\n     Example:\n        get_number_of_digits_in_range_with_reversed_digits(123, 456) ==> (3, 2)\n    \"\"\"\n    return len(str(end)), len(str(start)[::-1])\n\n\ndef get_number_of_digits_in_range_with_reversed_digits_and_odd_count(start, end):\n    \"\"\"Given two integers. return a tuple that has the number of digits respectively.\n\n     Example:\n        get_number_of_digits_in_range_with_reversed_digits_and_odd_count(123, 456) ==> (3, 2)\n    \"\"\"\n    even_count, odd_count = get_number_of_digits_in_range_with_reversed_digits(\n        start, end\n    )\n    return even_count + odd_count, len(str(end)[::-1])\n\n\ndef get_number_of_digits_in_range_with_reversed_digits_and_even_count(start, end):\n    \"\"\"Given two integers. return a tuple that has the number of digits respectively.\n\n     Example:\n        get_number_of_digits_in_range_with_reversed_digits_and_even_count(123, 456) ==> (3, 2)\n    \"\"\"\n    even_count, odd_count = get_number_of_digits_in_range_with_reversed_digits(\n        start, end\n    )\n    return even_count, len(str(start)[::-1])\n\n\ndef get_number_of_digits_in_range_with_reversed_digits_and_odd_count_and_even_count(\n    start, end\n):\n    \"\"\"Given two integers. return a tuple that has the number of digits respectively.\n\n     Example:\n        get_number_of_digits_in_range_with_reversed_digits_and_odd_count_and_even_count(123, 456) ==> (3, 2)\n    \"\"\"\n    even_count, odd_count = get_number_of_digits_in_range_with_reversed_digits(\n        start, end\n    )\n    return even_count + odd_count, len(str(end)[::-1])\n\n\ndef get_number_of_digits_in_range_with_reversed_digits_and_odd_count_and_even_count_with_reversed_digits(\n    start, end\n):\n    \"\"\"Given two integers. return a tuple that has the number of digits respectively.\n\n     Example:\n        get_number_of_digits_in_range_with_reversed_digits_and_"}
{"task_id": "Python/156", "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n", "generation": "    if not 1 <= number <= 1000:\n        raise ValueError(\"The number must be between 1 and 1000\")\n\n    roman_numerals = {\n        1: \"I\",\n        4: \"IV\",\n        5: \"V\",\n        9: \"IX\",\n        10: \"X\",\n        40: \"XL\",\n        50: \"L\",\n        90: \"XC\",\n        100: \"C\",\n        400: \"CD\",\n        500: \"D\",\n        900: \"CM\",\n        1000: \"M\",\n    }\n\n    result = \"\"\n    for numeral, value in roman_numerals.items():\n        while number >= numeral:\n            number -= numeral\n            result += value\n\n    return result.lower()\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_roman(19) == 'xix'\n    >>> int_to_roman(152) == 'clii'\n    >>> int_to_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not 1 <= number <= 1000:\n        raise ValueError(\"The number must be between 1 and 1000\")\n\n    roman_numerals = {\n        1: \"I\",\n        4: \"IV\",\n        5: \"V\",\n        9: \"IX\",\n        10: \"X\",\n        40: \"XL\",\n        50: \"L\",\n        90: \"XC\",\n        100: \"C\",\n        400: \"CD\",\n        500: \"D\",\n        900: \"CM\",\n        1000: \"M\",\n    }\n\n    result = \"\"\n    for numeral, value in roman_numerals.items():\n        while number >= numeral:\n            number -= numeral\n            result += value\n\n    return result.lower()\n\n\ndef int_to_arabic(number):\n    \"\"\"\n    Given a positive integer, obtain its Arabic numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_arabic(19) == 'xix'\n    >>> int_to_arabic(152) == 'clii'\n    >>> int_to_arabic(426) == 'cdxxvi'\n    \"\"\"\n    if not 1 <= number <= 1000:\n        raise ValueError(\"The number must be between 1 and 1000\")\n\n    arabic_numerals = {\n        1: \"I\",\n        4: \"IV\",\n        5: \"V\",\n        9: \"IX\",\n        10: \"X\",\n        40: \"XL\",\n        50: \"L\",\n        90: \"XC\",\n        100: \"C\",\n        400: \"CD\",\n        500: \"D\",\n        900: \"CM\",\n        1000: \"M\",\n    }\n\n    result = 0\n    for numeral, value in arabic_numerals.items():\n        while number >= numeral:\n            number -= numeral\n            result += numeral\n\n    return result.lower()\n\n\ndef int_to_arabic_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_arabic_roman(19) == 'xix'\n    >>> int_to_arabic_roman(152) == 'clii'\n    >>> int_to_arabic_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not 1 <= number <= 1000:\n        raise ValueError(\"The number must be between"}
{"task_id": "Python/157", "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n", "generation": "    # Check if the three sides are equal.\n    if a == b == c:\n        return True\n    # Check if the three sides are equal.\n    if a == b or a == c or b == c:\n        return True\n    # Check if the three sides are equal.\n    if a == b or a == c or b == c:\n        return True\n    # Check if the three sides are equal.\n    if a == b or a == c or b == c:\n        return True\n    # Check if the three sides are equal.\n    if a == b or a == c or b == c:\n        return True\n    # Check if the three sides are equal.\n    if a == b or a == c or b == c:\n        return True\n    # Check if the three sides are equal.\n    if a == b or a == c or b == c:\n        return True\n    # Check if the three sides are equal.\n    if a == b or a == c or b == c:\n        return True\n    # Check if the three sides are equal.\n    if a == b or a == c or b == c:\n        return True\n    # Check if the three sides are equal.\n    if a == b or a == c or b == c:\n        return True\n    # Check if the three sides are equal.\n    if a == b or a == c or b == c:\n        return True\n    # Check if the three sides are equal.\n    if a == b or a == c or b == c:\n        return True\n    # Check if the three sides are equal.\n    if a == b or a == c or b == c:\n        return True\n    # Check if the three sides are equal.\n    if a == b or a == c or b == c:\n        return True\n    # Check if the three sides are equal.\n    if a == b or a == c or b == c:\n        return True\n    # Check if the three sides are equal.\n    if a == b or a == c or b == c:\n        return True\n    # Check if the three sides are equal.\n    if a == b or a == c or b == c:\n        return True\n    # Check if the three sides are equal.\n    if a == b or a == c or b == c:\n        return True\n    # Check if the three sides are equal.\n    if a == b or a == c or b == c:\n        return True\n    # Check if the three sides are equal.\n    if a == b or a == c or b == c:\n        return True\n    # Check if the three sides are equal.\n    if a == b or a == c or b == c:\n        return True\n    # Check if the three sides are equal.\n    if a == b or a == c or b == c:\n        return True\n    # Check if the three sides are equal.\n    if a == b or a == c or b == c:\n        return True\n    # Check if the three sides are equal.\n    if a == b or a == c or b == c:\n        return True\n    # Check if the three sides are equal.\n    if a == b or a == c or b == c:\n        return True\n    # Check if the three sides are equal.\n    if a == b or a == c or b == c:\n        return True\n    # Check if the three sides are equal.\n    if a == b or a == c or b == c:\n        return True\n    # Check if the three sides are equal.\n    if a == b or a == c or b == c:\n        return True\n    # Check if the three sides are equal.\n    if a == b or a == c or b == c:\n        return True\n    # Check if the three sides are equal.\n    if a == b or a == c or b == c:\n        return True\n    # Check if the three sides are equal.\n    "}
{"task_id": "Python/158", "prompt": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n", "generation": "    max_len = 0\n    max_len_word = \"\"\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_len_word = word\n    return max_len_word\n\n\ndef find_max_unique(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max_unique([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max_unique([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max_unique([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_len = 0\n    max_len_word = \"\"\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_len_word = word\n    return max_len_word\n\n\ndef find_max_unique_2(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max_unique_2([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max_unique_2([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max_unique_2([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_len = 0\n    max_len_word = \"\"\n    for word in words:\n        if len(set(word)) > max_len:\n            max_len = len(set(word))\n            max_len_word = word\n    return max_len_word\n\n\ndef find_max_unique_3(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max_unique_3([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max_unique_3([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max_unique_3([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_len = 0\n    max_len_word = \"\"\n    for word in words:\n        if len(set(word)) > max_len:\n            max_len = len(set(word))\n            max_len_word = word\n    return max_len_word\n\n\ndef find_max_unique_4(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max_unique_4([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max_unique_4([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max_unique_4([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_len = 0\n    max_len_word = \"\"\n    for word in words:\n        if len(set(word)) > max_"}
{"task_id": "Python/159", "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n", "generation": "    if remaining < need:\n        return [remaining, 0]\n    else:\n        return [need, remaining - need]\n\n\ndef get_number_of_days(number_of_days):\n    \"\"\"\n    You have a number of days, and you want to know how many days will be left before the end of the year.\n    you should return an integer of the number of days left.\n    \n    Example:\n    * get_number_of_days(5) -> 5\n    * get_number_of_days(1) -> 0\n    \n    Variables:\n    @number_of_days : integer\n        the number of days that you have.\n    \n    Constrain:\n    * 0 <= number_of_days <= 1000\n\n    Have fun :)\n    \"\"\"\n    return number_of_days\n\n\ndef get_number_of_months(number_of_months):\n    \"\"\"\n    You have a number of months, and you want to know how many months will be left before the end of the year.\n    you should return an integer of the number of months left.\n    \n    Example:\n    * get_number_of_months(5) -> 5\n    * get_number_of_months(1) -> 0\n    \n    Variables:\n    @number_of_months : integer\n        the number of months that you have.\n    \n    Constrain:\n    * 0 <= number_of_months <= 1000\n\n    Have fun :)\n    \"\"\"\n    return number_of_months\n\n\ndef get_number_of_years(number_of_years):\n    \"\"\"\n    You have a number of years, and you want to know how many years will be left before the end of the year.\n    you should return an integer of the number of years left.\n    \n    Example:\n    * get_number_of_years(5) -> 5\n    * get_number_of_years(1) -> 0\n    \n    Variables:\n    @number_of_years : integer\n        the number of years that you have.\n    \n    Constrain:\n    * 0 <= number_of_years <= 1000\n\n    Have fun :)\n    \"\"\"\n    return number_of_years\n\n\ndef get_number_of_hours(number_of_hours):\n    \"\"\"\n    You have a number of hours, and you want to know how many hours will be left before the end of the day.\n    you should return an integer of the number of hours left.\n    \n    Example:\n    * get_number_of_hours(5) -> 5\n    * get_number_of_hours(1) -> 0\n    \n    Variables:\n    @number_of_hours : integer\n        the number of hours that you have.\n    \n    Constrain:\n    * 0 <= number_of_hours <= 1000\n\n    Have fun :)\n    \"\"\"\n    return number_of_hours\n\n\ndef get_number_of_minutes(number_of_minutes):\n    \"\"\"\n    You have a number of minutes, and you want to know how many minutes will be left before the end of the day.\n    you should return an integer of the number of minutes left.\n    \n    Example:\n    * get_number"}
{"task_id": "Python/160", "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n", "generation": "    if len(operator) == 0:\n        return operand[0]\n    elif len(operator) == 1:\n        return operator[0] + operand[0]\n    elif len(operator) == 2:\n        return operator[0] + operator[1] + operand[0] + operand[1]\n    else:\n        return operator[0] + operator[1] + operand[0] + operand[1]\n\n\ndef _get_operator_and_operand(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator) == 0:\n        return operand[0]\n    elif len(operator) == 1:\n        return operator[0] + operand[0]\n    elif len(operator) == 2:\n        return operator[0] + operator[1] + operand[0] + operand[1]\n    else:\n        return operator[0] + operator[1] + operand[0] + operand[1]\n\n\ndef _get_operator_and_operand_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    if len(operator) == 0:\n        return operand[0]\n    elif len(operator) == 1:\n        return operator[0] + operand[0]\n    elif len(operator) == 2:\n        return operator[0] + operator[1] + operand[0] + operand[1]\n    else:\n        return operator[0] + operator[1] + operand[0] + operand[1]\n\n\ndef _"}
{"task_id": "Python/161", "prompt": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n", "generation": "    if s[i].isalpha():\n        return s[i].upper() + s[i + 1 :].lower()\n    else:\n        return s[i:] + s[:i]\n\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return \"\".join(solve_helper(s))\n\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return \"\".join(solve_helper(s, False))\n\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return \"\".join(solve_helper(s, True))\n\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return \"\".join(solve_helper(s, False))\n\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return \"\".join(solve_helper(s, True))\n\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return \"\".join(solve_helper(s, False))\n\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa"}
{"task_id": "Python/162", "prompt": "\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n", "generation": "    if text:\n        return hashlib.md5(text.encode(\"utf-8\")).hexdigest()\n    else:\n        return None\n\n\ndef get_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text:\n        return hashlib.md5(text.encode(\"utf-8\")).hexdigest()\n    else:\n        return None\n\n\ndef get_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha1('Hello world') == 'a8a0b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7b8c9a8b7c5f7"}
{"task_id": "Python/163", "prompt": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n", "generation": "    return [int(i) for i in str(a) + str(b) if int(i) % 2 == 0]\n\n\ndef generate_integers_in_range(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the integers between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers_in_range(2, 8) => [2, 4, 6, 8]\n    generate_integers_in_range(8, 2) => [2, 4, 6, 8]\n    generate_integers_in_range(10, 14) => []\n    \"\"\"\n    return [int(i) for i in str(a) + str(b) if i >= a and i <= b]\n\n\ndef generate_integers_in_range_with_repetition(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the integers between a\n    and b, in ascending order, with each integer i appearing exactly once.\n\n    For example:\n    generate_integers_in_range_with_repetition(2, 8) => [2, 4, 6, 8]\n    generate_integers_in_range_with_repetition(8, 2) => [2, 4, 6, 8]\n    generate_integers_in_range_with_repetition(10, 14) => []\n    \"\"\"\n    return [int(i) for i in str(a) + str(b) if i in range(a, b + 1)]\n\n\ndef generate_integers_in_range_with_repetition_and_repetition_limit(a, b, limit):\n    \"\"\"\n    Given two positive integers a and b, return the integers between a\n    and b, in ascending order, with each integer i appearing exactly once.\n    The repetition limit indicates how many times a repetition of i is allowed.\n\n    For example:\n    generate_integers_in_range_with_repetition_and_repetition_limit(2, 8, 3) => [2, 4, 6, 8]\n    generate_integers_in_range_with_repetition_and_repetition_limit(8, 2, 3) => [2, 4, 6, 8]\n    generate_integers_in_range_with_repetition_and_repetition_limit(10, 14, 3) => []\n    \"\"\"\n    return [int(i) for i in str(a) + str(b) if i in range(a, b + 1) and limit > 0]\n\n\ndef generate_integers_in_range_with_repetition_and_repetition_limit_and_repetition_index(\n    a, b, limit, index\n):\n    \"\"\"\n    Given two positive integers a and b, return the integers between a\n    and b, in ascending order, with each integer i appearing exactly once.\n    The repetition limit indicates how many times a repetition of i is allowed.\n    The repetition index indicates at which position i is allowed to appear.\n\n    For example:\n    generate_integers_in_range_with_repetition_and_repetition_limit_and_repetition_index(2, 8, 3, 1) => [2, 4, 6, 8]\n    generate_integers_in_range_with_repetition_and_repetition_limit_and_repetition_index(8, 2, 3, 1) => [2, 4, 6, 8]\n    generate_integers_in_range_with_repetition_and_repetition_limit_and_repetition_index(10, 14, 3, 1) => []\n    \"\"\"\n    return [\n        int(i)\n        for i in str(a) + str(b)\n        if i in range(a, b + 1) and limit > 0 and index"}
