{"task_id": "CPP/0", "prompt": "/*\nCheck if in given vector of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n", "generation": "    if(numbers.size()<2)\n        return false;\n    vector<float>::iterator it1=numbers.begin();\n    vector<float>::iterator it2=numbers.begin();\n    it2++;\n    while(it2!=numbers.end()){\n        if(fabs(*it1-*it2)<threshold)\n            return true;\n        it1++;\n        it2++;\n    }\n    return false;\n}\n\nint main(){\n    vector<float> numbers;\n    float threshold;\n    printf(\"Enter threshold: \");\n    scanf(\"%f\", &threshold);\n    printf(\"Enter vector of numbers: \");\n    while(scanf(\"%f\", &numbers.at(numbers.size()-1))!=EOF){\n        numbers.push_back(numbers.at(numbers.size()-1));\n        if(numbers.size()==2)\n            break;\n        printf(\"Enter vector of numbers: \");\n    }\n    printf(\"%s\\n\", has_close_elements(numbers, threshold)?\"true\":\"false\");\n    return 0;\n}\n"}
{"task_id": "CPP/1", "prompt": "/*\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the vector of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n", "generation": "    vector<string> result;\n    int open_count = 0;\n    int close_count = 0;\n    for(int i=0;i<paren_string.size();i++){\n        if(paren_string[i] == '('){\n            open_count++;\n        }\n        else if(paren_string[i] == ')'){\n            close_count++;\n        }\n        else if(paren_string[i] ==''){\n            if(open_count == close_count){\n                result.push_back(\"\");\n            }\n            else{\n                open_count--;\n                close_count--;\n            }\n        }\n        else{\n            result.push_back(paren_string[i]);\n        }\n    }\n    return result;\n}\n\nint main(){\n    string paren_string}
{"task_id": "CPP/2", "prompt": "/*\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n", "generation": "    int i = 0;\n    float result = 0;\n    while(number > 1){\n        number = number/10;\n        i++;\n    }\n    result = number;\n    for(int j = 0; j < i; j++){\n        result = result*10;\n    }\n    return result;\n}\nint main(){\n    float number = 3.5;\n    printf(\"The decimal part of the number is %f\\n\", truncate_number(number));\n    return 0;\n}\n\n/*\n\nTruncate a number to the nearest integer.\n\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the integer part of the number.\n\n>>> truncate_number(3.5)\n3\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint truncate_number(float number){\n    int i = 0;\n    float result = 0;\n    while(number > 1){\n        number = number/10;\n        i++;\n    }\n    result = number;\n    for(int j = 0; j < i; j++){\n        result = result*10;\n    }\n    return result;\n}\nint main(){\n    float number = 3.5;\n    printf(\"The integer part of the number is %d\\n\", truncate_number(number));\n    return 0;\n}\n\n/*\n\nTruncate a number to the nearest integer.\n\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the integer part of the number.\n\n>>> truncate_number(3.5)\n3\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint truncate_number(float number){\n    int i = 0;\n    float result = 0;\n    while(number > 1){\n        number = number/10;\n        i++;\n    }\n    result = number;\n    for(int j = 0; j < i; j++){\n        result = result*10;\n    }\n    return result;\n}\nint main(){\n    float number = 3.5;\n    printf(\"The integer part of the number is %d\\n\", truncate_number(number));\n    return 0;\n}\n\n/*\n\nTruncate a number to the nearest integer.\n\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the integer part of the number.\n\n>>> truncate_number(3.5)\n3\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint truncate_number(float number){\n    int i = 0;\n    float result = 0;\n    while(number > 1){\n        number = number/10;\n        i++;\n    }\n    result = number;\n    for(int j = 0; j < i; j++){\n        result = result*10;\n    }\n    return result;\n}\nint main(){\n    float number = 3.5;\n    printf(\"The integer part of the number is %d\\n\", truncate_number(number));\n    return 0;\n}\n\n/*\n\nTruncate a number to the nearest integer.\n\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the integer part of the number.\n\n>>> truncate_number(3.5)\n3\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace"}
{"task_id": "CPP/3", "prompt": "/*\nYou\"re given a vector of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account falls below zero, and\nat that point function should return true. Otherwise it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n", "generation": "    int balance = 0;\n    for(int i=0; i<operations.size(); i++){\n        balance += operations[i];\n    }\n    if(balance<=0) return true;\n    else return false;\n}\n\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> operations;\n    for(int i=0; i<n; i++){\n        int x;\n        scanf(\"%d\", &x);\n        operations.push_back(x);\n    }\n    if(below_zero(operations)) printf(\"true\\n\");\n    else printf(\"false\\n\");\n    return 0;\n}\n"}
{"task_id": "CPP/4", "prompt": "/*\nFor a given vector of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n", "generation": "    float sum = 0;\n    float mean = 0;\n    for(int i = 0; i < numbers.size(); i++){\n        sum += fabs(numbers[i] - mean);\n    }\n    mean = sum / numbers.size();\n    return mean;\n}\n\nint main(){\n    vector<float> numbers;\n    numbers.push_back(1.0);\n    numbers.push_back(2.0);\n    numbers.push_back(3.0);\n    numbers.push_back(4.0);\n    float mean = mean_absolute_deviation(numbers);\n    printf(\"Mean Absolute Deviation is %f\\n\", mean);\n    return 0;\n}\n\n/*\n\n# Calculate the Mean Absolute Deviation\n\nThe Mean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n    float sum = 0;\n    float mean = 0;\n    for(int i = 0; i < numbers.size(); i++){\n        sum += fabs(numbers[i] - mean);\n    }\n    mean = sum / numbers.size();\n    return mean;\n}\n\nint main(){\n    vector<float> numbers;\n    numbers.push_back(1.0);\n    numbers.push_back(2.0);\n    numbers.push_back(3.0);\n    numbers.push_back(4.0);\n    float mean = mean_absolute_deviation(numbers);\n    printf(\"Mean Absolute Deviation is %f\\n\", mean);\n    return 0;\n}\n\n/*\n\n# Calculate the Mean Absolute Deviation\n\nThe Mean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n    float sum = 0;\n    float mean = 0;\n    for(int i = 0; i < numbers.size(); i++){\n        sum += fabs(numbers[i] - mean);\n    }\n    mean = sum / numbers.size();\n    return mean;\n}\n\nint main(){\n    vector<float> numbers;\n    numbers.push_back(1.0);\n    numbers.push_back(2.0);\n    numbers.push_back(3.0);\n    numbers.push_back(4.0);\n    float mean = mean_absolute_deviation(numbers);\n    printf(\"Mean Absolute Deviation is %f\\n\", mean);\n    return 0;\n}\n\n/*\n\n# Calculate the Mean Absolute Deviation\n\nThe Mean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n    float sum = 0;\n    float mean = 0;\n    for(int i = 0; i < numbers.size(); i++){\n        sum += fabs(numbers[i] - mean);\n    }\n    mean = sum / numbers.size();\n    return mean;\n}\n\nint main(){\n    vector<float> numbers;\n    numbers.push"}
{"task_id": "CPP/5", "prompt": "/*\nInsert a number \"delimeter\" between every two consecutive elements of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n", "generation": "    vector<int> result;\n    int i = 0;\n    while(i < numbers.size()){\n        result.push_back(numbers[i]);\n        if(i < numbers.size() - 1){\n            result.push_back(delimeter);\n        }\n        i++;\n    }\n    return result;\n}\n\nint main(){\n    vector<int> numbers;\n    numbers.push_back(1);\n    numbers.push_back(2);\n    numbers.push_back(3);\n    numbers.push_back(4);\n    numbers.push_back(5);\n    numbers.push_back(6);\n    numbers.push_back(7);\n    numbers.push_back(8);\n    numbers.push_back(9);\n    numbers.push_back(10);\n    numbers.push_back(11);\n    numbers.push_back(12);\n    numbers.push_back(13);\n    numbers.push_back(14);\n    numbers.push_back(15);\n    numbers.push_back(16);\n    numbers.push_back(17);\n    numbers.push_back(18);\n    numbers.push_back(19);\n    numbers.push_back(20);\n    numbers.push_back(21);\n    numbers.push_back(22);\n    numbers.push_back(23);\n    numbers.push_back(24);\n    numbers.push_back(25);\n    numbers.push_back(26);\n    numbers.push_back(27);\n    numbers.push_back(28);\n    numbers.push_back(29);\n    numbers.push_back(30);\n    numbers.push_back(31);\n    numbers.push_back(32);\n    numbers.push_back(33);\n    numbers.push_back(34);\n    numbers.push_back(35);\n    numbers.push_back(36);\n    numbers.push_back(37);\n    numbers.push_back(38);\n    numbers.push_back(39);\n    numbers.push_back(40);\n    numbers.push_back(41);\n    numbers.push_back(42);\n    numbers.push_back(43);\n    numbers.push_back(44);\n    numbers.push_back(45);\n    numbers.push_back(46);\n    numbers.push_back(47);\n    numbers.push_back(48);\n    numbers.push_back(49);\n    numbers.push_back(50);\n    numbers.push_back(51);\n    numbers.push_back(52);\n    numbers.push_back(53);\n    numbers.push_back(54);\n    numbers.push_back(55);\n    numbers.push_back(56);\n    numbers.push_back(57);\n    numbers.push_back(58);\n    numbers.push_back(59);\n    numbers.push_back(60);\n    numbers.push_back(61);\n    numbers.push_back(62);\n    numbers.push_back(63);\n    numbers.push_back(64);\n    numbers.push_back(65);\n    numbers.push_back(66);\n    numbers.push_back(67);\n    numbers.push_back(68);\n    numbers.push_back(69);\n    numbers.push_back(70);\n    numbers.push_back(71);\n    numbers.push_back(72);\n    numbers.push_back(73);\n    numbers.push_back(74);\n    numbers.push_back(75);\n    numbers"}
{"task_id": "CPP/6", "prompt": "/*\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n", "generation": "    vector<int> result;\n    int i=0;\n    int j=0;\n    int level=0;\n    while(i<paren_string.length()){\n        if(paren_string[i]=='('){\n            level++;\n        }\n        else if(paren_string[i]==')'){\n            level--;\n        }\n        if(level==0){\n            result.push_back(i);\n            i++;\n        }\n        i++;\n    }\n    return result;\n}\n\nint main(){\n    string paren_string;\n    getline(cin, paren_string);\n    vector<int> result=parse_nested_parens(paren_string);\n    for(int i=0; i<result.size(); i++){\n        cout<<result[i]<<\" \";\n    }\n    return 0;\n}"}
{"task_id": "CPP/7", "prompt": "/*\nFilter an input vector of strings only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n", "generation": "    vector<string> filtered_strings;\n    for(string s: strings){\n        if(s.find(substring)!= string::npos){\n            filtered_strings.push_back(s);\n        }\n    }\n    return filtered_strings;\n}\nint main(){\n    vector<string> strings = {\"abc\", \"bacd\", \"cde\", \"vector\"};\n    string substring = \"a\";\n    vector<string> filtered_strings = filter_by_substring(strings, substring);\n    for(string s: filtered_strings){\n        cout << s << endl;\n    }\n    return 0;\n}\n\n/*\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> filtered_strings;\n    for(string s: strings){\n        if(s.find(substring)!= string::npos){\n            filtered_strings.push_back(s);\n        }\n    }\n    return filtered_strings;\n}\nint main(){\n    vector<string> strings = {\"abc\", \"bacd\", \"cde\", \"vector\"};\n    string substring = \"a\";\n    vector<string> filtered_strings = filter_by_substring(strings, substring);\n    for(string s: filtered_strings){\n        cout << s << endl;\n    }\n    return 0;\n}\n*/\n\n/*\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> filtered_strings;\n    for(string s: strings){\n        if(s.find(substring)!= string::npos){\n            filtered_strings.push_back(s);\n        }\n    }\n    return filtered_strings;\n}\nint main(){\n    vector<string> strings = {\"abc\", \"bacd\", \"cde\", \"vector\"};\n    string substring = \"a\";\n    vector<string> filtered_strings = filter_by_substring(strings, substring);\n    for(string s: filtered_strings){\n        cout << s << endl;\n    }\n    return 0;\n}\n*/\n\n/*\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> filtered_strings;\n    for(string s: strings){\n        if(s.find(substring)!= string::npos){\n            filtered_strings.push_back(s);\n        }\n    }\n    return filtered_strings;\n}\nint main(){\n    vector<string> strings = {\"abc\", \"bacd\", \"cde\", \"vector\"};\n    string substring = \"a\";\n    vector<string> filtered_strings = filter_by_substring(strings, substring);\n    for(string s: filtered_strings){\n        cout << s << endl;\n    }\n    return 0;\n}\n*/\n\n/*\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> filtered_strings;\n    for(string s: strings){\n        if(s.find(substring)!= string::npos){\n            filtered_strings.push_back(s);\n        }\n    }\n    return filtered_strings;\n}\nint main(){\n    vector<string> strings = {\"abc\", \"bacd\", \"cde\", \"vector\"};\n    string subst"}
{"task_id": "CPP/8", "prompt": "/*\nFor a given vector of integers, return a vector consisting of a sum and a product of all the integers in a vector.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n", "generation": "    vector<int> sum = {0};\n    vector<int> product = {1};\n    for(int i = 0; i < numbers.size(); i++){\n        sum.push_back(sum[i] + numbers[i]);\n        product.push_back(product[i] * numbers[i]);\n    }\n    return sum;\n}\nint main(){\n    vector<int> numbers = {1, 2, 3, 4};\n    vector<int> sum = sum_product(numbers);\n    for(int i = 0; i < sum.size(); i++){\n        printf(\"%d \", sum[i]);\n    }\n    printf(\"\\n\");\n    for(int i = 0; i < product.size(); i++){\n        printf(\"%d \", product[i]);\n    }\n    return 0;\n}\n\n/*\nGiven a vector of integers, return a vector consisting of a sum and a product of all the integers in a vector.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n    vector<int> sum = {0};\n    vector<int> product = {1};\n    for(int i = 0; i < numbers.size(); i++){\n        sum.push_back(sum[i] + numbers[i]);\n        product.push_back(product[i] * numbers[i]);\n    }\n    return product;\n}\nint main(){\n    vector<int> numbers = {1, 2, 3, 4};\n    vector<int> product = sum_product(numbers);\n    for(int i = 0; i < product.size(); i++){\n        printf(\"%d \", product[i]);\n    }\n    return 0;\n}\n\n/*\nGiven a vector of integers, return a vector consisting of a sum and a product of all the integers in a vector.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n    vector<int> sum = {0};\n    vector<int> product = {1};\n    for(int i = 0; i < numbers.size(); i++){\n        sum.push_back(sum[i] + numbers[i]);\n        product.push_back(product[i] * numbers[i]);\n    }\n    return sum;\n}\nint main(){\n    vector<int> numbers = {1, 2, 3, 4};\n    vector<int> sum = sum_product(numbers);\n    for(int i = 0; i < sum.size(); i++){\n        printf(\"%d \", sum[i]);\n    }\n    return 0;\n}\n\n/*\nGiven a vector of integers, return a vector consisting of a sum and a product of all the integers in a vector.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n    vector<int> sum = {0};\n    vector<int> product = {1};\n    for(int i = 0; i < numbers.size(); i++){\n        sum.push_back(sum"}
{"task_id": "CPP/9", "prompt": "/*\nFrom a given vector of integers, generate a vector of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n", "generation": "    vector<int> max_so_far;\n    max_so_far.push_back(numbers[0]);\n    for(int i=1;i<numbers.size();i++){\n        if(numbers[i]>max_so_far[max_so_far.size()-1]){\n            max_so_far.push_back(numbers[i]);\n        }else{\n            max_so_far[max_so_far.size()-1]=numbers[i];\n        }\n    }\n    return max_so_far;\n}\nint main(){\n    vector<int> numbers;\n    numbers.push_back(1);\n    numbers.push_back(2);\n    numbers.push_back(3);\n    numbers.push_back(2);\n    numbers.push_back(3);\n    numbers.push_back(4);\n    numbers.push_back(2);\n    vector<int> max_so_far=rolling_max(numbers);\n    for(int i=0;i<max_so_far.size();i++){\n        printf(\"%d \",max_so_far[i]);\n    }\n    return 0;\n}\n"}
{"task_id": "CPP/10", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortest palindrome that begins with a supplied string. \n    Algorithm idea is simple: - Find the longest postfix of supplied string that is a palindrome. \n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n", "generation": "    string s(str.rbegin(),str.rend());\n    int i=0;\n    while(i<s.size()){\n        if(is_palindrome(s.substr(0,i+1)))){\n            return s.substr(0,i+1) + s.substr(i+1,s.size()-i-1);\n        }\n        i++;\n    }\n    return s;\n}\nint main(){\n    string str;\n    cout<<\"Enter a string: \";\n    cin>>str;\n    cout<<make_palindrome(str)<<endl;\n    return 0;\n}\n\"\"\"\n\n# Write a program to find the longest palindrome in a given string.\n# Input: cat\n# Output: catac\n\n\"\"\"\n#!/usr/bin/python3\n# -*- coding: utf-8 -*-\n# This program is a Python program.\n# It is a simple program to find the longest palindrome in a given string.\n# Input: cat\n# Output: catac\n\nimport sys\n\ndef is_palindrome(str):\n    #Test if given string is a palindrome \n    string = str.lower()\n    string = string.replace(\" \",\"\")\n    string = string.replace(\"\\n\",\"\")\n    string = string.replace(\"\\t\",\"\")\n    string = string.replace(\"\\r\",\"\")\n    return string==string[::-1]\n\ndef make_palindrome(str):\n    #Find the longest palindrome that begins with a supplied string. \n    string = str.lower()\n    string = string.replace(\" \",\"\")\n    string = string.replace(\"\\n\",\"\")\n    string = string.replace(\"\\t\",\"\")\n    string = string.replace(\"\\r\",\"\")\n    i=0\n    while(i<len(string)):\n        if(is_palindrome(string.substr(0,i+1)))){\n            return string.substr(0,i+1) + string.substr(i+1,len(string)-i-1);\n        }\n        i++;\n    return string;\n\ndef main():\n    string = sys.argv[1]\n    print(make_palindrome(string))\n\nif __name__ == '__main__':\n    main()\n\"\"\"\n\n# Write a program to find the longest palindrome in a given string.\n# Input: cat\n# Output: catac\n\"\"\"\n#!/usr/bin/python3\n# -*- coding: utf-8 -*-\n# This program is a Python program.\n# It is a simple program to find the longest palindrome in a given string.\n# Input: cat\n\nimport sys\n\ndef is_palindrome(str):\n    #Test if given string is a palindrome \n    string = str.lower()\n    string = string.replace(\" \",\"\")\n    string = string.replace(\"\\n\",\"\")\n    string = string.replace(\"\\t\",\"\")\n    string = string.replace(\"\\r\",\"\")\n    return string==string[::-1]\n\ndef make_palindrome(str):\n    #Find the longest palindrome that begins with a supplied string. \n    string = str.lower()\n    string = string.replace(\" \",\"\")\n    string = string.replace(\"\\n\",\"\")\n    string = string.replace(\"\\t\",\"\")\n    string = string.replace(\"\\r"}
{"task_id": "CPP/11", "prompt": "/*\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n", "generation": "    string result=\"\";\n    for(int i=0;i<a.length();i++){\n        if(a[i]==b[i]){\n            result+=\"0\";\n        }else{\n            result+=\"1\";\n        }\n    }\n    return result;\n}\nint main(){\n    string a,b;\n    cin>>a>>b;\n    cout<<string_xor(a,b)<<endl;\n    return 0;\n}\n/*\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n    string result=\"\";\n    for(int i=0;i<a.length();i++){\n        if(a[i]==b[i]){\n            result+=\"0\";\n        }else{\n            result+=\"1\";\n        }\n    }\n    return result;\n}\nint main(){\n    string a,b;\n    cin>>a>>b;\n    cout<<string_xor(a,b)<<endl;\n    return 0;\n}\n*/\n/*\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n    string result=\"\";\n    for(int i=0;i<a.length();i++){\n        if(a[i]==b[i]){\n            result+=\"0\";\n        }else{\n            result+=\"1\";\n        }\n    }\n    return result;\n}\nint main(){\n    string a,b;\n    cin>>a>>b;\n    cout<<string_xor(a,b)<<endl;\n    return 0;\n}\n*/\n/*\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n    string result=\"\";\n    for(int i=0;i<a.length();i++){\n        if(a[i]==b[i]){\n            result+=\"0\";\n        }else{\n            result+=\"1\";\n        }\n    }\n    return result;\n}\nint main(){\n    string a,b;\n    cin>>a>>b;\n    cout<<string_xor(a,b)<<endl;\n    return 0;\n}\n*/\n/*\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n    string result=\"\";\n    for(int i=0;i<a.length();i++){\n        if(a[i]==b[i]){\n            result+=\"0\";\n        }else{\n            result+=\"1\";\n        }\n    }\n    return result;\n}\nint main(){\n    string a,b;\n    cin>>a>>b;\n    cout<<string_xor(a,b)<<endl;\n    return 0;\n}\n*/\n/*\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n    string result=\"\";\n    for(int i=0;i<a.length();i++){\n        if(a[i]==b[i]){\n            result+=\"0\";\n        }else{\n            result+=\"1\";\n        }\n    }\n    return result;\n}\nint main(){\n    string a,b;\n    cin>>a>>b;\n    cout<<string_xor(a,b)<<endl;\n    return 0;\n}\n*/\n/*\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n    string result=\"\";\n    for(int i=0;i<a.length();i"}
{"task_id": "CPP/12", "prompt": "/*\nOut of vector of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input vector is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n", "generation": "    string longest = \"\";\n    for(int i=0; i<strings.size(); i++){\n        if(longest.length() < strings[i].length()){\n            longest = strings[i];\n        }\n    }\n    return longest;\n}\nint main(){\n    vector<string> strings;\n    strings.push_back(\"a\");\n    strings.push_back(\"b\");\n    strings.push_back(\"c\");\n    string longest = longest(strings);\n    printf(\"%s\\n\", longest.c_str());\n    return 0;\n}\n"}
{"task_id": "CPP/13", "prompt": "/*\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n", "generation": "    int temp;\n    if(a==0 || b==0){\n        return 0;\n    }\n    while(a!=b){\n        if(a>b){\n            a=a-b;\n        }else{\n            b=b-a;\n        }\n    }\n    return a;\n}\nint main(){\n    int a, b;\n    printf(\"Enter two numbers: \");\n    scanf(\"%d %d\", &a, &b);\n    printf(\"The greatest common divisor of %d and %d is %d\\n\", a, b, greatest_common_divisor(a, b));\n    return 0;\n}\n"}
{"task_id": "CPP/14", "prompt": "/*\nReturn vector of all prefixes from shortest to longest of the input string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n", "generation": "    vector<string> prefixes;\n    int n = str.length();\n    for(int i=1; i<=n; i++){\n        string prefix = str.substr(0,i);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\n\nint main(){\n    string str;\n    getline(cin, str);\n    vector<string> prefixes = all_prefixes(str);\n    for(string s: prefixes){\n        cout << s << endl;\n    }\n    return 0;\n}\n"}
{"task_id": "CPP/15", "prompt": "/*\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n", "generation": "    string s;\n    int i;\n    for(i=0;i<n;i++){\n        s+=to_string(i);\n    }\n    return s;\n}\nint main(){\n    int n;\n    printf(\"Enter the number of elements in the sequence: \");\n    scanf(\"%d\",&n);\n    printf(\"The sequence is: %s\\n\",string_sequence(n).c_str());\n    return 0;\n}\n"}
{"task_id": "CPP/16", "prompt": "/*\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n", "generation": "    int distinct_characters = 0;\n    vector<int> count(256,0);\n    for(int i=0;i<str.length();i++){\n        count[str[i]]++;\n    }\n    for(int i=0;i<256;i++){\n        if(count[i]>1){\n            distinct_characters++;\n        }\n    }\n    return distinct_characters;\n}\nint main(){\n    string str;\n    getline(cin,str);\n    printf(\"%d\\n\",count_distinct_characters(str));\n    return 0;\n}\n"}
{"task_id": "CPP/17", "prompt": "/*\nInput to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return vector of integers corresponding to how many beats does each\nnot last.\n\nHere is a legend:\n\"o\" - whole note, lasts four beats\n\"o|\" - half note, lasts two beats\n\".|\" - quater note, lasts one beat\n\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){ \n", "generation": "    vector<int> result;\n    int i = 0;\n    while(i < music_string.length()){\n        if(music_string[i] == 'o'){\n            i++;\n            result.push_back(4);\n        }\n        else if(music_string[i] == 'o'){\n            i++;\n            result.push_back(2);\n        }\n        else if(music_string[i] == '.'){\n            i++;\n            result.push_back(1);\n        }\n        else if(music_string[i] == '|'){\n            i++;\n            result.push_back(2);\n        }\n        else if(music_string[i] == '|'){\n            i++;\n            result.push_back(1);\n        }\n        else if(music_string[i] == '.'){\n            i++;\n            result.push_back(1);\n        }\n        else{\n            i++;\n        }\n    }\n    return result;\n}\n\nint main(){\n    string music_string;\n    getline(cin, music_string);\n    vector<int> result = parse_music(music_string);\n    for(int i = 0; i < result.size(); i++){\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}"}
{"task_id": "CPP/18", "prompt": "/*\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n", "generation": "    int count = 0;\n    int n = str.length();\n    int m = substring.length();\n    int i=0,j=0;\n    while(i<n && j<m){\n        if(str[i] == substring[j]){\n            i++;\n            j++;\n            count++;\n        }\n        else{\n            i++;\n        }\n    }\n    return count;\n}\nint main(){\n    string str,substring;\n    cin>>str>>substring;\n    cout<<how_many_times(str,substring)<<endl;\n    return 0;\n}\n"}
{"task_id": "CPP/19", "prompt": "/*\nInput is a space-delimited string of numberals from \"zero\" to \"nine\".\nValid choices are \"zero\", \"one\", 'two\", 'three\", \"four\", \"five\", 'six\", 'seven\", \"eight\" and \"nine\".\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n", "generation": "    map<char, int> m;\n    for(int i=0;i<numbers.size();i++){\n        m[numbers[i]]++;\n    }\n    string result=\"\";\n    for(auto it=m.begin();it!=m.end();it++){\n        result+=it->first;\n        result+=to_string(it->second);\n    }\n    return result;\n}\n\nint main(){\n    string numbers=\"zero one two three four five six seven eight nine\";\n    string result=sort_numbers(numbers);\n    printf(\"%s\\n\",result.c_str());\n    return 0;\n}\n\n/*\n\n// \u4f7f\u7528map\u5b9e\u73b0\u5b57\u7b26\u4e32\u6392\u5e8f\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n    map<char, int> m;\n    for(int i=0;i<numbers.size();i++){\n        m[numbers[i]]++;\n    }\n    string result=\"\";\n    for(auto it=m.begin();it!=m.end();it++){\n        result+=it->first;\n        result+=to_string(it->second);\n    }\n    return result;\n}\n\nint main(){\n    string numbers=\"zero one two three four five six seven eight nine\";\n    string result=sort_numbers(numbers);\n    printf(\"%s\\n\",result.c_str());\n    return 0;\n}\n\n*/\n\n/*\n\n// \u4f7f\u7528map\u5b9e\u73b0\u5b57\u7b26\u4e32\u6392\u5e8f\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n    map<char, int> m;\n    for(int i=0;i<numbers.size();i++){\n        m[numbers[i]]++;\n    }\n    string result=\"\";\n    for(auto it=m.begin();it!=m.end();it++){\n        result+=it->first;\n        result+=to_string(it->second);\n    }\n    return result;\n}\n\nint main(){\n    string numbers=\"zero one two three four five six seven eight nine\";\n    string result=sort_numbers(numbers);\n    printf(\"%s\\n\",result.c_str());\n    return 0;\n}\n\n*/\n\n/*\n\n// \u4f7f\u7528map\u5b9e\u73b0\u5b57\u7b26\u4e32\u6392\u5e8f\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n    map<char, int> m;\n    for(int i=0;i<numbers.size();i++){\n        m[numbers[i]]++;\n    }\n    string result=\"\";\n    for(auto it=m.begin();it!=m.end();it++){\n        result+=it->first;\n        result+=to_string(it->second);\n    }\n    return result;\n}\n\nint main(){\n    string numbers=\"zero one two three four five six seven eight nine\";\n    string result=sort_numbers(numbers);\n    printf(\"%s\\n\",result.c_str());\n    return 0;\n}\n\n*/\n\n/*\n\n// \u4f7f\u7528map\u5b9e\u73b0\u5b57\u7b26\u4e32\u6392\u5e8f\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n    map<char, int> m;\n    for(int i"}
{"task_id": "CPP/20", "prompt": "/*\nFrom a supplied vector of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n", "generation": "    vector<float> closest_elements;\n    float closest_distance = 0;\n    for(int i=0; i<numbers.size(); i++){\n        for(int j=i+1; j<numbers.size(); j++){\n            float distance = sqrt(pow(numbers[i]-numbers[j],2));\n            if(distance<closest_distance){\n                closest_distance = distance;\n                closest_elements.clear();\n                closest_elements.push_back(numbers[i]);\n                closest_elements.push_back(numbers[j]);\n            }\n        }\n    }\n    return closest_elements;\n}\n\nint main(){\n    vector<float> numbers;\n    numbers.push_back(1.0);\n    numbers.push_back(2.0);\n    numbers.push_back(3.0);\n    numbers.push_back(4.0);\n    numbers.push_back(5.0);\n    numbers.push_back(2.2);\n    vector<float> closest_elements = find_closest_elements(numbers);\n    for(int i=0; i<closest_elements.size(); i++){\n        printf(\"%f \", closest_elements[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n\n/*\n\n// Find the closest element to each other\n// Given a vector of numbers, find and return two that are the closest to each other and return them in order (smaller number, larger number).\n// The closest element to each other is the element that is the closest to the mean of the two numbers.\n// The mean of two numbers is defined as the sum of the numbers divided by their length.\n// If the two numbers are equal, return the smaller number.\n// If the two numbers are equal, return the larger number.\n// If the two numbers are equal, return the smaller number.\n// If the two numbers are equal, return the larger number.\n// If the two numbers are equal, return the smaller number.\n// If the two numbers are equal, return the larger number.\n// If the two numbers are equal, return the smaller number.\n// If the two numbers are equal, return the larger number.\n// If the two numbers are equal, return the smaller number.\n// If the two numbers are equal, return the larger number.\n// If the two numbers are equal, return the smaller number.\n// If the two numbers are equal, return the larger number.\n// If the two numbers are equal, return the smaller number.\n// If the two numbers are equal, return the larger number.\n// If the two numbers are equal, return the smaller number.\n// If the two numbers are equal, return the larger number.\n// If the two numbers are equal, return the smaller number.\n// If the two numbers are equal, return the larger number.\n// If the two numbers are equal, return the smaller number.\n// If the two numbers are equal, return the larger number.\n// If the two numbers are equal, return the smaller number.\n// If the two numbers are equal, return the larger number.\n// If the two numbers are equal, return the smaller number.\n// If the two numbers are equal, return the larger number.\n// If the two numbers are equal, return the smaller number.\n// If the two numbers are equal, return the larger number.\n// If the two numbers are equal, return the smaller number.\n// If the two numbers are equal, return the larger number.\n// If the two numbers are equal, return the smaller number.\n// If the"}
{"task_id": "CPP/21", "prompt": "/*\nGiven vector of numbers (of at least two elements), apply a linear transform to that vector,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n", "generation": "    float min = *min_element(numbers.begin(), numbers.end());\n    float max = *max_element(numbers.begin(), numbers.end());\n    vector<float> rescaled;\n    for(int i=0; i<numbers.size(); i++){\n        rescaled.push_back(numbers[i] - min);\n    }\n    float range = max - min;\n    for(int i=0; i<numbers.size(); i++){\n        rescaled[i] = rescaled[i] / range;\n    }\n    return rescaled;\n}\nint main(){\n    vector<float> numbers;\n    for(int i=0; i<5; i++){\n        float number;\n        scanf(\"%f\", &number);\n        numbers.push_back(number);\n    }\n    vector<float> rescaled = rescale_to_unit(numbers);\n    for(int i=0; i<rescaled.size(); i++){\n        printf(\"%f \", rescaled[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}"}
{"task_id": "CPP/22", "prompt": "/*\nFilter given vector of any python values only for integers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n", "generation": "    vector<int> result;\n    for(list_any::iterator it=values.begin(); it!=values.end(); ++it){\n        if(boost::any_cast<int>(*it)!= 0){\n            result.push_back(boost::any_cast<int>(*it));\n        }\n    }\n    return result;\n}\nint main(){\n    list_any values;\n    values.push_back(3.14);\n    values.push_back(5);\n    values.push_back(1);\n    values.push_back(2);\n    values.push_back(\"abc\");\n    values.push_back({});\n    values.push_back({});\n    vector<int> result = filter_integers(values);\n    for(vector<int>::iterator it=result.begin(); it!=result.end(); ++it){\n        printf(\"%d \", *it);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n"}
{"task_id": "CPP/23", "prompt": "/*\nReturn length of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n", "generation": "    int len = 0;\n    for(int i = 0; i < str.length(); i++){\n        len++;\n    }\n    return len;\n}\nint main(){\n    string str = \"abc\";\n    printf(\"Length of given string is %d\\n\", strlen(str));\n    return 0;\n}\n/*\n#include<stdio.h>\n#include<string.h>\nusing namespace std;\nint strlen(char *str){\n    int len = 0;\n    while(*str!= '\\0'){\n        len++;\n        str++;\n    }\n    return len;\n}\nint main(){\n    char str[] = \"abc\";\n    printf(\"Length of given string is %d\\n\", strlen(str));\n    return 0;\n}\n*/\n/*\n#include<stdio.h>\n#include<string.h>\nusing namespace std;\nint strlen(char *str){\n    int len = 0;\n    while(*str!= '\\0'){\n        len++;\n        str++;\n    }\n    return len;\n}\nint main(){\n    char str[] = \"abc\";\n    printf(\"Length of given string is %d\\n\", strlen(str));\n    return 0;\n}\n*/\n/*\n#include<stdio.h>\n#include<string.h>\nusing namespace std;\nint strlen(char *str){\n    int len = 0;\n    while(*str!= '\\0'){\n        len++;\n        str++;\n    }\n    return len;\n}\nint main(){\n    char str[] = \"abc\";\n    printf(\"Length of given string is %d\\n\", strlen(str));\n    return 0;\n}\n*/\n/*\n#include<stdio.h>\n#include<string.h>\nusing namespace std;\nint strlen(char *str){\n    int len = 0;\n    while(*str!= '\\0'){\n        len++;\n        str++;\n    }\n    return len;\n}\nint main(){\n    char str[] = \"abc\";\n    printf(\"Length of given string is %d\\n\", strlen(str));\n    return 0;\n}\n*/\n/*\n#include<stdio.h>\n#include<string.h>\nusing namespace std;\nint strlen(char *str){\n    int len = 0;\n    while(*str!= '\\0'){\n        len++;\n        str++;\n    }\n    return len;\n}\nint main(){\n    char str[] = \"abc\";\n    printf(\"Length of given string is %d\\n\", strlen(str));\n    return 0;\n}\n*/\n/*\n#include<stdio.h>\n#include<string.h>\nusing namespace std;\nint strlen(char *str){\n    int len = 0;\n    while(*str!= '\\0'){\n        len++;\n        str++;\n    }\n    return len;\n}\nint main(){\n    char str[] = \"abc\";\n    printf(\"Length of given string is %d\\n\", strlen(str));\n    return 0;\n}\n*/\n/*\n#include<stdio.h>\n#include<string.h>\nusing namespace std;\nint strlen(char *str){\n    int len = 0;\n    while(*str!= '\\0'){\n        len++;\n        str++;\n    }\n    return len;\n}\nint main(){\n    char str[] = \"abc\";\n    printf(\"Length of given string is %d\\n\", strlen(str));\n    return 0;\n}\n*/\n/*\n#include<stdio.h>\n#include<string.h>\nusing namespace std;\nint strlen(char *str){\n    int len = 0;\n    while(*str!= '\\0'){\n        len++;\n        str++;\n    }\n    return len;\n}\nint main(){\n    char str[] = \"abc\";\n    printf(\"Length of given string is %d\\n\", strlen(str));\n    return 0;\n}\n*/\n/*\n#include<stdio.h>\n#"}
{"task_id": "CPP/24", "prompt": "/*\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n", "generation": "    int i,j,k,l,m,p,q,r,s,t,u,v,w,x,y,z,tot,max;\n    max=0;\n    for(i=1;i<=n;i++){\n        tot=0;\n        for(j=1;j<=i;j++){\n            if(i%j==0){\n                tot++;\n            }\n        }\n        if(tot>max){\n            max=tot;\n            k=i;\n        }\n    }\n    return k;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",largest_divisor(n));\n    return 0;\n}\n/*\n\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n    int i,j,k,l,m,p,q,r,s,t,u,v,w,x,y,z,tot,max;\n    max=0;\n    for(i=1;i<=n;i++){\n        tot=0;\n        for(j=1;j<=i;j++){\n            if(i%j==0){\n                tot++;\n            }\n        }\n        if(tot>max){\n            max=tot;\n            k=i;\n        }\n    }\n    return k;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",largest_divisor(n));\n    return 0;\n}\n*/\n/*\n\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n    int i,j,k,l,m,p,q,r,s,t,u,v,w,x,y,z,tot,max;\n    max=0;\n    for(i=1;i<=n;i++){\n        tot=0;\n        for(j=1;j<=i;j++){\n            if(i%j==0){\n                tot++;\n            }\n        }\n        if(tot>max){\n            max=tot;\n            k=i;\n        }\n    }\n    return k;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",largest_divisor(n));\n    return 0;\n}\n*/\n/*\n\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n    int i,j,k,l,m,p,q,r,s,t,u,v,w,x,y,z,tot,max;\n    max=0;\n    for(i=1;i<=n;i++){\n        tot=0;\n        for(j=1;j<=i;j++){\n            if(i%j==0){\n                tot++;\n            }\n        }\n        if(tot>max){\n            max=tot;\n            k=i;\n        }\n    }\n    return k;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",largest_divisor(n));\n    return 0;\n}\n*/\n/*\n\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n    int i,j,k,l,m,p,q,r,s,t,u,v,w,x,y,z,tot,max;\n    max=0;\n    for(i=1;i<=n;i++){\n        tot=0;\n        for(j=1;j<=i;j++){\n          "}
{"task_id": "CPP/25", "prompt": "/*\nReturn vector of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n", "generation": "    vector<int> factors;\n    int i=2;\n    while(n>1){\n        if(n%i==0){\n            factors.push_back(i);\n            n=n/i;\n        }\n        else{\n            i++;\n        }\n    }\n    return factors;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> factors=factorize(n);\n    for(int i=0;i<factors.size();i++){\n        printf(\"%d \",factors[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n"}
{"task_id": "CPP/26", "prompt": "/*\nFrom a vector of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n", "generation": "    vector<int> result;\n    for(int i=0; i<numbers.size(); i++){\n        if(result.empty() || result.back()!= numbers[i]){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\nint main(){\n    vector<int> numbers = {1, 2, 3, 2, 4};\n    vector<int> result = remove_duplicates(numbers);\n    for(int i=0; i<result.size(); i++){\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n\n/*\nGiven a sorted array of integers, remove the duplicates in place such that each element appear only once and return the new length.\nDo not allocate extra space for another array, you must do this in place with constant memory.\nFor example,\nGiven input array nums = [1,1,2],\nYour function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn't matter what you leave beyond the new length.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n    vector<int> result;\n    for(int i=0; i<numbers.size(); i++){\n        if(result.empty() || result.back()!= numbers[i]){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\nint main(){\n    vector<int> numbers = {1, 1, 2};\n    vector<int> result = remove_duplicates(numbers);\n    for(int i=0; i<result.size(); i++){\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n\n/*\nGiven an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well.\nFor example, the input [3, 4, -1, 1] should give 2. The input [1, 2, 0] should give 3.\nYou can modify the input array in-place.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> first_missing_positive(vector<int> numbers){\n    vector<int> result;\n    for(int i=0; i<numbers.size(); i++){\n        while(numbers[i] > 0 && numbers[i] <= numbers.size() && numbers[numbers[i] - 1]!= numbers[i]){\n            swap(numbers[i], numbers[numbers[i] - 1]);\n        }\n    }\n    for(int i=0; i<numbers.size(); i++){\n        if(numbers[i]!= i + 1){\n            result.push_back(i + 1);\n        }\n    }\n    return result;\n}\nint main(){\n    vector<int> numbers = {3, 4, -1, 1};\n    vector<int> result = first_missing_positive(numbers);\n    for(int i=0; i<result.size(); i++){\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n\n/*\nGiven an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well.\nFor example, the input [3, 4, -1, 1] should give 2. The input [1, 2, 0]"}
{"task_id": "CPP/27", "prompt": "/*\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring filp_case(string str){\n", "generation": "    int i;\n    for(i=0;i<str.length();i++){\n        if(str[i]>='a' && str[i]<='z'){\n            str[i]=(str[i]-'a'+'A')%26+'a';\n        }\n        else if(str[i]>='A' && str[i]<='Z'){\n            str[i]=(str[i]-'A'+'a')%26+'A';\n        }\n    }\n    return str;\n}\nint main(){\n    string str;\n    getline(cin,str);\n    cout<<filp_case(str);\n    return 0;\n}\n"}
{"task_id": "CPP/28", "prompt": "/*\nConcatenate vector of strings into a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n", "generation": "    string result = \"\";\n    for(int i = 0; i < strings.size(); i++){\n        result += strings[i];\n    }\n    return result;\n}\nint main(){\n    vector<string> strings;\n    strings.push_back(\"a\");\n    strings.push_back(\"b\");\n    strings.push_back(\"c\");\n    cout << concatenate(strings) << endl;\n    return 0;\n}\n\n/*\n\n// vector of strings into a single string\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n    string result = \"\";\n    for(int i = 0; i < strings.size(); i++){\n        result += strings[i];\n    }\n    return result;\n}\nint main(){\n    vector<string> strings;\n    strings.push_back(\"a\");\n    strings.push_back(\"b\");\n    strings.push_back(\"c\");\n    cout << concatenate(strings) << endl;\n    return 0;\n}\n\n*/\n\n/*\n\n// vector of strings into a single string\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n    string result = \"\";\n    for(int i = 0; i < strings.size(); i++){\n        result += strings[i];\n    }\n    return result;\n}\nint main(){\n    vector<string> strings;\n    strings.push_back(\"a\");\n    strings.push_back(\"b\");\n    strings.push_back(\"c\");\n    cout << concatenate(strings) << endl;\n    return 0;\n}\n\n*/\n\n/*\n\n// vector of strings into a single string\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n    string result = \"\";\n    for(int i = 0; i < strings.size(); i++){\n        result += strings[i];\n    }\n    return result;\n}\nint main(){\n    vector<string> strings;\n    strings.push_back(\"a\");\n    strings.push_back(\"b\");\n    strings.push_back(\"c\");\n    cout << concatenate(strings) << endl;\n    return 0;\n}\n\n*/\n\n/*\n\n// vector of strings into a single string\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n    string result = \"\";\n    for(int i = 0; i < strings.size(); i++){\n        result += strings[i];\n    }\n    return result;\n}\nint main(){\n    vector<string> strings;\n    strings.push_back(\"a\");\n    strings.push_back(\"b\");\n    strings.push_back(\"c\");\n    cout << concatenate(strings) << endl;\n    return 0;\n}\n\n*/\n\n/*\n\n// vector of strings into a single string\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n    string result = \"\";\n    for(int i = 0; i < strings.size(); i++){\n        result += strings[i];\n    }\n    return result;\n}\nint main(){\n    vector<string> strings;\n    strings.push_back(\"a\");\n    strings.push_back(\"b\");\n    strings.push_back(\"c\");\n    cout << concatenate(strings) << endl;\n    return 0;\n}\n\n*/\n\n/*\n\n// vector of strings into a single string\n#include<stdio.h>\n#include<vector>\n#"}
{"task_id": "CPP/29", "prompt": "/*\nFilter an input vector of strings only for ones that start with a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n", "generation": "    vector<string> result;\n    for(string s: strings){\n        if(s.find(prefix) == 0){\n            result.push_back(s);\n        }\n    }\n    return result;\n}\n\nint main(){\n    vector<string> strings = {\"abc\", \"bcd\", \"cde\", \"vector\"};\n    string prefix = \"a\";\n    vector<string> result = filter_by_prefix(strings, prefix);\n    for(string s: result){\n        cout << s << endl;\n    }\n    return 0;\n}"}
{"task_id": "CPP/30", "prompt": "/*\nReturn only positive numbers in the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n", "generation": "    vector<float> positive;\n    for(int i=0;i<l.size();i++){\n        if(l[i]>0){\n            positive.push_back(l[i]);\n        }\n    }\n    return positive;\n}\n\nint main(){\n    vector<float> l;\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(4);\n    l.push_back(5);\n    l.push_back(6);\n    vector<float> positive = get_positive(l);\n    for(int i=0;i<positive.size();i++){\n        printf(\"%f\\n\",positive[i]);\n    }\n    return 0;\n}\n"}
{"task_id": "CPP/31", "prompt": "/*\nReturn true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n", "generation": "    if(n==1) return false;\n    if(n==2) return true;\n    if(n%2==0) return false;\n    for(long long i=3;i<=n/2;i+=2){\n        if(n%i==0) return false;\n    }\n    return true;\n}\nint main(){\n    long long n;\n    while(scanf(\"%lld\",&n)!=EOF){\n        if(is_prime(n)) printf(\"%lld is prime.\\n\",n);\n        else printf(\"%lld is not prime.\\n\",n);\n    }\n    return 0;\n}\n"}
{"task_id": "CPP/32", "prompt": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n    */\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    /*\n    xs are coefficients of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only only zero point, even if there are many. \n    Moreover, find_zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n", "generation": "    double x=0;\n    double y=0;\n    double z=0;\n    double eps=1e-6;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        if (xs[i]!=0)\n        {\n            x=xs[i];\n            y=poly(xs,x);\n            z=poly(xs,x+eps);\n            if (y*z<0)\n            {\n                return x;\n            }\n        }\n    }\n    return 0;\n}\n\nint main(){\n    vector<double> xs;\n    vector<double> ys;\n    vector<double> zs;\n    vector<double> xs_new;\n    vector<double> ys_new;\n    vector<double> zs_new;\n    double x;\n    double y;\n    double z;\n    double eps=1e-6;\n    int i;\n    int n=0;\n    int n_new=0;\n    int n_new_2=0;\n    int n_new_3=0;\n    int n_new_4=0;\n    int n_new_5=0;\n    int n_new_6=0;\n    int n_new_7=0;\n    int n_new_8=0;\n    int n_new_9=0;\n    int n_new_10=0;\n    int n_new_11=0;\n    int n_new_12=0;\n    int n_new_13=0;\n    int n_new_14=0;\n    int n_new_15=0;\n    int n_new_16=0;\n    int n_new_17=0;\n    int n_new_18=0;\n    int n_new_19=0;\n    int n_new_20=0;\n    int n_new_21=0;\n    int n_new_22=0;\n    int n_new_23=0;\n    int n_new_24=0;\n    int n_new_25=0;\n    int n_new_26=0;\n    int n_new_27=0;\n    int n_new_28=0;\n    int n_new_29=0;\n    int n_new_30=0;\n    int n_new_31=0;\n    int n_new_32=0;\n    int n_new_33=0;\n    int n_new_34=0;\n    int n_new_35=0;\n    int n_new_36=0;\n    int n_new_37=0;\n    int n_new_38=0;\n    int n_new_39=0;\n    int n_new_40=0;\n    "}
{"task_id": "CPP/33", "prompt": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n", "generation": "    vector<int> l_prime;\n    for(int i=0;i<l.size();i++){\n        if(l[i]%3==0){\n            l_prime.push_back(l[i]);\n        }\n    }\n    for(int i=0;i<l.size();i++){\n        if(l[i]%3!=0){\n            l_prime.push_back(l[i]);\n        }\n    }\n    sort(l_prime.begin(),l_prime.end());\n    return l_prime;\n}\nint main(){\n    vector<int> l;\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    l.push_back(4);\n    l.push_back(5);\n    l.push_back(6);\n    l.push_back(7);\n    l.push_back(8);\n    l.push_back(9);\n    l.push_back(10);\n    vector<int> l_prime=sort_third(l);\n    for(int i=0;i<l_prime.size();i++){\n        printf(\"%d \",l_prime[i]);\n    }\n    return 0;\n}\n"}
{"task_id": "CPP/34", "prompt": "/*\nReturn sorted unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n", "generation": "    vector<int> v;\n    for(int i=0;i<l.size();i++){\n        if(find(v.begin(),v.end(),l[i])==v.end()){\n            v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main(){\n    vector<int> v;\n    v.push_back(5);\n    v.push_back(3);\n    v.push_back(5);\n    v.push_back(2);\n    v.push_back(3);\n    v.push_back(3);\n    v.push_back(9);\n    v.push_back(0);\n    v.push_back(123);\n    vector<int> v1=unique(v);\n    for(int i=0;i<v1.size();i++){\n        printf(\"%d \",v1[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n"}
{"task_id": "CPP/35", "prompt": "/*\nReturn maximum element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n", "generation": "    float max=l[0];\n    for(int i=0;i<l.size();i++){\n        if(l[i]>max){\n            max=l[i];\n        }\n    }\n    return max;\n}\nint main(){\n    vector<float> l;\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    printf(\"%f\\n\",max_element(l));\n    return 0;\n}\n"}
{"task_id": "CPP/36", "prompt": "/*\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n", "generation": "    int i;\n    for(i=1;i<=n;i++){\n        if(i%3==0 && i%5==0){\n            printf(\"FizzBuzz\\n\");\n        }\n        else if(i%3==0){\n            printf(\"Fizz\\n\");\n        }\n        else if(i%5==0){\n            printf(\"Buzz\\n\");\n        }\n        else{\n            printf(\"%d\\n\",i);\n        }\n    }\n    return 0;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    fizz_buzz(n);\n    return 0;\n}\n"}
{"task_id": "CPP/37", "prompt": "/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n", "generation": "    vector<float> l_prime;\n    for(int i=0;i<l.size();i++){\n        if(i%2==0){\n            l_prime.push_back(l[i]);\n        }\n    }\n    sort(l_prime.begin(),l_prime.end());\n    return l_prime;\n}\n\nint main(){\n    vector<float> l;\n    l.push_back(1.0);\n    l.push_back(2.0);\n    l.push_back(3.0);\n    l.push_back(5.0);\n    l.push_back(6.0);\n    l.push_back(4.0);\n    vector<float> l_prime=sort_even(l);\n    for(int i=0;i<l_prime.size();i++){\n        printf(\"%f \",l_prime[i]);\n    }\n    return 0;\n}\n"}
{"task_id": "CPP/38", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input string encoded with encode_cyclic function. Returns decoded string. \n    */\n", "generation": "    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nint main(){\n    string s;\n    cout<<\"Enter string to encode: \";\n    cin>>s;\n    cout<<\"Encoded string: \"<<encode_cyclic(s)<<endl;\n    cout<<\"Decoded string: \"<<decode_cyclic(encode_cyclic(s))<<endl;\n    return 0;\n}\n\n\"\"\"\n"}
{"task_id": "CPP/39", "prompt": "/*\nprime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n", "generation": "    if(n==1 || n==2){\n        return n;\n    }\n    else{\n        return prime_fib(n-1) + prime_fib(n-2);\n    }\n}\nint main(){\n    int n;\n    printf(\"Enter n: \");\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",prime_fib(n));\n    return 0;\n}\n/*\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n    if(n==1 || n==2){\n        return n;\n    }\n    else{\n        return prime_fib(n-1) + prime_fib(n-2);\n    }\n}\nint main(){\n    int n;\n    printf(\"Enter n: \");\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",prime_fib(n));\n    return 0;\n}\n*/\n/*\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n    if(n==1 || n==2){\n        return n;\n    }\n    else{\n        return prime_fib(n-1) + prime_fib(n-2);\n    }\n}\nint main(){\n    int n;\n    printf(\"Enter n: \");\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",prime_fib(n));\n    return 0;\n}\n*/\n/*\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n    if(n==1 || n==2){\n        return n;\n    }\n    else{\n        return prime_fib(n-1) + prime_fib(n-2);\n    }\n}\nint main(){\n    int n;\n    printf(\"Enter n: \");\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",prime_fib(n));\n    return 0;\n}\n*/\n/*\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n    if(n==1 || n==2){\n        return n;\n    }\n    else{\n        return prime_fib(n-1) + prime_fib(n-2);\n    }\n}\nint main(){\n    int n;\n    printf(\"Enter n: \");\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",prime_fib(n));\n    return 0;\n}\n*/\n/*\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n    if(n==1 || n==2){\n        return n;\n    }\n    else{\n        return prime_fib(n-1) + prime_fib(n-2);\n    }\n}\nint main(){\n    int n;\n    printf(\"Enter n: \");\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",prime_fib(n));\n    return 0;\n}\n*/\n/*\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n    if(n==1 || n==2){\n        return n;\n    }\n    else{\n        return prime_fib(n-1) + prime_fib(n-2);\n    }\n}\nint main(){\n    int n;\n    printf(\"Enter n: \");\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",prime_fib(n));\n    return 0;\n}\n*/\n/*\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n    if("}
{"task_id": "CPP/40", "prompt": "/*\ntriples_sum_to_zero takes a vector of integers as an input.\nit returns true if there are three distinct elements in the vector that\nsum to zero, and false otherwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n", "generation": "    int n = l.size();\n    if(n<3) return false;\n    for(int i=0;i<n-2;i++){\n        for(int j=i+1;j<n-1;j++){\n            for(int k=j+1;k<n;k++){\n                if(l[i]+l[j]+l[k]==0) return true;\n            }\n        }\n    }\n    return false;\n}\n\nint main(){\n    vector<int> l = {1, 3, 5, 0};\n    printf(\"%s\\n\", triples_sum_to_zero(l).c_str());\n    return 0;\n}\n"}
{"task_id": "CPP/41", "prompt": "/*\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n*/\n#include<stdio.h>\nusing namespace std;\nint car_race_collision(int n){\n", "generation": "    int i,j,k;\n    int a[n][n];\n    for(i=0;i<n;i++){\n        for(j=0;j<n;j++){\n            a[i][j]=0;\n        }\n    }\n    for(i=0;i<n;i++){\n        for(j=0;j<n;j++){\n            if(i==j) a[i][j]=1;\n            else a[i][j]=0;\n        }\n    }\n    for(i=0;i<n;i++){\n        for(j=0;j<n;j++){\n            for(k=0;k<n;k++){\n                if(a[i][j]==1 && a[j][k]==1 && a[i][k]==1){\n                    a[i][j]=1;\n                    a[j][k]=1;\n                    a[i][k]=1;\n                }\n            }\n        }\n    }\n    int count=0;\n    for(i=0;i<n;i++){\n        for(j=0;j<n;j++){\n            if(a[i][j]==1) count++;\n        }\n    }\n    return count;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",car_race_collision(n));\n    return 0;\n}\n/*\nInput:\n5\nOutput:\n4\n*/\n"}
{"task_id": "CPP/42", "prompt": "/*\nReturn vector with elements incremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n", "generation": "    vector<int> r;\n    int i;\n    for(i=0;i<l.size();i++){\n        r.push_back(l[i]+1);\n    }\n    return r;\n}\nint main(){\n    vector<int> l;\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(3);\n    vector<int> r=incr_list(l);\n    for(int i=0;i<r.size();i++){\n        printf(\"%d \",r[i]);\n    }\n    return 0;\n}\n"}
{"task_id": "CPP/43", "prompt": "/*\npairs_sum_to_zero takes a vector of integers as an input.\nit returns true if there are two distinct elements in the vector that\nsum to zero, and false otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n", "generation": "    int n = l.size();\n    vector<int> v(n);\n    for(int i=0;i<n;i++){\n        v[i] = l[i];\n    }\n    sort(v.begin(),v.end());\n    int i=0;\n    int j=n-1;\n    while(i<j){\n        if(v[i]+v[j]==0){\n            return true;\n        }\n        else if(v[i]+v[j]<0){\n            i++;\n        }\n        else{\n            j--;\n        }\n    }\n    return false;\n}\nint main(){\n    vector<int> l = {1, 3, 5, 0};\n    printf(\"%s\\n\",pairs_sum_to_zero(l).c_str());\n    return 0;\n}\n"}
{"task_id": "CPP/44", "prompt": "/*\nChange numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n", "generation": "    string result;\n    while(x){\n        result.push_back(x%base+'0');\n        x/=base;\n    }\n    return result;\n}\nint main(){\n    int x,base;\n    scanf(\"%d %d\",&x,&base);\n    printf(\"%s\\n\",change_base(x,base).c_str());\n    return 0;\n}\n"}
{"task_id": "CPP/45", "prompt": "/*\nGiven length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n", "generation": "\tfloat s=(a+h)/2;\n\treturn sqrt(s*(s-a)*(s-h)*(s-a));\n}\nint main(){\n\tfloat a,h;\n\tprintf(\"Enter side and height of triangle:\\n\");\n\tscanf(\"%f %f\",&a,&h);\n\tprintf(\"Area of triangle is %f\\n\",triangle_area(a,h));\n\treturn 0;\n}\n\n/*\n\nTriangle area using formula:\n\nArea of triangle is sqrt(s*(s-a)*(s-b)*(s-c))\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n\tfloat s=(a+b+c)/2;\n\treturn sqrt(s*(s-a)*(s-b)*(s-c));\n}\nint main(){\n\tfloat a,b,c;\n\tprintf(\"Enter side and height of triangle:\\n\");\n\tscanf(\"%f %f %f\",&a,&b,&c);\n\tprintf(\"Area of triangle is %f\\n\",triangle_area(a,b,c));\n\treturn 0;\n}\n\n/*\n\nTriangle area using formula:\n\nArea of triangle is sqrt(s*(s-a)*(s-b)*(s-c))\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n\tfloat s=(a+b+c)/2;\n\treturn sqrt(s*(s-a)*(s-b)*(s-c));\n}\nint main(){\n\tfloat a,b,c;\n\tprintf(\"Enter side and height of triangle:\\n\");\n\tscanf(\"%f %f %f\",&a,&b,&c);\n\tprintf(\"Area of triangle is %f\\n\",triangle_area(a,b,c));\n\treturn 0;\n}\n\n/*\n\nTriangle area using formula:\n\nArea of triangle is sqrt(s*(s-a)*(s-b)*(s-c))\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n\tfloat s=(a+b+c)/2;\n\treturn sqrt(s*(s-a)*(s-b)*(s-c));\n}\nint main(){\n\tfloat a,b,c;\n\tprintf(\"Enter side and height of triangle:\\n\");\n\tscanf(\"%f %f %f\",&a,&b,&c);\n\tprintf(\"Area of triangle is %f\\n\",triangle_area(a,b,c));\n\treturn 0;\n}\n\n/*\n\nTriangle area using formula:\n\nArea of triangle is sqrt(s*(s-a)*(s-b)*(s-c))\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n\tfloat s=(a+b+c)/2;\n\treturn sqrt(s*(s-a)*(s-b)*(s-c));\n}\nint main(){\n\tfloat a,b,c;\n\tprintf(\"Enter side and height of triangle:\\n\");\n\tscanf(\"%f %f %f\",&a,&b,&c);\n\tprintf(\"Area of triangle is %f\\n\",triangle_area(a,b,c));\n\treturn 0;\n}\n\n/*\n\nTriangle area using formula:\n\nArea of triangle is sqrt(s*(s-a)*(s-b)*(s-c))\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n\tfloat s=("}
{"task_id": "CPP/46", "prompt": "/*\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n", "generation": "    if(n==0)\n        return 0;\n    if(n==1)\n        return 0;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 0;\n    return fib4(n-1)+fib4(n-2)+fib4(n-3)+fib4(n-4);\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",fib4(n));\n    return 0;\n}\n"}
{"task_id": "CPP/47", "prompt": "/*\nReturn median of elements in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n15.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n", "generation": "    sort(l.begin(),l.end());\n    int n = l.size();\n    if(n%2==0){\n        return (l[n/2]+l[n/2-1])/2;\n    }\n    else{\n        return l[n/2];\n    }\n}\nint main(){\n    vector<float> l;\n    l.push_back(3);\n    l.push_back(1);\n    l.push_back(2);\n    l.push_back(4);\n    l.push_back(5);\n    printf(\"Median of elements in the vector l is %f\\n\", median(l));\n    return 0;\n}\n"}
{"task_id": "CPP/48", "prompt": "/*\nChecks if given string is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n", "generation": "    int i=0,j=text.length()-1;\n    while(i<j){\n        if(text[i]!=text[j]){\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\nint main(){\n    string text;\n    getline(cin,text);\n    if(is_palindrome(text)){\n        printf(\"true\\n\");\n    }else{\n        printf(\"false\\n\");\n    }\n    return 0;\n}\n"}
{"task_id": "CPP/49", "prompt": "/*\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n", "generation": "    if(n==0)\n        return 0;\n    int temp = modp(n/p,p);\n    int ans = (temp*p)%p;\n    return ans;\n}\nint main(){\n    int n,p;\n    scanf(\"%d %d\",&n,&p);\n    printf(\"%d\\n\",modp(n,p));\n    return 0;\n}\n"}
{"task_id": "CPP/50", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n    // takes as input string encoded with encode_shift function. Returns decoded string.\n", "generation": "    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n    string s;\n    cout<<\"Enter string to be encoded: \";\n    cin>>s;\n    cout<<\"Encoded string: \"<<encode_shift(s)<<endl;\n    cout<<\"Decoded string: \"<<decode_shift(s)<<endl;\n    return 0;\n}\n\"\"\"\n\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n# -------------------------------------------------\n#"}
{"task_id": "CPP/51", "prompt": "/*\nremove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n", "generation": "    string vowels=\"aeiouAEIOU\";\n    transform(text.begin(),text.end(),text.begin(),::tolower);\n    string result=\"\";\n    for(int i=0;i<text.length();i++){\n        if(vowels.find(text[i])==string::npos){\n            result+=text[i];\n        }\n    }\n    return result;\n}\nint main(){\n    string text=\"zbcd\";\n    cout<<remove_vowels(text)<<endl;\n    return 0;\n}\n\n/*\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n    string vowels=\"aeiouAEIOU\";\n    transform(text.begin(),text.end(),text.begin(),::tolower);\n    string result=\"\";\n    for(int i=0;i<text.length();i++){\n        if(vowels.find(text[i])==string::npos){\n            result+=text[i];\n        }\n    }\n    return result;\n}\nint main(){\n    string text=\"zbcd\";\n    cout<<remove_vowels(text)<<endl;\n    return 0;\n}\n*/\n\n/*\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n    string vowels=\"aeiouAEIOU\";\n    transform(text.begin(),text.end(),text.begin(),::tolower);\n    string result=\"\";\n    for(int i=0;i<text.length();i++){\n        if(vowels.find(text[i])==string::npos){\n            result+=text[i];\n        }\n    }\n    return result;\n}\nint main(){\n    string text=\"zbcd\";\n    cout<<remove_vowels(text)<<endl;\n    return 0;\n}\n*/\n\n/*\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n    string vowels=\"aeiouAEIOU\";\n    transform(text.begin(),text.end(),text.begin(),::tolower);\n    string result=\"\";\n    for(int i=0;i<text.length();i++){\n        if(vowels.find(text[i])==string::npos){\n            result+=text[i];\n        }\n    }\n    return result;\n}\nint main(){\n    string text=\"zbcd\";\n    cout<<remove_vowels(text)<<endl;\n    return 0;\n}\n*/\n\n/*\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n    string vowels=\"aeiouAEIOU\";\n    transform(text.begin(),text.end(),text.begin(),::tolower);\n    string result=\"\";\n    for(int i=0;i<text.length();i++){\n        if(vowels.find(text[i])==string::npos){\n            result+=text[i];\n        }\n    }\n    return result;\n}\nint main(){\n    string text=\"zbcd\";\n    cout<<remove_vowels(text)<<endl;\n    return 0;\n}\n*/\n\n/*\n#include<stdio.h>"}
{"task_id": "CPP/52", "prompt": "/*\nReturn true if all numbers in the vector l are below threshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n", "generation": "    for(int i=0; i<l.size(); i++){\n        if(l[i]<t)\n            return false;\n    }\n    return true;\n}\n\nint main(){\n    vector<int>l;\n    int t;\n    scanf(\"%d\", &t);\n    while(t--){\n        int n;\n        scanf(\"%d\", &n);\n        for(int i=0; i<n; i++){\n            int x;\n            scanf(\"%d\", &x);\n            l.push_back(x);\n        }\n        if(below_threshold(l, t))\n            printf(\"true\\n\");\n        else\n            printf(\"false\\n\");\n        l.clear();\n    }\n    return 0;\n}\n"}
{"task_id": "CPP/53", "prompt": "/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n", "generation": "    return x+y;\n}\nint main(){\n    int x,y;\n    scanf(\"%d%d\",&x,&y);\n    printf(\"%d\\n\",add(x,y));\n    return 0;\n}\n/*\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n    return x+y;\n}\nint main(){\n    int x,y;\n    scanf(\"%d%d\",&x,&y);\n    printf(\"%d\\n\",add(x,y));\n    return 0;\n}\n*/\n/*\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n    return x+y;\n}\nint main(){\n    int x,y;\n    scanf(\"%d%d\",&x,&y);\n    printf(\"%d\\n\",add(x,y));\n    return 0;\n}\n*/\n/*\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n    return x+y;\n}\nint main(){\n    int x,y;\n    scanf(\"%d%d\",&x,&y);\n    printf(\"%d\\n\",add(x,y));\n    return 0;\n}\n*/\n/*\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n    return x+y;\n}\nint main(){\n    int x,y;\n    scanf(\"%d%d\",&x,&y);\n    printf(\"%d\\n\",add(x,y));\n    return 0;\n}\n*/\n/*\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n    return x+y;\n}\nint main(){\n    int x,y;\n    scanf(\"%d%d\",&x,&y);\n    printf(\"%d\\n\",add(x,y));\n    return 0;\n}\n*/\n/*\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n    return x+y;\n}\nint main(){\n    int x,y;\n    scanf(\"%d%d\",&x,&y);\n    printf(\"%d\\n\",add(x,y));\n    return 0;\n}\n*/\n/*\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n    return x+y;\n}\nint main(){\n    int x,y;\n    scanf(\"%d%d\",&x,&y);\n    printf(\"%d\\n\",add(x,y));\n    return 0;\n}\n*/\n/*\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n    return x+y;\n}\nint main(){\n    int x,y;\n    scanf(\"%d%d\",&x,&y);\n    printf(\"%d\\n\",add(x,y));\n    return 0;\n}\n*/\n/*\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n    return x+y;\n}\nint main(){\n    int x,y;\n    scanf(\"%d%d\",&x,&y);\n    printf(\"%d\\n\",add(x,y));\n    return 0;\n}\n*/\n/*\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n    return x+y;\n}\nint main(){"}
{"task_id": "CPP/54", "prompt": "/*\nCheck if two words have the same characters.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\n", "generation": "    if(s0.length()!=s1.length())\n        return false;\n    sort(s0.begin(),s0.end());\n    sort(s1.begin(),s1.end());\n    return s0==s1;\n}\nint main(){\n    string s0,s1;\n    while(cin>>s0>>s1){\n        if(same_chars(s0,s1))\n            printf(\"Yes\\n\");\n        else\n            printf(\"No\\n\");\n    }\n    return 0;\n}\n"}
{"task_id": "CPP/55", "prompt": "/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n", "generation": "    if(n==0)\n        return 0;\n    if(n==1)\n        return 1;\n    return fib(n-1)+fib(n-2);\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\",fib(n));\n    return 0;\n}\n"}
{"task_id": "CPP/56", "prompt": "/*\nbrackets is a string of '<' and '>'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n", "generation": "\tint i=0;\n\twhile(i<brackets.length()){\n\t\tif(brackets[i]=='<'){\n\t\t\tif(i==0||brackets[i-1]!='<'){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ti++;\n\t\t\twhile(i<brackets.length()&&brackets[i]!='>'){\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tif(i==brackets.length()){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\telse if(brackets[i]=='>'){\n\t\t\tif(i==0||brackets[i-1]!='>'){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ti++;\n\t\t\twhile(i<brackets.length()&&brackets[i]!='<'){\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tif(i==brackets.length()){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn true;\n}\nint main(){\n\tstring brackets;\n\tprintf(\"Enter brackets: \");\n\tgetline(cin,brackets);\n\tif(correct_bracketing(brackets)){\n\t\tprintf(\"Brackets are correct\\n\");\n\t}\n\telse{\n\t\tprintf(\"Brackets are incorrect\\n\");\n\t}\n\treturn 0;\n}\n\n/*\n\nBrackets are correct\nBrackets are incorrect\n\n*/\n\n/*\n\nBrackets are correct\nBrackets are incorrect\n\n*/\n\n/*\n\nBrackets are correct\nBrackets are incorrect\n\n*/\n\n/*\n\nBrackets are correct\nBrackets are incorrect\n\n*/\n\n/*\n\nBrackets are correct\nBrackets are incorrect\n\n*/\n\n/*\n\nBrackets are correct\nBrackets are incorrect\n\n*/\n\n/*\n\nBrackets are correct\nBrackets are incorrect\n\n*/\n\n/*\n\nBrackets are correct\nBrackets are incorrect\n\n*/\n\n/*\n\nBrackets are correct\nBrackets are incorrect\n\n*/\n\n/*\n\nBrackets are correct\nBrackets are incorrect\n\n*/\n\n/*\n\nBrackets are correct\nBrackets are incorrect\n\n*/\n\n/*\n\nBrackets are correct\nBrackets are incorrect\n\n*/\n\n/*\n\nBrackets are correct\nBrackets are incorrect\n\n*/\n\n/*\n\nBrackets are correct\nBrackets are incorrect\n\n*/\n\n/*\n\nBrackets are correct\nBrackets are incorrect\n\n*/\n\n/*\n\nBrackets are correct\nBrackets are incorrect\n\n*/\n\n/*\n\nBrackets are correct\nBrackets are incorrect\n\n*/\n\n/*\n\nBrackets are correct\nBrackets are incorrect\n\n*/\n\n/*\n\nBrackets are correct\nBrackets are incorrect\n\n*/\n\n/*\n\nBrackets are correct\nBrackets are incorrect\n\n*/\n\n/*\n\nBrackets are correct\nBrackets are incorrect\n\n*/\n\n/*\n\nBrackets are correct\nBrackets are incorrect\n\n*/\n\n/*\n\nBrackets are correct\nBrackets are incorrect\n\n*/\n\n/*\n\nBrackets are correct\nBrackets are incorrect\n\n*/\n\n/*\n\nBrackets are correct\nBrackets are incorrect\n\n*/\n\n/*\n\nBrackets are correct\nBrackets are incorrect\n\n*/\n\n/*\n\nBrackets are correct\nBrackets are incorrect\n\n*/\n\n/*\n\nBrackets are correct\nBrackets are incorrect\n\n*/\n\n/*\n\nBrackets are correct\nBrackets are incorrect\n\n*/\n\n/*\n\nBrackets are correct\nBrackets are incorrect\n\n*/\n\n/*\n\nBrackets are correct\nBrackets are incorrect"}
{"task_id": "CPP/57", "prompt": "/*\nReturn true is vector elements are monotonically increasing or decreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n", "generation": "    bool flag=true;\n    for(int i=0;i<l.size()-1;i++){\n        if(l[i]>l[i+1]){\n            flag=false;\n            break;\n        }\n    }\n    return flag;\n}\nint main(){\n    vector<float> l={1, 2, 4, 20};\n    printf(\"%s\\n\", monotonic(l).c_str());\n    return 0;\n}\n"}
{"task_id": "CPP/58", "prompt": "/*\nReturn sorted unique common elements for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n", "generation": "    vector<int> common;\n    sort(l1.begin(),l1.end());\n    sort(l2.begin(),l2.end());\n    int i=0,j=0;\n    while(i<l1.size() && j<l2.size()){\n        if(l1[i]==l2[j]){\n            common.push_back(l1[i]);\n            i++;\n            j++;\n        }\n        else if(l1[i]<l2[j]){\n            i++;\n        }\n        else{\n            j++;\n        }\n    }\n    return common;\n}\nint main(){\n    vector<int> l1,l2;\n    l1.push_back(1);\n    l1.push_back(4);\n    l1.push_back(3);\n    l1.push_back(34);\n    l1.push_back(653);\n    l1.push_back(2);\n    l1.push_back(5);\n    l1.push_back(7);\n    l1.push_back(1);\n    l1.push_back(5);\n    l1.push_back(9);\n    l1.push_back(653);\n    l1.push_back(121);\n    l2.push_back(5);\n    l2.push_back(3);\n    l2.push_back(2);\n    l2.push_back(8);\n    l2.push_back(3);\n    l2.push_back(2);\n    vector<int> common=common(l1,l2);\n    for(int i=0;i<common.size();i++){\n        printf(\"%d \",common[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n"}
{"task_id": "CPP/59", "prompt": "/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n", "generation": "    int largest = 0;\n    for(int i = 2; i <= n/2; i++){\n        if(n % i == 0){\n            largest = i;\n            break;\n        }\n    }\n    return largest;\n}\n\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%d\\n\", largest_prime_factor(n));\n    return 0;\n}\n"}
{"task_id": "CPP/60", "prompt": "/*\nsum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n", "generation": "    int sum = 0;\n    for(int i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\nint main(){\n    int n;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &n);\n    printf(\"Sum of numbers from 1 to %d is %d\\n\", n, sum_to_n(n));\n    return 0;\n}\n\n/*\n\n// Sum of numbers from 1 to n is a function that sums numbers from 1 to n.\n// The function returns the sum of numbers from 1 to n.\n// The function takes an integer n as a parameter.\n// The function returns the sum of numbers from 1 to n.\n// The function returns 0 if n is less than or equal to 0.\n\n// Example:\n\n// Input:\n// n = 5\n\n// Output:\n// Sum of numbers from 1 to 5 is 15\n\n// Input:\n// n = -5\n\n// Output:\n// Sum of numbers from 1 to 5 is 0\n\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n    int sum = 0;\n    for(int i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\nint main(){\n    int n;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &n);\n    printf(\"Sum of numbers from 1 to %d is %d\\n\", n, sum_to_n(n));\n    return 0;\n}\n\n/*\n\n// Sum of numbers from 1 to n is a function that sums numbers from 1 to n.\n// The function returns the sum of numbers from 1 to n.\n// The function takes an integer n as a parameter.\n// The function returns the sum of numbers from 1 to n.\n// The function returns 0 if n is less than or equal to 0.\n\n// Example:\n\n// Input:\n// n = 5\n\n// Output:\n// Sum of numbers from 1 to 5 is 15\n\n// Input:\n// n = -5\n\n// Output:\n// Sum of numbers from 1 to 5 is 0\n\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n    int sum = 0;\n    for(int i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\nint main(){\n    int n;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &n);\n    printf(\"Sum of numbers from 1 to %d is %d\\n\", n, sum_to_n(n));\n    return 0;\n}\n\n/*\n\n// Sum of numbers from 1 to n is a function that sums numbers from 1 to n.\n// The function returns the sum of numbers from 1 to n.\n// The function takes an integer n as a parameter.\n// The function returns the sum of numbers from 1 to n.\n// The function returns 0 if n is less than or equal to 0.\n\n// Example:\n\n// Input:\n// n = 5\n\n// Output:\n// Sum of numbers from 1 to 5 is 15\n\n// Input:\n// n = -5\n\n// Output:\n// Sum of numbers from 1 to 5 is 0\n\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n    int sum = 0;\n    for(int i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\nint main(){\n    int n;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &n);\n    printf(\"Sum of numbers from 1 to %d is %d\\n\", n, sum_to_n(n));\n    return 0;\n}\n\n/*\n"}
{"task_id": "CPP/61", "prompt": "/*\nbrackets is a string of '(' and ')'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n", "generation": "    int open_brackets = 0;\n    int close_brackets = 0;\n    for(int i=0;i<brackets.length();i++){\n        if(brackets[i]=='('){\n            open_brackets++;\n        }else if(brackets[i]==')'){\n            close_brackets++;\n        }\n    }\n    if(open_brackets==close_brackets){\n        return true;\n    }else{\n        return false;\n    }\n}\n\nint main(){\n    string brackets;\n    cin>>brackets;\n    if(correct_bracketing(brackets)){\n        cout<<\"true\"<<endl;\n    }else{\n        cout<<\"false\"<<endl;\n    }\n    return 0;\n}"}
{"task_id": "CPP/62", "prompt": "/*\nxs represent coefficients of a polynomial.\nxs{0} + xs{1} * x + xs{2} * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n", "generation": "\tvector<float> ys;\n\tys.push_back(xs[1]);\n\tfor(int i=1; i<xs.size()-1; i++){\n\t\tys.push_back(xs[i+1]*xs[i]-xs[i-1]*xs[i]);\n\t}\n\tys.push_back(xs[xs.size()-1]*xs[xs.size()-2]);\n\treturn ys;\n}\nint main(){\n\tvector<float> xs;\n\tfor(int i=0; i<=10; i++){\n\t\txs.push_back(i);\n\t}\n\tvector<float> ys = derivative(xs);\n\tfor(int i=0; i<ys.size(); i++){\n\t\tprintf(\"%f \", ys[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n"}
{"task_id": "CPP/63", "prompt": "/*\nThe FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n", "generation": "\tif(n==0)\n\t\treturn 0;\n\tif(n==1)\n\t\treturn 0;\n\tif(n==2)\n\t\treturn 1;\n\treturn fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tprintf(\"%d\\n\",fibfib(n));\n\treturn 0;\n}\n"}
{"task_id": "CPP/64", "prompt": "/*\nWrite a function vowels_count which takes a string representing a word as input and returns the number of vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. \nHere, 'y' is also a vowel, but only when it is at the end of the given word.\nExample: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n", "generation": "    int vowels_count=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u'||s[i]=='y'){\n            vowels_count++;\n        }\n    }\n    return vowels_count;\n}\nint main(){\n    string s;\n    cin>>s;\n    cout<<vowels_count(s);\n    return 0;\n}"}
{"task_id": "CPP/65", "prompt": "/*\nCircular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n", "generation": "    string result = \"\";\n    int digits = 0;\n    while(x){\n        digits++;\n        x = x/10;\n    }\n    if(shift > digits)\n        shift = digits;\n    int i = 0;\n    while(shift){\n        result += (x%10)+'0';\n        x = x/10;\n        shift--;\n    }\n    reverse(result.begin(),result.end());\n    return result;\n}\nint main(){\n    int x,shift;\n    scanf(\"%d %d\",&x,&shift);\n    printf(\"%s\\n\",circular_shift(x,shift).c_str());\n    return 0;\n}\n"}
{"task_id": "CPP/66", "prompt": "/*\nTask\nWrite a function that takes a string as input and returns the sum of the upper characters only's\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n", "generation": "    int sum = 0;\n    for(int i = 0; i < s.length(); i++){\n        sum += s[i] - '0';\n    }\n    return sum;\n}\n\nint main(){\n    string s;\n    cin >> s;\n    cout << digitSum(s) << endl;\n    return 0;\n}"}
{"task_id": "CPP/67", "prompt": "/*\nIn this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\n", "generation": "    int count=0;\n    int i=0;\n    while(i<s.length()){\n        if(s[i]=='a'){\n            count+=n/3;\n            n%=3;\n        }\n        else if(s[i]=='o'){\n            count+=n/2;\n            n%=2;\n        }\n        else if(s[i]=='m'){\n            count+=n;\n        }\n        i++;\n    }\n    return count;\n}\nint main(){\n    string s;\n    int n;\n    cin>>s>>n;\n    cout<<fruit_distribution(s,n)<<endl;\n    return 0;\n}"}
{"task_id": "CPP/68", "prompt": "/*\nGiven a vector representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a vector, { smalest_value, its index },\nIf there are no even values or the given vector is empty, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n", "generation": "    int smalest_value = arr[0];\n    int smalest_index = 0;\n    for(int i=0; i<arr.size(); i++){\n        if(arr[i]%2 == 0){\n            if(smalest_value > arr[i]){\n                smalest_value = arr[i];\n                smalest_index = i;\n            }\n        }\n    }\n    vector<int> result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n    vector<int> arr = {4,2,3};\n    vector<int> result = pluck(arr);\n    printf(\"%d, %d\\n\", result[0], result[1]);\n    return 0;\n}"}
{"task_id": "CPP/69", "prompt": "/*\nYou are given a non-empty vector of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or equal to the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the vector.\nIf no such a value exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n", "generation": "    int n = lst.size();\n    int i = 0;\n    int j = n-1;\n    int k = 0;\n    int max = 0;\n    int freq = 0;\n    while(i <= j){\n        k = (i+j)/2;\n        if(lst[k] == k){\n            freq++;\n            if(freq > max){\n                max = freq;\n            }\n        }else{\n            if(lst[k] < k){\n                j = k-1;\n            }else{\n                i = k+1;\n            }\n        }\n    }\n    if(max == 0){\n        return -1;\n    }else{\n        return max;\n    }\n}\nint main(){\n    vector<int> lst = {4, 1, 2, 2, 3, 1};\n    int res = search(lst);\n    printf(\"%d\\n\", res);\n    return 0;\n}"}
{"task_id": "CPP/70", "prompt": "/*\nGiven vector of integers, return vector in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\n\nExamples:\nstrange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_vector({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n", "generation": "    vector<int> sorted_list;\n    int min = lst[0];\n    int max = lst[0];\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] < min){\n            min = lst[i];\n        }\n        if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    for(int i = min; i <= max; i++){\n        sorted_list.push_back(i);\n    }\n    return sorted_list;\n}\n\nint main(){\n    vector<int> lst;\n    lst.push_back(1);\n    lst.push_back(2);\n    lst.push_back(3);\n    lst.push_back(4);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    vector<int> sorted_list = strange_sort_list(lst);\n    for(int i = 0; i < sorted_list.size(); i++){\n        printf(\"%d \", sorted_list[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n"}
{"task_id": "CPP/71", "prompt": "/*\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n", "generation": "    float s = (a+b+c)/2;\n    return sqrt(s*(s-a)*(s-b)*(s-c));\n}\nint main(){\n    float a,b,c;\n    scanf(\"%f %f %f\",&a,&b,&c);\n    float area = triangle_area(a,b,c);\n    if(area<0){\n        printf(\"-1\");\n    }else{\n        printf(\"%.2f\",area);\n    }\n    return 0;\n}\n/*\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint main(){\n    float a,b,c;\n    scanf(\"%f %f %f\",&a,&b,&c);\n    float area = triangle_area(a,b,c);\n    if(area<0){\n        printf(\"-1\");\n    }else{\n        printf(\"%.2f\",area);\n    }\n    return 0;\n}\n*/\n/*\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint main(){\n    float a,b,c;\n    scanf(\"%f %f %f\",&a,&b,&c);\n    float area = triangle_area(a,b,c);\n    if(area<0){\n        printf(\"-1\");\n    }else{\n        printf(\"%.2f\",area);\n    }\n    return 0;\n}\n*/\n/*\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint main(){\n    float a,b,c;\n    scanf(\"%f %f %f\",&a,&b,&c);\n    float area = triangle_area(a,b,c);\n    if(area<0){\n        printf(\"-1\");\n    }else{\n        printf(\"%.2f\",area);\n    }\n    return 0;\n}\n*/\n/*\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint main(){\n    float a,b,c;\n    scanf(\"%f %f %f\",&a,&b,&c);\n    float area = triangle_area(a,b,c);\n    if(area<0){\n        printf(\"-1\");\n    }else{\n        printf(\"%.2f\",area);\n    }\n    return 0;\n}\n*/\n/*\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint main(){\n    float a,b,c;\n    scanf(\"%f %f %f\",&a,&b,&c);\n    float area = triangle_area(a,b,c);\n    if(area<0){\n        printf(\"-1\");\n    }else{\n        printf(\"%.2f\",area);\n    }\n    return 0;\n}\n*/\n/*\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint main(){\n    float a,b,c;\n    scanf(\"%f %f %f\",&a,&b,&c);\n    float area = triangle_area(a,b,c);\n    if(area<0){\n        printf(\"-1\");\n    }else{\n        printf(\"%.2f\",area);\n    }\n    return 0;\n}\n*/\n/*\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint main(){\n    float a,b,c;\n    scanf(\"%f %f %f\",&a,&b,&c);\n    float area = triangle_area(a,b"}
{"task_id": "CPP/72", "prompt": "/*\nWrite a function that returns true if the object q will fly, and false otherwise.\nThe object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) \u279e false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) \u279e false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) \u279e true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) \u279e true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n", "generation": "    int n=q.size();\n    int sum=0;\n    for(int i=0;i<n;i++){\n        sum+=q[i];\n    }\n    if(sum<=w && n>1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main(){\n    vector<int> q;\n    int w;\n    int n;\n    scanf(\"%d\",&n);\n    for(int i=0;i<n;i++){\n        int temp;\n        scanf(\"%d\",&temp);\n        q.push_back(temp);\n    }\n    scanf(\"%d\",&w);\n    if(will_it_fly(q,w)){\n        printf(\"true\");\n    }\n    else{\n        printf(\"false\");\n    }\n    return 0;\n}"}
{"task_id": "CPP/73", "prompt": "/*\nGiven a vector arr of integers, find the minimum number of elements that\nneed to be changed to make the vector palindromic. A palindromic vector is a vector that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n", "generation": "\tint n = arr.size();\n\tint count = 0;\n\tfor(int i = 0; i < n; i++){\n\t\tfor(int j = i+1; j < n; j++){\n\t\t\tif(arr[i] == arr[j]){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\nint main(){\n\tvector<int> arr = {1,2,3,5,4,7,9,6};\n\tint ans = smallest_change(arr);\n\tprintf(\"The minimum number of elements that need to be changed to make the vector palindromic is %d\\n\", ans);\n\treturn 0;\n}\n"}
{"task_id": "CPP/74", "prompt": "/*\nWrite a function that accepts two vectors of strings and returns the vector that has \ntotal number of chars in the all strings of the vector less than the other vector.\n\nif the two vectors have the same number of chars, return the first vector.\n\nExamples\ntotal_match({}, {}) \u279e {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) \u279e {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) \u279e {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) \u279e {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) \u279e {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n", "generation": "  vector<string> result;\n  for(int i=0;i<lst1.size();i++){\n    int count=0;\n    for(int j=0;j<lst2.size();j++){\n      if(lst1[i]==lst2[j]){\n        count++;\n      }\n    }\n    if(count<lst2.size()){\n      result.push_back(lst1[i]);\n    }\n  }\n  return result;\n}\n\nint main(){\n  vector<string> lst1 = {\"hi\", \"admin\"};\n  vector<string> lst2 = {\"hI\", \"Hi\"};\n  vector<string> result = total_match(lst1,lst2);\n  for(int i=0;i<result.size();i++){\n    printf(\"%s \",result[i].c_str());\n  }\n  printf(\"\\n\");\n  return 0;\n}"}
{"task_id": "CPP/75", "prompt": "/*\nWrite a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n", "generation": "    int i;\n    for(i=2;i<=a/2;i++){\n        if(a%i==0){\n            return false;\n        }\n    }\n    return true;\n}\nint main(){\n    int a;\n    scanf(\"%d\",&a);\n    printf(\"%s\\n\",is_multiply_prime(a)?\"true\":\"false\");\n    return 0;\n}"}
{"task_id": "CPP/76", "prompt": "/*\nYour task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\n", "generation": "    if(x==0 || n==0) return false;\n    if(x==1) return true;\n    if(x==n) return true;\n    if(x==n*n) return true;\n    if(x==n*n*n) return true;\n    if(x==n*n*n*n) return true;\n    if(x==n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n"}
{"task_id": "CPP/77", "prompt": "/*\nWrite a function that takes an integer a and returns true \nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscuber(int a){\n", "generation": "    if(a<0) return false;\n    int b=sqrt(a);\n    if(b*b==a) return true;\n    return false;\n}\nint main(){\n    int a;\n    scanf(\"%d\",&a);\n    if(iscuber(a)) printf(\"true\\n\");\n    else printf(\"false\\n\");\n    return 0;\n}\n"}
{"task_id": "CPP/78", "prompt": "/*\nYou have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n", "generation": "    int key = 0;\n    for(int i = 0; i < num.length(); i++){\n        key += (num[i] - '0') * pow(16, num.length() - i - 1);\n    }\n    return key;\n}\nint main(){\n    string num;\n    while(getline(cin, num)){\n        int key = hex_key(num);\n        printf(\"%d\\n\", key);\n    }\n    return 0;\n}"}
{"task_id": "CPP/79", "prompt": "/*\nYou will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n\nThere will be an extra couple of characters \"db\" at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n", "generation": "    string binary = \"\";\n    while(decimal){\n        binary += (decimal%2 == 0? \"0\" : \"1\");\n        decimal /= 2;\n    }\n    reverse(binary.begin(), binary.end());\n    return binary;\n}\n\nint main(){\n    int decimal = 15;\n    string binary = decimal_to_binary(decimal);\n    printf(\"%s\\n\", binary.c_str());\n    decimal = 32;\n    binary = decimal_to_binary(decimal);\n    printf(\"%s\\n\", binary.c_str());\n    return 0;\n}\n\n/*\n\nGiven a number in binary format, convert it to decimal format. The function should return a\nnumber in decimal form.\n\nExamples:\nbinary_to_decimal(\"db1111db\")   // returns 15\nbinary_to_decimal(\"db100000db\")   // returns 32\n\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint binary_to_decimal(string binary){\n    int decimal = 0, i = 0, j = 1;\n    for(int i = binary.length()-1; i >= 0; i--){\n        if(binary[i] == '1'){\n            decimal += j;\n        }\n        j *= 2;\n    }\n    return decimal;\n}\n\nint main(){\n    string binary = \"db1111db\";\n    printf(\"%d\\n\", binary_to_decimal(binary));\n    binary = \"db100000db\";\n    printf(\"%d\\n\", binary_to_decimal(binary));\n    return 0;\n}\n\n/*\n\nGiven a number in binary format, convert it to hexadecimal format. The function should return a\nstring with the hexadecimal number.\n\nExamples:\nbinary_to_hexadecimal(\"db1111db\")   // returns \"f1d1\"\nbinary_to_hexadecimal(\"db100000db\")   // returns \"a0a0\"\n\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring binary_to_hexadecimal(string binary){\n    string hexadecimal = \"\";\n    int decimal = binary_to_decimal(binary);\n    while(decimal){\n        int remainder = decimal%16;\n        if(remainder < 10)\n            hexadecimal += (char)(remainder + 48);\n        else\n            hexadecimal += (char)(remainder + 55);\n        decimal /= 16;\n    }\n    reverse(hexadecimal.begin(), hexadecimal.end());\n    return hexadecimal;\n}\n\nint main(){\n    string binary = \"db1111db\";\n    printf(\"%s\\n\", binary_to_hexadecimal(binary).c_str());\n    binary = \"db100000db\";\n    printf(\"%s\\n\", binary_to_hexadecimal(binary).c_str());\n    return 0;\n}\n\n/*\n\nGiven a number in hexadecimal format, convert it to binary format. The function should return a\nstring with the binary number.\n\nExamples:\nhexadecimal_to_binary(\"f1d1\")   // returns \"db1111db\"\nhexadecimal_to_binary(\"a0a0\")   // returns \"db100000db\"\n\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring hexadecimal_to_binary(string hexadecimal){\n    string binary = \"\";\n    int decimal = 0, i"}
{"task_id": "CPP/80", "prompt": "/*\nYou are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n", "generation": "    int len = s.length();\n    if(len < 3) return false;\n    int count = 0;\n    for(int i = 0; i < len; i++){\n        if(s[i] == s[i+1] && s[i] == s[i+2]){\n            count++;\n        }\n    }\n    if(count == 1) return true;\n    else return false;\n}\nint main(){\n    string s = \"aabb\";\n    printf(\"%s\\n\", is_happy(s).c_str());\n    s = \"adb\";\n    printf(\"%s\\n\", is_happy(s).c_str());\n    s = \"xyy\";\n    printf(\"%s\\n\", is_happy(s).c_str());\n    return 0;\n}\n"}
{"task_id": "CPP/81", "prompt": "/*\nIt is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a vector of GPAs for some students and you have to write \na function that can output a vector of letter grades using the following table:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n", "generation": "    vector<string> grade_vector;\n    for(int i = 0; i < grades.size(); i++){\n        if(grades[i] >= 4.0){\n            grade_vector.push_back(\"A+\");\n        }\n        else if(grades[i] >= 3.7){\n            grade_vector.push_back(\"A\");\n        }\n        else if(grades[i] >= 3.3){\n            grade_vector.push_back(\"A-\");\n        }\n        else if(grades[i] >= 3.0){\n            grade_vector.push_back(\"B+\");\n        }\n        else if(grades[i] >= 2.7){\n            grade_vector.push_back(\"B\");\n        }\n        else if(grades[i] >= 2.3){\n            grade_vector.push_back(\"B-\");\n        }\n        else if(grades[i] >= 2.0){\n            grade_vector.push_back(\"C+\");\n        }\n        else if(grades[i] >= 1.7){\n            grade_vector.push_back(\"C\");\n        }\n        else if(grades[i] >= 1.3){\n            grade_vector.push_back(\"C-\");\n        }\n        else if(grades[i] >= 1.0){\n            grade_vector.push_back(\"D+\");\n        }\n        else if(grades[i] >= 0.7){\n            grade_vector.push_back(\"D\");\n        }\n        else if(grades[i] >= 0.0){\n            grade_vector.push_back(\"D-\");\n        }\n        else{\n            grade_vector.push_back(\"E\");\n        }\n    }\n    return grade_vector;\n}\n\nint main(){\n    vector<float> grades;\n    grades.push_back(4.0);\n    grades.push_back(3);\n    grades.push_back(1.7);\n    grades.push_back(2);\n    grades.push_back(3.5);\n    vector<string> grade_vector = numerical_letter_grade(grades);\n    for(int i = 0; i < grade_vector.size(); i++){\n        printf(\"%s\\n\", grade_vector[i].c_str());\n    }\n    return 0;\n}"}
{"task_id": "CPP/82", "prompt": "/*\nWrite a function that takes a string and returns true if the string\nlength is a prime number or false otherwise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n", "generation": "    int i;\n    for(i=2;i<=str.length();i++){\n        if(str.length()%i==0){\n            return false;\n        }\n    }\n    return true;\n}\nint main(){\n    string str;\n    getline(cin,str);\n    if(prime_length(str)){\n        printf(\"Prime\\n\");\n    }else{\n        printf(\"Not prime\\n\");\n    }\n    return 0;\n}\n"}
{"task_id": "CPP/83", "prompt": "/*\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n*/\n#include<stdio.h>\nusing namespace std;\nint starts_one_ends(int n){\n", "generation": "    int count = 0;\n    while(n){\n        if(n%10 == 1){\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    int count = starts_one_ends(n);\n    printf(\"%d\",count);\n    return 0;\n}\n"}
{"task_id": "CPP/84", "prompt": "/*\nGiven a positive integer N, return the total sum of its digits in binary.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 \u2264 N \u2264 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n", "generation": "    string s;\n    int sum = 0;\n    while(N > 0){\n        sum += N%10;\n        N /= 10;\n    }\n    while(sum > 0){\n        s += to_string(sum%2);\n        sum /= 2;\n    }\n    return s;\n}\nint main(){\n    int N = 1000;\n    string s = solve(N);\n    printf(\"%s\\n\", s.c_str());\n    return 0;\n}\n"}
{"task_id": "CPP/85", "prompt": "/*\nGiven a non-empty vector of integers lst. add the even elements that are at odd indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n", "generation": "    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(i%2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nint main(){\n    vector<int> lst = {4, 2, 6, 7};\n    printf(\"%d\\n\", add(lst));\n    return 0;\n}\n"}
{"task_id": "CPP/86", "prompt": "/*\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n", "generation": "    string res;\n    for(int i=0;i<s.size();i++){\n        if(s[i]!=' '){\n            res+=s[i];\n        }\n    }\n    for(int i=0;i<res.size();i++){\n        if(res[i]!=' '){\n            int j=i+1;\n            while(j<res.size()){\n                if(res[i]>res[j]){\n                    char temp=res[i];\n                    res[i]=res[j];\n                    res[j]=temp;\n                }\n                j++;\n            }\n        }\n    }\n    return res;\n}\n\nint main(){\n    string s=\"Hi\";\n    string res=anti_shuffle(s);\n    printf(\"%s\\n\",res.c_str());\n    return 0;\n}"}
{"task_id": "CPP/87", "prompt": "/*\nYou are given a 2 dimensional data, as a nested vectors,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the vector,\nand return vector of vectors, {{x1, y1}, {x2, y2} ...} such that\neach vector is a coordinate - {row, columns}, starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n", "generation": "    vector<vector<int>> res;\n    if(lst.size() == 0){\n        return res;\n    }\n    vector<int> row;\n    for(int i = 0; i < lst.size(); i++){\n        row = lst[i];\n        int j = 0;\n        while(j < row.size()){\n            if(row[j] == x){\n                vector<int> temp;\n                temp.push_back(i);\n                temp.push_back(j);\n                res.push_back(temp);\n                break;\n            }\n            j++;\n        }\n    }\n    sort(res.begin(), res.end(), [](vector<int> a, vector<int> b){\n        if(a[0] == b[0]){\n            return a[1] > b[1];\n        }\n        return a[0] > b[0];\n    });\n    sort(res.begin(), res.end(), [](vector<int> a, vector<int> b){\n        if(a[1] == b[1]){\n            return a[0] < b[0];\n        }\n        return a[1] < b[1];\n    });\n    return res;\n}\n\n/*\nGiven lst, and integer x, find integers x in the vector,\nand return vector of vectors, {{x1, y1}, {x2, y2}...} such that\neach vector is a coordinate - {row, columns}, starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n\nExamples:\nget_column({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_column({}, 1) == {}\nget_column({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_column(vector<vector<int>> lst, int x){\n    vector<vector<int>> res;\n    if(lst.size() == 0){\n        return res;\n    }\n    vector<int> column;\n    for(int i = 0; i < lst.size(); i++){\n        column = lst[i];\n        int j = 0;\n        while(j < column.size()){\n            if(column[j] == x){\n                vector<int> temp;\n                temp.push_back(i);\n                temp.push_back(j);\n                res.push_back(temp);\n                break;\n            }\n            j++;\n        }\n    }\n    sort(res.begin(), res.end(), [](vector<int> a, vector<int> b"}
{"task_id": "CPP/88", "prompt": "/*\nGiven a vector of non-negative integers, return a copy of the given vector after sorting,\nyou will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don't change the given vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n", "generation": "    sort(array.begin(), array.end());\n    return array;\n}\n\nint main(){\n    vector<int> array = {};\n    vector<int> array1 = {5};\n    vector<int> array2 = {2, 4, 3, 0, 1, 5};\n    vector<int> array3 = {2, 4, 3, 0, 1, 5, 6};\n    vector<int> array4 = {2, 4, 3, 0, 1, 5, 6, 7};\n    vector<int> array5 = {2, 4, 3, 0, 1, 5, 6, 7, 8};\n    vector<int> array6 = {2, 4, 3, 0, 1, 5, 6, 7, 8, 9};\n    vector<int> array7 = {2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10};\n    vector<int> array8 = {2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11};\n    vector<int> array9 = {2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12};\n    vector<int> array10 = {2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13};\n    vector<int> array11 = {2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14};\n    vector<int> array12 = {2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};\n    vector<int> array13 = {2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};\n    vector<int> array14 = {2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n    vector<int> array15 = {2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18};\n    vector<int> array16 = {2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19};\n    vector<int> array17 = {2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};\n    vector<int> array18 = {2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21};\n    vector<int> array19 = {2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22};\n    vector<int> array20 = {2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23};"}
{"task_id": "CPP/89", "prompt": "/*\nCreate a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n", "generation": "    string result = \"\";\n    for(int i = 0; i < s.length(); i++){\n        char c = s[i];\n        if(c >= 'a' && c <= 'z'){\n            c = (char)((c - 'a' + 2) % 26 + 'a');\n        }\n        else if(c >= 'A' && c <= 'Z'){\n            c = (char)((c - 'A' + 2) % 26 + 'A');\n        }\n        result += c;\n    }\n    return result;\n}\nint main(){\n    string s;\n    getline(cin, s);\n    cout << encrypt(s) << endl;\n    return 0;\n}\n\n/*\n\nThe decrypt function takes a string encrypted with the alphabet being rotated and\nreturns a string decrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two multiplied to two places.\nFor example:\ndecrypt(\"ewhjklnop\") returns \"asdfghjkl\"\ndecrypt(\"kj\") returns \"gf\"\ndecrypt(\"ix\") returns \"et\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decrypt(string s){\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++){\n        char c = s[i];\n        if(c >= 'a' && c <= 'z'){\n            c = (char)((c - 'a' - 2) % 26 + 'a');\n        }\n        else if(c >= 'A' && c <= 'Z'){\n            c = (char)((c - 'A' - 2) % 26 + 'A');\n        }\n        result += c;\n    }\n    return result;\n}\nint main(){\n    string s;\n    getline(cin, s);\n    cout << decrypt(s) << endl;\n    return 0;\n}\n\n/*\n\nThe encryptor function takes a string as an argument and returns a string encrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two multiplied to two places.\nFor example:\nencryptor(\"hi\") returns \"lm\"\nencryptor(\"asdfghjkl\") returns \"ewhjklnop\"\nencryptor(\"gf\") returns \"kj\"\nencryptor(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encryptor(string s){\n    string result = \"\";\n    for(int i = 0; i < s.length(); i++){\n        char c = s[i];\n        if(c >= 'a' && c <= 'z'){\n            c = (char)((c - 'a' + 2) % 26 + 'a');\n        }\n        else if(c >= 'A' && c <= 'Z'){\n            c = (char)((c - 'A' + 2) % 26 + 'A');\n        }\n        result += c;\n    }\n    return result;\n}\nint main(){\n    string s;\n    getline(cin, s);\n    cout << encryptor(s) << endl;\n    return 0;\n}\n\n/*\n\nThe decryptor function takes a string encrypted with the alphabet being rotated and\nreturns a string decrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two multiplied to two places.\nFor example:\ndecryptor(\"ewhjklnop\") returns \"asdfghjkl\"\ndecryptor(\"kj\") returns \"gf\"\ndecryptor(\"ix\") returns \"et\"\n*/\n#include<stdio"}
{"task_id": "CPP/90", "prompt": "/*\nYou are given a vector of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the vector.\nReturn None if there is no such element.\n\nnext_smallest({1, 2, 3, 4, 5}) == 2\nnext_smallest({5, 1, 4, 3, 2}) == 2\nnext_smallest({}) == None\nnext_smallest({1, 1}) == None\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint next_smallest(vector<int> lst){\n", "generation": "    int smallest = lst[0];\n    int smallest_index = 0;\n    for(int i=1; i<lst.size(); i++){\n        if(lst[i] < smallest){\n            smallest = lst[i];\n            smallest_index = i;\n        }\n    }\n    return smallest_index;\n}\n\nint main(){\n    vector<int> lst = {1, 2, 3, 4, 5};\n    printf(\"%d\\n\", next_smallest(lst));\n    return 0;\n}\n\n/*\n\n// Next Smallest Element\n\n// Given a vector of integers, write a function next_smallest() that returns the 2nd smallest element of the vector.\nReturn None if there is no such element.\n\nnext_smallest({1, 2, 3, 4, 5}) == 2\nnext_smallest({5, 1, 4, 3, 2}) == 2\nnext_smallest({}) == None\nnext_smallest({1, 1}) == None\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint next_smallest(vector<int> lst){\n    int smallest = lst[0];\n    int smallest_index = 0;\n    for(int i=1; i<lst.size(); i++){\n        if(lst[i] < smallest){\n            smallest = lst[i];\n            smallest_index = i;\n        }\n    }\n    return smallest_index;\n}\n\nint main(){\n    vector<int> lst = {1, 2, 3, 4, 5};\n    printf(\"%d\\n\", next_smallest(lst));\n    return 0;\n}\n\n/*\n\n// Next Smallest Element\n\n// Given a vector of integers, write a function next_smallest() that returns the 2nd smallest element of the vector.\nReturn None if there is no such element.\n\nnext_smallest({1, 2, 3, 4, 5}) == 2\nnext_smallest({5, 1, 4, 3, 2}) == 2\nnext_smallest({}) == None\nnext_smallest({1, 1}) == None\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint next_smallest(vector<int> lst){\n    int smallest = lst[0];\n    int smallest_index = 0;\n    for(int i=1; i<lst.size(); i++){\n        if(lst[i] < smallest){\n            smallest = lst[i];\n            smallest_index = i;\n        }\n    }\n    return smallest_index;\n}\n\nint main(){\n    vector<int> lst = {1, 2, 3, 4, 5};\n    printf(\"%d\\n\", next_smallest(lst));\n    return 0;\n}\n\n/*\n\n// Next Smallest Element\n\n// Given a vector of integers, write a function next_smallest() that returns the 2nd smallest element of the vector.\nReturn None if there is no such element.\n\nnext_smallest({1, 2, 3, 4, 5}) == 2\nnext_smallest({5, 1, 4, 3, 2}) == 2\nnext_smallest({}) == None\nnext_smallest({1, 1}) == None\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint next_smallest(vector<int> lst){\n    int smallest = lst[0];\n    int smallest_index = 0;\n    for(int i=1; i<l"}
{"task_id": "CPP/91", "prompt": "/*\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\n\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n", "generation": "    int i=0;\n    while(S[i]!='.' && S[i]!='?' && S[i]!='!'){\n        i++;\n    }\n    if(S[i]=='.' || S[i]=='?' || S[i]=='!'){\n        return 1;\n    }\n    return 0;\n}\nint main(){\n    string S;\n    while(getline(cin,S)){\n        if(is_bored(S)){\n            printf(\"Bored\\n\");\n        }else{\n            printf(\"Not bored\\n\");\n        }\n    }\n    return 0;\n}\n"}
{"task_id": "CPP/92", "prompt": "/*\nCreate a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\n\nExamples\nany_int(5, 2, 7) \u279e true\n\nany_int(3, 2, 2) \u279e false\n\nany_int(3, -2, 1) \u279e true\n\nany_int(3.6, -2.2, 2) \u279e false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n", "generation": "    if(a==b+c){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main(){\n    float a,b,c;\n    printf(\"Enter the first number: \");\n    scanf(\"%f\",&a);\n    printf(\"Enter the second number: \");\n    scanf(\"%f\",&b);\n    printf(\"Enter the third number: \");\n    scanf(\"%f\",&c);\n    if(any_int(a,b,c)){\n        printf(\"%f is equal to %f + %f\",a,b,c);\n    }\n    else{\n        printf(\"%f is not equal to %f + %f\",a,b,c);\n    }\n    return 0;\n}\n\n\n/*\n\nGiven three int values, a b c, return their sum. However, if one of the values is 13 then that value counts as a triplet and the sum of the other two values (7+2) is taken as the sum of 13.\n\nsum3(1, 2, 13) \u279e 6\n\nsum3(1, 2, 7) \u279e 2\n\nsum3(1, 2, 1) \u279e 6\n\nsum3(0, 0, 0) \u279e 0\n\nsum3(1, 2, 3) \u279e 6\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint sum3(int a,int b,int c){\n    if(a==13){\n        return (b+c);\n    }\n    else if(b==13){\n        return (a+c);\n    }\n    else if(c==13){\n        return (a+b);\n    }\n    else{\n        return (a+b+c);\n    }\n}\nint main(){\n    int a,b,c;\n    printf(\"Enter the first number: \");\n    scanf(\"%d\",&a);\n    printf(\"Enter the second number: \");\n    scanf(\"%d\",&b);\n    printf(\"Enter the third number: \");\n    scanf(\"%d\",&c);\n    printf(\"The sum of %d + %d + %d is %d\",a,b,c,sum3(a,b,c));\n    return 0;\n}\n\n\n/*\n\nGiven an int n, return the absolute difference between n and 21, except return double the absolute difference if n is over 21.\n\nabs_diff21(19) \u279e 2\n\nabs_diff21(25) \u279e 5\n\nabs_diff21(0) \u279e 0\n\nabs_diff21(10) \u279e 10\n\nabs_diff21(21) \u279e 0\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint abs_diff21(int n){\n    if(n>=21){\n        return (2*abs(n-21));\n    }\n    else{\n        return (abs(n-21));\n    }\n}\nint main(){\n    int n;\n    printf(\"Enter the number: \");\n    scanf(\"%d\",&n);\n    printf(\"The absolute difference between %d and 21 is %d\",n,abs_diff21(n));\n    return 0;\n}\n\n\n/*\n\nGiven an int n, return true if it is a power of 2.\n\nis_power_of_2(1) \u279e true\n\nis_power_of_2(4) \u279e false\n\nis_power_of_2(9) \u279e true\n\nis_power_of_2"}
{"task_id": "CPP/93", "prompt": "/*\nWrite a function that takes a message, and encodes in such a \nway that it swaps case of all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvowel in the english alphabet. \nAssume only letters. \n\nExamples:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n", "generation": "    string encoded;\n    for(int i=0;i<message.length();i++){\n        if(message[i]>='A' && message[i]<='Z'){\n            encoded.push_back(message[i]+2);\n        }\n        else if(message[i]>='a' && message[i]<='z'){\n            encoded.push_back(message[i]-2);\n        }\n        else{\n            encoded.push_back(message[i]);\n        }\n    }\n    return encoded;\n}\nint main(){\n    string message;\n    getline(cin,message);\n    cout<<encode(message)<<endl;\n    return 0;\n}\n"}
{"task_id": "CPP/94", "prompt": "/*\nYou are given a vector of integers.\nYou need to find the largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n", "generation": "    int sum=0;\n    for(int i=0;i<lst.size();i++){\n        sum+=lst[i];\n    }\n    return sum;\n}\nint main(){\n    vector<int> lst;\n    lst.push_back(0);\n    lst.push_back(3);\n    lst.push_back(2);\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(5);\n    lst.push_back(7);\n    lst.push_back(4);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(5);\n    lst.push_back(2);\n    lst.push_back(181);\n    lst.push_back(32);\n    lst.push_back(4);\n    lst.push_back(32);\n    lst.push_back(3);\n    lst.push_back(2);\n    lst.push_back(32);\n    lst.push_back(324);\n    lst.push_back(4);\n    lst.push_back(3);\n    lst.push_back(2);\n    lst.push_back(32);\n    lst.push_back(324);\n    lst.push_back(4);\n    lst.push_back(3);\n    lst.push_back(2);\n    lst.push_back(32);\n    lst.push_back(324);\n    lst.push_back(4);\n    lst.push_back(3);\n    lst.push_back(2);\n    lst.push_back(32);\n    lst.push_back(324);\n    lst.push_back(4);\n    lst.push_back(3);\n    lst.push_back(2);\n    lst.push_back(32);\n    lst.push_back(324);\n    lst.push_back(4);\n    lst.push_back(3);\n    lst.push_back(2);\n    lst.push_back(32);\n    lst.push_back(324);\n    lst.push_back(4);\n    lst.push_back(3);\n    lst.push_back(2);\n    lst.push_back(32);\n    lst.push_back(324);\n    lst.push_back(4);\n    lst.push_back(3);\n    lst.push_back(2);\n    lst.push_back(32);\n    lst.push_back(324);\n    lst.push_back(4);\n    lst.push_back(3);\n    lst.push_back(2);\n    lst.push_back(32);\n    lst.push_back"}
{"task_id": "CPP/95", "prompt": "/*\nGiven a map, return true if all keys are strings in lower \ncase or all keys are strings in upper case, else return false.\nThe function should return false is the given map is empty.\nExamples:\ncheck_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n", "generation": "    for(auto it=dict.begin();it!=dict.end();it++){\n        if(it->first.size()==0 || it->second.size()==0){\n            return false;\n        }\n        if(it->first.size()>1 && it->first.size()<=5){\n            if(it->first.at(0)>='A' && it->first.at(0)<='Z'){\n                if(it->first.at(1)>='A' && it->first.at(1)<='Z'){\n                    if(it->first.at(2)>='A' && it->first.at(2)<='Z'){\n                        if(it->first.at(3)>='A' && it->first.at(3)<='Z'){\n                            if(it->first.at(4)>='A' && it->first.at(4)<='Z'){\n                                if(it->second.at(0)>='A' && it->second.at(0)<='Z'){\n                                    if(it->second.at(1)>='A' && it->second.at(1)<='Z'){\n                                        if(it->second.at(2)>='A' && it->second.at(2)<='Z'){\n                                            if(it->second.at(3)>='A' && it->second.at(3)<='Z'){\n                                                if(it->second.at(4)>='A' && it->second.at(4)<='Z'){\n                                                    return true;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\n\nint main(){\n    map<string,string> dict;\n    dict[\"a\"]=\"apple\";\n    dict[\"b\"]=\"banana\";\n    dict[\"c\"]=\"cucumber\";\n    dict[\"d\"]=\"durian\";\n    dict[\"e\"]=\"eggplant\";\n    dict[\"f\"]=\"fig\";\n    dict[\"g\"]=\"grapes\";\n    dict[\"h\"]=\"honey\";\n    dict[\"i\"]=\"island\";\n    dict[\"j\"]=\"juliet\";\n    dict[\"k\"]=\"kilo\";\n    dict[\"l\"]=\"lily\";\n    dict[\"m\"]=\"mango\";\n    dict[\"n\"]=\"november\";\n    dict[\"o\"]=\"october\";\n    dict[\"p\"]=\"papa\";\n    dict[\"q\"]=\"quince\";\n    dict[\"r\"]=\"romeo\";\n    dict[\"s\"]=\"sierra\";\n    dict[\"t\"]=\"tango\";\n    dict[\"u\"]=\"uniform\";\n    dict[\"v\"]=\"violet\";\n    dict[\"w\"]=\"wango\";\n    dict[\"x\"]=\"xray\";\n    dict[\"y\"]=\"yak\";\n    dict[\"z\"]=\"zebra\";\n    if(check_dict_case(dict)){\n        printf(\"All keys are strings in lower case or all keys are strings in upper case\\n\");\n    }\n    else{\n        printf"}
{"task_id": "CPP/96", "prompt": "/*\nImplement a function that takes an non-negative integer and returns a vector of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n", "generation": "    vector<int> primes;\n    if(n<=0){\n        return primes;\n    }\n    int i;\n    for(i=2;i<=n;i++){\n        if(n%i==0){\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> primes = count_up_to(n);\n    for(int i=0;i<primes.size();i++){\n        printf(\"%d \",primes[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n"}
{"task_id": "CPP/97", "prompt": "/*\nComplete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n", "generation": "    int carry=0;\n    int res=0;\n    while(a>0){\n        int lastDigit=a%10;\n        a=a/10;\n        int sum=lastDigit*b+carry;\n        carry=sum/10;\n        res=sum%10;\n    }\n    if(carry>0)\n        res=carry+res;\n    return res;\n}\nint main(){\n    int a,b;\n    scanf(\"%d %d\",&a,&b);\n    printf(\"%d\\n\",multiply(a,b));\n    return 0;\n}\n"}
{"task_id": "CPP/98", "prompt": "/*\nGiven a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n", "generation": "    int count = 0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]>='A' && s[i]<='Z'){\n            if(i%2==0){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nint main(){\n    string s = \"aBCdEf\";\n    printf(\"%d\\n\",count_upper(s));\n    return 0;\n}"}
{"task_id": "CPP/99", "prompt": "/*\nCreate a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\n\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n", "generation": "    int n = atoi(value.c_str());\n    int i = 1;\n    while(n/i!= 0){\n        i++;\n    }\n    return n/i;\n}\n\n/*\nGiven a string representing a number, return the number as a string.\n\nExamples\n>>> number_as_string(\"10\")\n\"10\"\n>>> number_as_string(\"15.3\")\n\"15.3\"\n\nNote:\nIf the number is equidistant from two integers, round it away from zero.\nFor example number_as_string(\"14.5\") should return \"15\" and number_as_string(\"-14.5\") should return \"-15\".\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring number_as_string(string value){\n    int n = atoi(value.c_str());\n    int i = 1;\n    while(n/i!= 0){\n        i++;\n    }\n    return to_string(n/i);\n}\n\n/*\nGiven a string representing a number, return the number as a string.\n\nExamples\n>>> number_as_string(\"10\")\n\"10\"\n>>> number_as_string(\"15.3\")\n\"15.3\"\n\nNote:\nIf the number is equidistant from two integers, round it away from zero.\nFor example number_as_string(\"14.5\") should return \"15\" and number_as_string(\"-14.5\") should return \"-15\".\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring number_as_string(string value){\n    int n = atoi(value.c_str());\n    int i = 1;\n    while(n/i!= 0){\n        i++;\n    }\n    return to_string(n/i);\n}\n\n/*\nGiven a string representing a number, return the number as a string.\n\nExamples\n>>> number_as_string(\"10\")\n\"10\"\n>>> number_as_string(\"15.3\")\n\"15.3\"\n\nNote:\nIf the number is equidistant from two integers, round it away from zero.\nFor example number_as_string(\"14.5\") should return \"15\" and number_as_string(\"-14.5\") should return \"-15\".\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring number_as_string(string value){\n    int n = atoi(value.c_str());\n    int i = 1;\n    while(n/i!= 0){\n        i++;\n    }\n    return to_string(n/i);\n}\n\n/*\nGiven a string representing a number, return the number as a string.\n\nExamples\n>>> number_as_string(\"10\")\n\"10\"\n>>> number_as_string(\"15.3\")\n\"15.3\"\n\nNote:\nIf the number is equidistant from two integers, round it away from zero.\nFor example number_as_string(\"14.5\") should return \"15\" and number_as_string(\"-14.5\") should return \"-15\".\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring number_as_string(string value){\n    int n = atoi(value.c_str());\n    int i = 1;\n    while(n/i!= 0){\n        i++;\n    }\n    return to"}
{"task_id": "CPP/100", "prompt": "/*\nGiven a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n    - the next odd number if n is odd.\n    - the next even number if n is even.\nReturn the number of stones in each level in a vector, where element at index\ni represents the number of stones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n", "generation": "    vector<int> result;\n    int i;\n    if(n%2==0){\n        for(i=0;i<n;i++){\n            result.push_back(i+1);\n        }\n    }else{\n        for(i=0;i<n;i++){\n            result.push_back(i+1);\n        }\n        result.push_back(n+1);\n    }\n    return result;\n}\n\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> result = make_a_pile(n);\n    for(int i=0;i<result.size();i++){\n        printf(\"%d \",result[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n"}
{"task_id": "CPP/101", "prompt": "/*\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return a vector of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\", 'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n", "generation": "\tvector<string> words;\n\tstring word;\n\tfor(int i=0; i<s.length(); i++){\n\t\tif(s[i] == ',' || s[i] ==''){\n\t\t\tif(word.length() > 0){\n\t\t\t\twords.push_back(word);\n\t\t\t\tword.clear();\n\t\t\t}\n\t\t}else{\n\t\t\tword += s[i];\n\t\t}\n\t}\n\tif(word.length() > 0){\n\t\twords.push_back(word);\n\t\tword.clear();\n\t}\n\treturn words;\n}\n\nint main(){\n\tstring s = \"Hi, my name is John\";\n\tvector<string> words = words_string(s);\n\tfor(int i=0; i<words.size(); i++){\n\t\tprintf(\"%s\\n\", words[i].c_str());\n\t}\n\treturn 0;\n}"}
{"task_id": "CPP/102", "prompt": "/*\nThis function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n", "generation": "    if(x==y) return x;\n    if(x==y-1) return x;\n    if(x==y+1) return x;\n    if(x%2==0 && y%2==0) return choose_num(x/2,y/2);\n    if(x%2==0) return choose_num(x/2,y);\n    if(y%2==0) return choose_num(x,y/2);\n    return -1;\n}\n\nint main(){\n    int x,y;\n    scanf(\"%d %d\",&x,&y);\n    printf(\"%d\\n\",choose_num(x,y));\n    return 0;\n}\n"}
{"task_id": "CPP/103", "prompt": "/*\nYou are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m). \nRound the answer to the nearest integer(smaller one) and convert that to binary.\nIf n is greater than m, return \"-1\".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\n", "generation": "    if(n>m){\n        return \"-1\";\n    }\n    int sum = 0;\n    for(int i=n;i<=m;i++){\n        sum += i;\n    }\n    int avg = sum/((m-n)+1);\n    string ans = \"\";\n    for(int i=0;i<avg;i++){\n        ans += \"1\";\n    }\n    for(int i=avg;i<=9;i++){\n        ans += \"0\";\n    }\n    return ans;\n}\nint main(){\n    int n,m;\n    scanf(\"%d %d\",&n,&m);\n    string ans = rounded_avg(n,m);\n    printf(\"%s\\n\",ans.c_str());\n    return 0;\n}\n"}
{"task_id": "CPP/104", "prompt": "/*\nGiven a vector of positive integers x. return a sorted vector of all \nelements that hasn't any even digit.\n\nNote: Returned vector should be sorted in increasing order.\n\nFor example:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n", "generation": "    vector<int> ans;\n    int i=0;\n    while(x[i]==0){\n        i++;\n    }\n    while(x[i]!=0){\n        int temp=x[i];\n        int j=0;\n        while(x[i]==temp){\n            j++;\n            i++;\n        }\n        ans.push_back(temp);\n        x[i]=0;\n        while(j>0){\n            x[i]=x[i]/10;\n            j--;\n        }\n    }\n    return ans;\n}\n\nint main(){\n    vector<int> x={15, 33, 1422, 1};\n    vector<int> ans=unique_digits(x);\n    for(int i=0;i<ans.size();i++){\n        printf(\"%d \",ans[i]);\n    }\n    return 0;\n}"}
{"task_id": "CPP/105", "prompt": "/*\nGiven a vector of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting vector, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1 , 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n", "generation": "    vector<string> v;\n    for(int i=0;i<arr.size();i++){\n        string s = to_string(arr[i]);\n        if(s.length() == 3){\n            v.push_back(s);\n        }\n    }\n    return v;\n}\nvector<string> by_length2(vector<int> arr){\n    vector<string> v;\n    for(int i=0;i<arr.size();i++){\n        string s = to_string(arr[i]);\n        if(s.length() == 4){\n            v.push_back(s);\n        }\n    }\n    return v;\n}\nvector<string> by_length3(vector<int> arr){\n    vector<string> v;\n    for(int i=0;i<arr.size();i++){\n        string s = to_string(arr[i]);\n        if(s.length() == 5){\n            v.push_back(s);\n        }\n    }\n    return v;\n}\nvector<string> by_length4(vector<int> arr){\n    vector<string> v;\n    for(int i=0;i<arr.size();i++){\n        string s = to_string(arr[i]);\n        if(s.length() == 6){\n            v.push_back(s);\n        }\n    }\n    return v;\n}\nvector<string> by_length5(vector<int> arr){\n    vector<string> v;\n    for(int i=0;i<arr.size();i++){\n        string s = to_string(arr[i]);\n        if(s.length() == 7){\n            v.push_back(s);\n        }\n    }\n    return v;\n}\nvector<string> by_length6(vector<int> arr){\n    vector<string> v;\n    for(int i=0;i<arr.size();i++){\n        string s = to_string(arr[i]);\n        if(s.length() == 8){\n            v.push_back(s);\n        }\n    }\n    return v;\n}\nvector<string> by_length7(vector<int> arr){\n    vector<string> v;\n    for(int i=0;i<arr.size();i++){\n        string s = to_string(arr[i]);\n        if(s.length() == 9){\n            v.push_back(s);\n        }\n    }\n    return v;\n}\nvector<string> by_length8(vector<int> arr){\n    vector<string> v;\n    for(int i=0;i<arr.size();i++){\n        string s = to_string(arr[i]);\n        if(s.length() == 10){\n            v.push_back(s);\n        }\n    }\n    return v;\n}\nvector<string> by_length9(vector<int> arr){\n    "}
{"task_id": "CPP/106", "prompt": "/*\nImplement the function f that takes n as a parameter,\nand returns a vector of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n", "generation": "    vector<int> v;\n    if(n==0){\n        v.push_back(1);\n        return v;\n    }\n    vector<int> v1 = f(n-1);\n    for(int i=0;i<v1.size();i++){\n        v.push_back(v1[i]*n);\n    }\n    return v;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> v = f(n);\n    for(int i=0;i<v.size();i++){\n        printf(\"%d \",v[i]);\n    }\n    return 0;\n}\n"}
{"task_id": "CPP/107", "prompt": "/*\nGiven a positive integer n, return a vector that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n", "generation": "    vector<int> v;\n    int i=1;\n    while(i<=n){\n        if(i%2==0){\n            v.push_back(i);\n        }\n        i++;\n    }\n    return v;\n}\n\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> v = even_odd_palindrome(n);\n    for(int i=0;i<v.size();i++){\n        printf(\"%d \",v[i]);\n    }\n    return 0;\n}"}
{"task_id": "CPP/108", "prompt": "/*\nWrite a function count_nums which takes a vector of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n", "generation": "    int count = 0;\n    for(int i = 0; i < n.size(); i++){\n        if(n[i] > 0){\n            count++;\n        }\n    }\n    return count;\n}\nint main(){\n    vector<int> n = {-1, 11, -11};\n    printf(\"%d\", count_nums(n));\n    return 0;\n}\n"}
{"task_id": "CPP/109", "prompt": "/*\nWe have a vector \"arr\" of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the vector will be randomly ordered. Your task is to determine if\nit is possible to get a vector sorted in non-decreasing order by performing \nthe following operation on the given vector:\n    You are allowed to perform right shift operation any number of times.\n\nOne right shift operation means shifting all elements of the vector by one\nposition in the right direction. The last element of the vector will be moved to\nthe starting position in the vector i.e. 0th index. \n\nIf it is possible to obtain the sorted vector by performing the above operation\nthen return true else return false.\nIf the given vector is empty then return true.\n\nNote: The given vector is guaranteed to have unique elements.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n", "generation": "    if(arr.size()==0)\n        return true;\n    int i=0;\n    while(i<arr.size()-1){\n        if(arr[i]>arr[i+1]){\n            int temp=arr[i];\n            arr[i]=arr[i+1];\n            arr[i+1]=temp;\n        }\n        else\n            i++;\n    }\n    if(arr[i]>arr[i+1])\n        return false;\n    else\n        return true;\n}\n\nint main(){\n    vector<int> arr;\n    arr.push_back(3);\n    arr.push_back(4);\n    arr.push_back(5);\n    arr.push_back(1);\n    arr.push_back(2);\n    if(move_one_ball(arr))\n        printf(\"Possible\");\n    else\n        printf(\"Not possible\");\n    return 0;\n}"}
{"task_id": "CPP/110", "prompt": "/*\nIn this problem, you will implement a function that takes two vectors of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a vector of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\n", "generation": "    string result=\"NO\";\n    int n=lst1.size();\n    if(n==0) return result;\n    if(n==1){\n        if(lst1[0]%2==0) result=\"YES\";\n        return result;\n    }\n    if(n==2){\n        if(lst1[0]%2==0 && lst1[1]%2==0) result=\"YES\";\n        return result;\n    }\n    vector<int> lst3(n);\n    for(int i=0;i<n;i++){\n        lst3[i]=lst1[i];\n    }\n    int i=0;\n    int j=1;\n    while(i<n && j<n){\n        if(lst3[i]%2==0 && lst3[j]%2==0){\n            lst3[i]+=lst3[j];\n            lst3[j]=lst3[i]-lst3[j];\n            lst3[i]-=lst3[j];\n            i++;\n            j++;\n        }\n        else if(lst3[i]%2==0){\n            i++;\n        }\n        else if(lst3[j]%2==0){\n            j++;\n        }\n        else{\n            return result;\n        }\n    }\n    if(i==n && j==n) result=\"YES\";\n    return result;\n}\nint main(){\n    vector<int> lst1={1,2,3,4};\n    vector<int> lst2={1,2,3,4};\n    string result=exchange(lst1,lst2);\n    printf(\"%s\\n\",result.c_str());\n    return 0;\n}\n"}
{"task_id": "CPP/111", "prompt": "/*\nGiven a string representing a space separated lowercase letters, return a map\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n", "generation": "    map<char,int> result;\n    for(int i=0;i<test.size();i++){\n        result[test[i]]++;\n    }\n    return result;\n}\nint main(){\n    string test;\n    getline(cin,test);\n    map<char,int> result = histogram(test);\n    for(auto i=result.begin();i!=result.end();i++){\n        printf(\"%c:%d\\n\",i->first,i->second);\n    }\n    return 0;\n}\n"}
{"task_id": "CPP/112", "prompt": "/*\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a vector containing the result string and \"True\"/\"False\" for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n", "generation": "\tvector<string> result;\n\tstring temp;\n\tfor(int i=0;i<s.length();i++){\n\t\tif(s[i]!=c[0]){\n\t\t\ttemp+=s[i];\n\t\t}\n\t}\n\tresult.push_back(temp);\n\ttemp.clear();\n\tfor(int i=s.length()-1;i>=0;i--){\n\t\tif(s[i]!=c[0]){\n\t\t\ttemp+=s[i];\n\t\t}\n\t}\n\tresult.push_back(temp);\n\treturn result;\n}\nint main(){\n\tstring s=\"abcde\";\n\tstring c=\"ae\";\n\tvector<string> result=reverse_delete(s,c);\n\tfor(int i=0;i<result.size();i++){\n\t\tprintf(\"%s\\n\",result[i].c_str());\n\t}\n\treturn 0;\n}"}
{"task_id": "CPP/113", "prompt": "/*\nGiven a vector of strings, where each string consists of only digits, return a vector.\nEach element i of the output should be 'the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n", "generation": "    map<string,int> m;\n    vector<string> res;\n    for(int i=0;i<lst.size();i++){\n        string s=lst[i];\n        int odd=0;\n        for(int j=0;j<s.size();j++){\n            if(s[j]%2!=0) odd++;\n        }\n        m[s]=odd;\n    }\n    for(int i=0;i<lst.size();i++){\n        string s=lst[i];\n        int odd=0;\n        for(int j=0;j<s.size();j++){\n            if(s[j]%2!=0) odd++;\n        }\n        if(m[s]==odd) res.push_back(s);\n    }\n    return res;\n}\nint main(){\n    vector<string> lst;\n    lst.push_back(\"1234567\");\n    lst.push_back(\"3\");\n    lst.push_back(\"11111111\");\n    vector<string> res=odd_count(lst);\n    for(int i=0;i<res.size();i++){\n        printf(\"%s\\n\",res[i].c_str());\n    }\n    return 0;\n}\n"}
{"task_id": "CPP/114", "prompt": "/*\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector\nof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n", "generation": "    long long sum = 0;\n    long long min_sum = 0;\n    long long min_index = 0;\n    for(int i = 0; i < nums.size(); i++){\n        sum += nums[i];\n        if(sum < min_sum){\n            min_sum = sum;\n            min_index = i;\n        }\n    }\n    return min_sum;\n}\nint main(){\n    vector<long long> nums = {2, 3, 4, 1, 2, 4};\n    printf(\"%lld\\n\", minSubArraySum(nums));\n    return 0;\n}"}
{"task_id": "CPP/115", "prompt": "/*\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it, \nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\n", "generation": "    int max_fill = 0;\n    int n = grid.size();\n    int m = grid[0].size();\n    vector<vector<int>> dp(n,vector<int>(m,0));\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n                dp[i][j] = capacity;\n            }\n        }\n    }\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n                for(int k = 0; k < n; k++){\n                    if(i!= k){\n                        for(int l = 0; l < m; l++){\n                            if(j!= l){\n                                dp[i][j] = dp[i][j] > dp[k][l]? dp[i][j] : dp[k][l];\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < m; j++){\n            if(grid[i][j] == 1){\n                max_fill = max_fill > dp[i][j]? max_fill : dp[i][j];\n            }\n        }\n    }\n    return max_fill;\n}\nint main(){\n    vector<vector<int>> grid = {{0,0,1,0},{0,1,0,0},{1,1,1,1}};\n    int capacity = 1;\n    printf(\"%d\\n\",max_fill(grid,capacity));\n    return 0;\n}"}
{"task_id": "CPP/116", "prompt": "/*\nIn this Kata, you have to sort a vector of non-negative integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\n\nIt must be implemented like this:\n>>> sort_vector({1, 5, 2, 3, 4}) == {1, 2, 3, 4, 5}\n>>> sort_vector({-2, -3, -4, -5, -6}) == {-6, -5, -4, -3, -2}\n>>> sort_vector({1, 0, 2, 3, 4}) == {0, 1, 2, 3, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n", "generation": "    int n = arr.size();\n    vector<int> sorted_arr(n);\n    int i, j, k;\n    for(i=0; i<n; i++){\n        sorted_arr[i] = arr[i];\n    }\n    for(i=0; i<n; i++){\n        for(j=0; j<n; j++){\n            if(arr[i] == sorted_arr[j]){\n                sorted_arr[j] = -1;\n            }\n        }\n    }\n    for(i=0; i<n; i++){\n        if(sorted_arr[i]!= -1){\n            for(j=0; j<n; j++){\n                if(sorted_arr[i] == arr[j]){\n                    arr[j] = -1;\n                }\n            }\n        }\n    }\n    for(i=0; i<n; i++){\n        if(arr[i]!= -1){\n            for(j=0; j<n; j++){\n                if(arr[i] == sorted_arr[j]){\n                    sorted_arr[j] = -1;\n                }\n            }\n        }\n    }\n    for(i=0; i<n; i++){\n        if(sorted_arr[i] == -1){\n            for(j=0; j<n; j++){\n                if(sorted_arr[i] == arr[j]){\n                    sorted_arr[j] = -1;\n                }\n            }\n        }\n    }\n    for(i=0; i<n; i++){\n        if(sorted_arr[i]!= -1){\n            for(j=0; j<n; j++){\n                if(sorted_arr[i] == arr[j]){\n                    arr[j] = -1;\n                }\n            }\n        }\n    }\n    for(i=0; i<n; i++){\n        if(arr[i]!= -1){\n            for(j=0; j<n; j++){\n                if(arr[i] == sorted_arr[j]){\n                    sorted_arr[j] = -1;\n                }\n            }\n        }\n    }\n    for(i=0; i<n; i++){\n        if(sorted_arr[i]!= -1){\n            for(j=0; j<n; j++){\n                if(sorted_arr[i] == arr[j]){\n                    sorted_arr[j] = -1;\n                }\n            }\n        }\n    }\n    for(i=0; i<n; i++){\n        if(sorted_arr[i]!= -1){\n            for(j=0; j<n; j++){\n                if(sorted_arr[i] == arr[j]){\n                    sorted_arr[j] = -1;\n                }\n            }\n        }\n    }\n    for(i=0; i<n; i++){\n        if(sorted_arr[i]!= -1){\n            for(j=0; j<n; j++){\n                if(sorted_arr[i] == arr["}
{"task_id": "CPP/117", "prompt": "/*\nGiven a string s and a natural number n, you have been tasked to implement \na function that returns a vector of all words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty vector.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n", "generation": "\tvector<string> v;\n\tstring word;\n\tfor(int i=0;i<s.size();i++){\n\t\tif(s[i]==' '){\n\t\t\tv.push_back(word);\n\t\t\tword=\"\";\n\t\t}else{\n\t\t\tword+=s[i];\n\t\t}\n\t}\n\tif(word!=\"\"){\n\t\tv.push_back(word);\n\t}\n\tif(v.size()==0){\n\t\tv.push_back(\"\");\n\t}\n\tsort(v.begin(),v.end());\n\twhile(v.size()>n){\n\t\tv.erase(v.begin());\n\t}\n\treturn v;\n}\nint main(){\n\tstring s=\"Mary had a little lamb\";\n\tint n=4;\n\tvector<string> v=select_words(s,n);\n\tfor(int i=0;i<v.size();i++){\n\t\tcout<<v[i]<<endl;\n\t}\n\treturn 0;\n}\n"}
{"task_id": "CPP/118", "prompt": "/*\nYou are given a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition. \n\nYou may assume that the given string contains English letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n", "generation": "    int vowels = 0;\n    int consonants = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    for(i = 0; i < word.length(); i++){\n        if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u'){\n            vowels++;\n        }\n    }\n    for(i = 0; i < word.length(); i++){\n        if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u'){\n            vowels++;\n        }\n    }\n    for(i = 0; i < word.length(); i++){\n        if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u'){\n            vowels++;\n        }\n    }\n    for(i = 0; i < word.length(); i++){\n        if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u'){\n            vowels++;\n        }\n    }\n    for(i = 0; i < word.length(); i++){\n        if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u'){\n            vowels++;\n        }\n    }\n    for(i = 0; i < word.length(); i++){\n        if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u'){\n            vowels++;\n        }\n    }\n    for(i = 0; i < word.length(); i++){\n        if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u'){\n            vowels++;\n        }\n    }\n    for(i = 0; i < word.length(); i++){\n        if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u'){\n            vowels++;\n        }\n    }\n    for(i = 0; i < word.length(); i++){\n        if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i"}
{"task_id": "CPP/119", "prompt": "/*\nYou are given a vector of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n", "generation": "    int n = lst.size();\n    if(n == 0){\n        return \"No\";\n    }\n    int open = 0;\n    int close = 0;\n    for(int i = 0; i < n; i++){\n        if(lst[i] == \"(\"){\n            open++;\n        }else{\n            close++;\n        }\n    }\n    if(open == close){\n        return \"Yes\";\n    }\n    int open_count = 0;\n    int close_count = 0;\n    for(int i = 0; i < n; i++){\n        if(lst[i] == \"(\"){\n            open_count++;\n        }else{\n            close_count++;\n        }\n    }\n    if(open_count == close_count){\n        return \"Yes\";\n    }\n    int open_count_temp = 0;\n    int close_count_temp = 0;\n    for(int i = 0; i < n; i++){\n        if(lst[i] == \"(\"){\n            open_count_temp++;\n        }else{\n            close_count_temp++;\n        }\n    }\n    if(open_count_temp == close_count_temp){\n        return \"Yes\";\n    }\n    return \"No\";\n}\n\nint main(){\n    vector<string> lst;\n    lst.push_back(\"()(()\");\n    lst.push_back(\"()\");\n    lst.push_back(\")\");\n    lst.push_back(\"()()\");\n    lst.push_back(\"()()()\");\n    lst.push_back(\"()()()()\");\n    lst.push_back(\"()()()()()\");\n    lst.push_back(\"()()()()()()\");\n    lst.push_back(\"()()()()()()()\");\n    lst.push_back(\"()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()"}
{"task_id": "CPP/120", "prompt": "/*\nGiven a vector arr of integers and a positive integer k, return a sorted vector \nof length k with the maximum k numbers in arr.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n", "generation": "    vector<int> ans;\n    int n = arr.size();\n    if(n<k) return ans;\n    sort(arr.begin(),arr.end());\n    for(int i=0;i<k;i++){\n        ans.push_back(arr[i]);\n    }\n    return ans;\n}\n\nint main(){\n    vector<int> arr = {-3, -4, 5};\n    int k = 3;\n    vector<int> ans = maximum(arr,k);\n    for(int i=0;i<ans.size();i++){\n        printf(\"%d \",ans[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}"}
{"task_id": "CPP/121", "prompt": "/*\nGiven a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solutions(vector<int> lst){\n", "generation": "    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] % 2 == 1){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nint main(){\n    vector<int> lst = {5, 8, 7, 1};\n    printf(\"%d\", solutions(lst));\n    return 0;\n}\n"}
{"task_id": "CPP/122", "prompt": "/*\nGiven a non-empty vector of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n", "generation": "    int sum = 0;\n    for(int i=0;i<k;i++){\n        sum += arr[i];\n    }\n    return sum;\n}\nint main(){\n    vector<int> arr = {111,21,3,4000,5,6,7,8,9};\n    int k = 4;\n    int sum = add_elements(arr,k);\n    printf(\"%d\",sum);\n    return 0;\n}"}
{"task_id": "CPP/123", "prompt": "/*\nGiven a positive integer n, return a sorted vector that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n    1. Collatz(1) is {1}.\n    2. returned vector sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n", "generation": "    vector<int> odd_numbers;\n    int current_number = n;\n    while(current_number!= 1){\n        if(current_number % 2 == 0){\n            current_number = current_number / 2;\n        }\n        else{\n            current_number = (current_number * 3) + 1;\n        }\n        odd_numbers.push_back(current_number);\n    }\n    return odd_numbers;\n}\n\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> odd_numbers = get_odd_collatz(n);\n    sort(odd_numbers.begin(), odd_numbers.end());\n    for(int i = 0; i < odd_numbers.size(); i++){\n        printf(\"%d \", odd_numbers[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}"}
{"task_id": "CPP/124", "prompt": "/*\nYou have to write a function which validates a given date string and\nreturns true if the date is valid otherwise false.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n", "generation": "    int month,day,year;\n    int len = date.length();\n    if(len==0){\n        return false;\n    }\n    if(len==1){\n        if(date[0]=='0'){\n            return false;\n        }\n        return true;\n    }\n    if(len==2){\n        if(date[0]=='0' && date[1]=='0'){\n            return false;\n        }\n        if(date[0]=='0'){\n            return false;\n        }\n        if(date[1]=='0'){\n            return false;\n        }\n        return true;\n    }\n    if(len==3){\n        if(date[0]=='0' && date[1]=='0' && date[2]=='0'){\n            return false;\n        }\n        return true;\n    }\n    if(len==4){\n        return true;\n    }\n    if(len==5){\n        if(date[0]=='0' && date[1]=='0' && date[2]=='0' && date[3]=='0'){\n            return false;\n        }\n        return true;\n    }\n    if(len==6){\n        if(date[0]=='0' && date[1]=='0' && date[2]=='0' && date[3]=='0' && date[4]=='0'){\n            return false;\n        }\n        return true;\n    }\n    if(len==7){\n        if(date[0]=='0' && date[1]=='0' && date[2]=='0' && date[3]=='0' && date[4]=='0' && date[5]=='0'){\n            return false;\n        }\n        return true;\n    }\n    if(len==8){\n        if(date[0]=='0' && date[1]=='0' && date[2]=='0' && date[3]=='0' && date[4]=='0' && date[5]=='0' && date[6]=='0'){\n            return false;\n        }\n        return true;\n    }\n    if(len==9){\n        if(date[0]=='0' && date[1]=='0' && date[2]=='0' && date[3]=='0' && date[4]=='0' && date[5]=='0' && date[6]=='0' && date[7]=='0'){\n            return false;\n        }\n        return true;\n    }\n    if(len==10){\n        if(date[0]=='0' && date[1]=='0' && date[2]=='0' && date[3]=='0' && date[4]=='0' && date[5]=='0' && date[6]=='0' && date[7]=='0' && date[8]=='0'){\n            return false;\n        }\n        "}
{"task_id": "CPP/125", "prompt": "/*\nGiven a string of words, return a vector of words split on whitespace, if no whitespaces exists in the text you\nshould split on commas ',' if no commas exists you should return a vector with one element, the number of lower-case letters with odd order in the\nalphabet, ord(\"a\") = 0, ord(\"b\") = 1, ... ord(\"z\") = 25\nExamples\nsplit_words(\"Hello world!\") \u279e {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") \u279e {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n", "generation": "  string word;\n  vector<string> words;\n  for(int i=0; i<txt.length(); i++){\n    if(txt[i]==' '){\n      words.push_back(word);\n      word = \"\";\n    }else{\n      word += txt[i];\n    }\n  }\n  words.push_back(word);\n  return words;\n}\nint main(){\n  string txt = \"Hello,world!\";\n  vector<string> words = split_words(txt);\n  for(int i=0; i<words.size(); i++){\n    cout<<words[i]<<endl;\n  }\n  return 0;\n}\n"}
{"task_id": "CPP/126", "prompt": "/*\nGiven a vector of numbers, return whether or not they are sorted\nin ascending order. If vector has more than 1 duplicate of the same\nnumber, return false. Assume no negative numbers and only integers.\n\nExamples\nis_sorted({5}) \u279e true\nis_sorted({1, 2, 3, 4, 5}) \u279e true\nis_sorted({1, 3, 2, 4, 5}) \u279e false\nis_sorted({1, 2, 3, 4, 5, 6}) \u279e true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) \u279e true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) \u279e false\nis_sorted({1, 2, 2, 3, 3, 4}) \u279e true\nis_sorted({1, 2, 2, 2, 3, 4}) \u279e false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n", "generation": "  if(lst.size()<=1)\n    return true;\n  for(int i=0;i<lst.size()-1;i++){\n    if(lst[i]>lst[i+1])\n      return false;\n  }\n  return true;\n}\n\nint main(){\n  vector<int> lst;\n  lst.push_back(5);\n  lst.push_back(1);\n  lst.push_back(2);\n  lst.push_back(3);\n  lst.push_back(4);\n  lst.push_back(5);\n  lst.push_back(6);\n  lst.push_back(7);\n  if(is_sorted(lst))\n    printf(\"Yes\\n\");\n  else\n    printf(\"No\\n\");\n  return 0;\n}\n"}
{"task_id": "CPP/127", "prompt": "/*\nYou are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection({1, 2}, {2, 3}) ==> \"NO\"\nintersection({-1, 1}, {0, 4}) ==> \"NO\"\nintersection({-3, -1}, {-5, 5}) ==> \"YES\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection( vector<int> interval1,vector<int> interval2){\n", "generation": "    int start1 = interval1[0], end1 = interval1[1];\n    int start2 = interval2[0], end2 = interval2[1];\n    if(start1 > end2 || start2 > end1)\n        return \"NO\";\n    if(start1 == start2 && end1 == end2)\n        return \"YES\";\n    if(start1 == start2)\n        return intersection(vector<int>{end1, end2},vector<int>{start1, start2});\n    if(end1 == end2)\n        return intersection(vector<int>{start1, start2},vector<int>{end1, end2});\n    if(start1 > start2)\n        return intersection(vector<int>{start1, end1},vector<int>{start2, end2});\n    return intersection(vector<int>{start1, end1},vector<int>{start2, end2});\n}\nint main(){\n    vector<int> interval1 = {1, 2};\n    vector<int> interval2 = {2, 3};\n    string result = intersection(interval1,interval2);\n    printf(\"%s\\n\",result.c_str());\n    return 0;\n}"}
{"task_id": "CPP/128", "prompt": "/*\nYou are given a vector arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the vector, represented by 1, -1 or 0.\nNote: return -32768 for empty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n", "generation": "    int prod = 1;\n    int sum = 0;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] == 0){\n            sum = -32768;\n            break;\n        }\n        prod *= arr[i];\n        sum += abs(arr[i]) * abs(prod);\n    }\n    return sum;\n}\n\nint main(){\n    vector<int> arr = {1, 2, 2, -4};\n    printf(\"%d\\n\", prod_signs(arr));\n    return 0;\n}\n"}
{"task_id": "CPP/129", "prompt": "/*\nGiven a grid with N rows and N columns (N >= 2) and a positive integer k, \neach cell of the grid contains a value. Every integer in the range {1, N * N}\ninclusive appears exactly once on the cells of the grid.\n\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered vectors of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered vector of the values on the cells that the minimum path go through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n", "generation": "    int n = grid.size();\n    vector<int> ans;\n    vector<int> lst(n,0);\n    lst[0] = grid[0][0];\n    for(int i=1;i<n;i++){\n        lst[i] = grid[i][i] + lst[i-1];\n    }\n    for(int i=1;i<n;i++){\n        for(int j=0;j<i;j++){\n            if(lst[j] > lst[i]){\n                lst[i] = lst[j] + grid[i][i];\n            }\n        }\n    }\n    for(int i=0;i<n;i++){\n        if(lst[i] == k){\n            ans.push_back(i);\n        }\n    }\n    return ans;\n}\n\nint main(){\n    vector<vector<int>> grid = {{1,2,3}, {4,5,6}, {7,8,9}};\n    int k = 3;\n    vector<int> ans = minPath(grid,k);\n    for(int i=0;i<ans.size();i++){\n        printf(\"%d \",ans[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}"}
{"task_id": "CPP/130", "prompt": "/*\nEveryone knows Fibonacci sequence, it was studied deeply by mathematicians in \nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n", "generation": "    vector<int> v;\n    v.push_back(1);\n    v.push_back(3);\n    v.push_back(2);\n    v.push_back(8);\n    for(int i = 3; i <= n; i++){\n        v.push_back(v[i - 1] + v[i - 2] + v[i - 3]);\n    }\n    return v;\n}\n\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> v = tri(n);\n    for(int i = 0; i < v.size(); i++){\n        printf(\"%d \", v[i]);\n    }\n    return 0;\n}"}
{"task_id": "CPP/131", "prompt": "/*\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n", "generation": "\tint product = 1;\n\twhile(n){\n\t\tproduct *= n%10;\n\t\tn /= 10;\n\t}\n\treturn product;\n}\nint main(){\n\tint n = 0;\n\twhile(scanf(\"%d\", &n)!= EOF){\n\t\tprintf(\"%d\\n\", digits(n));\n\t}\n\treturn 0;\n}"}
{"task_id": "CPP/132", "prompt": "/*\nCreate a function that takes a string as input which contains only square brackets.\nThe function should return true if and only if there is a valid subsequence of brackets\nwhere at least one bracket in the subsequence is nested.\n\nis_nested(\"[[]]\") \u279e true\nis_nested(\"[]]]]]]][[[[[]\") \u279e false\nis_nested(\"[][]\") \u279e false\nis_nested(\"[]\") \u279e false\nis_nested(\"[[][]]\") \u279e true\nis_nested(\"[[]][[\") \u279e true\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_nested(string str){\n", "generation": "  int i=0,j=0,k=0;\n  while(i<str.length()){\n    if(str[i]=='['){\n      j++;\n    }\n    else if(str[i]==']'){\n      if(j==0){\n        return false;\n      }\n      j--;\n    }\n    i++;\n  }\n  return true;\n}\n\nint main(){\n  string str;\n  cin>>str;\n  if(is_nested(str)){\n    cout<<\"true\";\n  }\n  else{\n    cout<<\"false\";\n  }\n  return 0;\n}"}
{"task_id": "CPP/133", "prompt": "/*\nYou are given a vector of numbers.\nYou need to return the sum of squared numbers in the given vector,\nround each element in the vector to the upper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n", "generation": "    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        sum += pow(lst[i],2);\n    }\n    return sum;\n}\nint main(){\n    vector<float> lst;\n    lst.push_back(1);\n    lst.push_back(2);\n    lst.push_back(3);\n    lst.push_back(4);\n    lst.push_back(5);\n    lst.push_back(6);\n    lst.push_back(7);\n    lst.push_back(8);\n    lst.push_back(9);\n    lst.push_back(10);\n    lst.push_back(11);\n    lst.push_back(12);\n    lst.push_back(13);\n    lst.push_back(14);\n    lst.push_back(15);\n    lst.push_back(16);\n    lst.push_back(17);\n    lst.push_back(18);\n    lst.push_back(19);\n    lst.push_back(20);\n    lst.push_back(21);\n    lst.push_back(22);\n    lst.push_back(23);\n    lst.push_back(24);\n    lst.push_back(25);\n    lst.push_back(26);\n    lst.push_back(27);\n    lst.push_back(28);\n    lst.push_back(29);\n    lst.push_back(30);\n    lst.push_back(31);\n    lst.push_back(32);\n    lst.push_back(33);\n    lst.push_back(34);\n    lst.push_back(35);\n    lst.push_back(36);\n    lst.push_back(37);\n    lst.push_back(38);\n    lst.push_back(39);\n    lst.push_back(40);\n    lst.push_back(41);\n    lst.push_back(42);\n    lst.push_back(43);\n    lst.push_back(44);\n    lst.push_back(45);\n    lst.push_back(46);\n    lst.push_back(47);\n    lst.push_back(48);\n    lst.push_back(49);\n    lst.push_back(50);\n    lst.push_back(51);\n    lst.push_back(52);\n    lst.push_back(53);\n    lst.push_back(54);\n    lst.push_back(55);\n    lst.push_back(56);\n    lst.push_back(57);\n    lst.push_back(58);\n    lst.push_back(59);\n    lst.push_back(60);\n    lst.push_back(61);\n    lst.push_back(62);\n    lst.push_back(63);\n    lst.push_back(64);\n    lst.push_back(65);\n    lst.push_back(66);\n    lst.push_back(67);\n    lst.push_back(68);\n    lst.push_back(69);\n    lst.push_back(70);\n    lst.push_"}
{"task_id": "CPP/134", "prompt": "/*\nCreate a function that returns true if the last character\nof a given string is an alphabetical character and is not\na part of a word, and false otherwise.\nNote: \"word\" is a group of characters separated by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") \u279e false\ncheck_if_last_char_is_a_letter(\"apple pi e\") \u279e true\ncheck_if_last_char_is_a_letter(\"apple pi e \") \u279e false\ncheck_if_last_char_is_a_letter(\"\") \u279e false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n", "generation": "  int len = txt.length();\n  if(len == 0)\n    return false;\n  if(txt[len-1] =='')\n    return false;\n  if(txt[len-1] >= 'a' && txt[len-1] <= 'z')\n    return true;\n  return false;\n}\n\nint main(){\n  printf(\"%d\\n\", check_if_last_char_is_a_letter(\"apple pie\"));\n  printf(\"%d\\n\", check_if_last_char_is_a_letter(\"apple pi e\"));\n  printf(\"%d\\n\", check_if_last_char_is_a_letter(\"apple pi e \"));\n  printf(\"%d\\n\", check_if_last_char_is_a_letter(\"\"));\n  return 0;\n}"}
{"task_id": "CPP/135", "prompt": "/*\nCreate a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given vector will not contain\nduplicate values.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n", "generation": "    int n = arr.size();\n    int max = 0;\n    for(int i=0;i<n;i++){\n        int j = i-1;\n        while(j>=0 && arr[j]>arr[i]){\n            j--;\n        }\n        if(j<0){\n            return -1;\n        }\n        int k = i+1;\n        while(k<n && arr[k]>arr[i]){\n            k++;\n        }\n        if(k==n){\n            return -1;\n        }\n        int temp = arr[j];\n        arr[j] = arr[k];\n        arr[k] = temp;\n        if(arr[j]>arr[max]){\n            max = j;\n        }\n    }\n    return max;\n}\n\nint main(){\n    vector<int> arr = {1,2,4,3,5};\n    printf(\"%d\\n\",can_arrange(arr));\n    return 0;\n}\n"}
{"task_id": "CPP/136", "prompt": "/*\nCreate a function that returns a vector (a, b), where \"a\" is\nthe largest of negative integers, and \"b\" is the smallest\nof positive integers in a vector.\nIf there is no negative or positive integers, return them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n", "generation": "    vector<int> res;\n    if(lst.size() == 0) return res;\n    int max = lst[0], min = lst[0];\n    for(int i = 1; i < lst.size(); i++){\n        if(lst[i] > max) max = lst[i];\n        if(lst[i] < min) min = lst[i];\n    }\n    if(max == min) res.push_back(0);\n    else res.push_back(max);\n    res.push_back(min);\n    return res;\n}\n\n/*\nGiven a list of integers, find the largest and smallest integers that are not in the list.\n\nExample:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {1, 7}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n    vector<int> res;\n    if(lst.size() == 0) return res;\n    int max = lst[0], min = lst[0];\n    for(int i = 1; i < lst.size(); i++){\n        if(lst[i] > max) max = lst[i];\n        if(lst[i] < min) min = lst[i];\n    }\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i]!= max && lst[i]!= min) res.push_back(lst[i]);\n    }\n    return res;\n}\n\n/*\nGiven a list of integers, find the largest and smallest integers that are not in the list.\n\nExample:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {1, 7}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n    vector<int> res;\n    if(lst.size() == 0) return res;\n    int max = lst[0], min = lst[0];\n    for(int i = 1; i < lst.size(); i++){\n        if(lst[i] > max) max = lst[i];\n        if(lst[i] < min) min = lst[i];\n    }\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i]!= max && lst[i]!= min) res.push_back(lst[i]);\n    }\n    return res;\n}\n\n/*\nGiven a list of integers, find the largest and smallest integers that are not in the list.\n\nExample:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {1, 7}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n    vector<int> res;\n    if"}
{"task_id": "CPP/137", "prompt": "/*\nCreate a function that takes integers, floats, or strings representing\nreal numbers, and returns the larger variable in its given variable type.\nReturn \"None\" if the values are equal.\nNote: If a real number is represented as a string, the floating point might be . or ,\n\ncompare_one(1, 2.5) \u279e 2.5\ncompare_one(1, \"2,3\") \u279e \"2,3\"\ncompare_one(\"5,1\", \"6\") \u279e \"6\"\ncompare_one(\"1\", 1) \u279e \"None\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\nboost::any compare_one(boost::any a,boost::any b){\n", "generation": "  if(a.type()==typeid(int)){\n    int x=boost::any_cast<int>(a);\n    int y=boost::any_cast<int>(b);\n    if(x>y) return x;\n    else return y;\n  }\n  else if(a.type()==typeid(float)){\n    float x=boost::any_cast<float>(a);\n    float y=boost::any_cast<float>(b);\n    if(x>y) return x;\n    else return y;\n  }\n  else if(a.type()==typeid(string)){\n    string x=boost::any_cast<string>(a);\n    string y=boost::any_cast<string>(b);\n    if(x>y) return x;\n    else return y;\n  }\n  else return \"None\";\n}\nint main(){\n  int x=1;\n  int y=2;\n  float z=2.5;\n  string s=\"2,3\";\n  printf(\"%d\\n\",compare_one(x,y));\n  printf(\"%f\\n\",compare_one(x,z));\n  printf(\"%s\\n\",compare_one(x,s));\n  return 0;\n}\n\n/*\n\nThe compare_two() function takes two variables and returns a boolean value.\nIf the two variables are of the same type, the function returns true.\nIf the two variables are of different types, the function returns false.\n\ncompare_two(1, 2.5) \u279e true\ncompare_two(1, \"2,3\") \u279e false\ncompare_two(\"5,1\", \"6\") \u279e false\ncompare_two(\"1\", 1) \u279e false\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\nboost::any compare_two(boost::any a,boost::any b){\n  if(a.type()==typeid(int)){\n    int x=boost::any_cast<int>(a);\n    int y=boost::any_cast<int>(b);\n    if(x==y) return true;\n    else return false;\n  }\n  else if(a.type()==typeid(float)){\n    float x=boost::any_cast<float>(a);\n    float y=boost::any_cast<float>(b);\n    if(x==y) return true;\n    else return false;\n  }\n  else if(a.type()==typeid(string)){\n    string x=boost::any_cast<string>(a);\n    string y=boost::any_cast<string>(b);\n    if(x==y) return true;\n    else return false;\n  }\n  else return false;\n}\nint main(){\n  int x=1;\n  int y=2;\n  float z=2.5;\n  string s=\"2,3\";\n  printf(\"%d\\n\",compare_two(x,y));\n  printf(\"%f\\n\",compare_two(x,z));\n  printf(\"%s\\n\",compare_two(x,s));\n  return 0;\n}\n\n/*\n\nThe compare_three() function takes three variables and returns a boolean value.\nIf the three variables are of the same type, the function returns true.\nIf the three variables are of different types, the function returns false."}
{"task_id": "CPP/138", "prompt": "/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n", "generation": "    int sum = 0;\n    int i = 0;\n    while(n){\n        sum += n%2;\n        n /= 2;\n    }\n    if(sum == 4){\n        return true;\n    }else{\n        return false;\n    }\n}\n\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    if(is_equal_to_sum_even(n)){\n        printf(\"true\");\n    }else{\n        printf(\"false\");\n    }\n    return 0;\n}"}
{"task_id": "CPP/139", "prompt": "/*\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n", "generation": "    if(n==0)\n        return 1;\n    else\n        return n*special_factorial(n-1);\n}\n\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%lld\\n\",special_factorial(n));\n    return 0;\n}\n\n/*\n\nThe function factorial is defined as:\nfactorial(n) = n * factorial(n-1)\nwhere n > 0\n\nFor example:\n>>> factorial(4)\n24\n\nThe function will receive an integer as input and should return the factorial\nof this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long factorial(int n){\n    if(n==0)\n        return 1;\n    else\n        return n*factorial(n-1);\n}\n\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%lld\\n\",factorial(n));\n    return 0;\n}\n\n/*\n\nThe function is defined as:\nis_prime(n) = (n > 1) and (n is divisible by 1 and n is divisible by all integers from 2 to n-1)\n\nFor example:\n>>> is_prime(2)\nTrue\n>>> is_prime(3)\nTrue\n>>> is_prime(4)\nFalse\n\nThe function will receive an integer as input and should return true if this\ninteger is prime, otherwise false.\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(int n){\n    if(n==1)\n        return false;\n    else if(n==2)\n        return true;\n    else\n        for(int i=2;i<=n/2;i++){\n            if(n%i==0)\n                return false;\n        }\n    return true;\n}\n\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%s\\n\",is_prime(n)?\"true\":\"false\");\n    return 0;\n}\n\n/*\n\nThe function is defined as:\nis_palindrome(n) = (n is divisible by 1 and n is divisible by all integers from 1 to n)\n\nFor example:\n>>> is_palindrome(121)\nTrue\n>>> is_palindrome(1221)\nTrue\n\nThe function will receive an integer as input and should return true if this\ninteger is a palindrome, otherwise false.\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_palindrome(int n){\n    if(n==0)\n        return false;\n    else if(n==1)\n        return true;\n    else\n        for(int i=1;i<=n/2;i++){\n            if(n%i!=0)\n                return false;\n        }\n    return true;\n}\n\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%s\\n\",is_palindrome(n)?\"true\":\"false\");\n    return 0;\n}\n\n/*\n\nThe function is defined as:\nis_palindrome(n) = (n is divisible by 1 and n is divisible by all integers from 1 to n)\n\nFor example:\n>>> is_palindrome(121)\nTrue\n>>> is_palindrome(1221)\nTrue\n\nThe function will receive an integer as input and should return true if this\ninteger is a palindrome, otherwise false.\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_palindrome(int n){\n    if(n==0)\n        return false;\n    else if(n==1)\n        return true;\n    else\n        for(int i=1"}
{"task_id": "CPP/140", "prompt": "/*\nGiven a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - \n\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n", "generation": "    string result = \"\";\n    for(int i = 0; i < text.size(); i++){\n        if(text[i] ==''){\n            result += '_';\n        }else{\n            result += text[i];\n        }\n    }\n    return result;\n}\n\nint main(){\n    string text = \"Example\";\n    printf(\"%s\\n\", fix_spaces(text).c_str());\n    return 0;\n}\n"}
{"task_id": "CPP/141", "prompt": "/*\nCreate a function which takes a string representing a file's name, and returns\n\"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot \".\"\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: {'txt\", \"exe\", \"dll\"}\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n", "generation": "    int len = file_name.length();\n    if(len<3){\n        return \"No\";\n    }\n    int i=0;\n    while(i<len && file_name[i]!='.'){\n        i++;\n    }\n    if(i==len){\n        return \"No\";\n    }\n    if(file_name[i]!='.'){\n        return \"No\";\n    }\n    if(file_name[i-1]<'a' || file_name[i-1]>'z'){\n        return \"No\";\n    }\n    if(file_name[i+1]<'a' || file_name[i+1]>'z'){\n        return \"No\";\n    }\n    if(file_name[i-1]==file_name[i+1]){\n        return \"No\";\n    }\n    if(file_name[i-1]==file_name[i+1] && file_name[i-1]!='a' && file_name[i-1]!='A'){\n        return \"No\";\n    }\n    return \"Yes\";\n}\nint main(){\n    string file_name;\n    while(true){\n        cin>>file_name;\n        cout<<file_name_check(file_name)<<endl;\n    }\n    return 0;\n}\n"}
{"task_id": "CPP/142", "prompt": "/*\n\"\nThis function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n", "generation": "    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        if(i%3==0 && i%4!=0){\n            sum += lst[i]*lst[i];\n        }\n    }\n    return sum;\n}\n\nint main(){\n    vector<int> lst = {1,2,3};\n    vector<int> lst2 = {-1,-5,2,-1,-5};\n    vector<int> lst3 = {};\n    vector<int> lst4 = {-1,-5,2,-1,-5};\n    printf(\"%d\\n\", sum_squares(lst));\n    printf(\"%d\\n\", sum_squares(lst2));\n    printf(\"%d\\n\", sum_squares(lst3));\n    printf(\"%d\\n\", sum_squares(lst4));\n    return 0;\n}"}
{"task_id": "CPP/143", "prompt": "/*\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\n", "generation": "    string new_sentence = \"\";\n    int i = 0;\n    while(i < sentence.length()){\n        if(isPrime(sentence[i])){\n            new_sentence += sentence[i];\n        }\n        i++;\n    }\n    return new_sentence;\n}\nbool isPrime(int n){\n    if(n == 1){\n        return false;\n    }\n    for(int i = 2; i <= n/2; i++){\n        if(n % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\nint main(){\n    string sentence = \"This is a test\";\n    string new_sentence = words_in_sentence(sentence);\n    printf(\"%s\\n\", new_sentence.c_str());\n    return 0;\n}"}
{"task_id": "CPP/144", "prompt": "/*\nYour task is to implement a function that will simplify the expression\nx * n. The function returns true if x * n evaluates to a whole number and false\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = true\nsimplify(\"1/6\", \"2/1\") = false\nsimplify(\"7/10\", \"10/2\") = false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool simplify(string x,string n){\n", "generation": "\tint num = atoi(x.c_str());\n\tint den = atoi(n.c_str());\n\tif(num == 0 || den == 0) return false;\n\tif(num == den) return true;\n\tif(num > den) swap(num,den);\n\tint i = 0;\n\twhile(num > 0 && i < den){\n\t\tnum /= den;\n\t\ti++;\n\t}\n\tif(num == 1) return true;\n\treturn false;\n}\nint main(){\n\tstring x,n;\n\twhile(scanf(\"%s/%s\",&x,&n)!= EOF){\n\t\tif(simplify(x,n)) printf(\"true\\n\");\n\t\telse printf(\"false\\n\");\n\t}\n\treturn 0;\n}\n"}
{"task_id": "CPP/145", "prompt": "/*\nWrite a function which sorts the given vector of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original vector.\n\nFor example:\n>>> order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12, 11}\n>>> order_by_points({}) == {}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> order_by_points(vector<int> nums){\n", "generation": "    vector<int> res;\n    int sum = 0;\n    for(int i=0; i<nums.size(); i++){\n        sum += nums[i];\n    }\n    int temp = sum;\n    for(int i=0; i<nums.size(); i++){\n        if(temp == sum){\n            res.push_back(nums[i]);\n        }\n        else if(temp > sum){\n            res.push_back(nums[i]);\n            temp -= nums[i];\n        }\n    }\n    return res;\n}\n\nint main(){\n    vector<int> nums;\n    int n;\n    scanf(\"%d\", &n);\n    for(int i=0; i<n; i++){\n        int temp;\n        scanf(\"%d\", &temp);\n        nums.push_back(temp);\n    }\n    vector<int> res = order_by_points(nums);\n    for(int i=0; i<res.size(); i++){\n        printf(\"%d \", res[i]);\n    }\n    return 0;\n}\n"}
{"task_id": "CPP/146", "prompt": "/*\nWrite a function that takes a vector of numbers as input and returns \nthe number of elements in the vector that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n", "generation": "    int count = 0;\n    for(int i = 0; i < nums.size(); i++){\n        if(nums[i] > 10 && nums[i] % 2 == 1){\n            count++;\n        }\n    }\n    return count;\n}\n\nint main(){\n    vector<int> nums = {15, -73, 14, -15};\n    printf(\"%d\", specialFilter(nums));\n    return 0;\n}"}
{"task_id": "CPP/147", "prompt": "/*\nYou are given a positive integer n. You have to create an integer vector a of length n.\n    For each i (1 \u2264 i \u2264 n), the value of a{i} = i * i - i + 1.\n    Return the number of triples (a{i}, a{j}, a{k}) of a where i < j < k, \nand a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_matrix_triples(int n){\n", "generation": "    int count = 0;\n    vector<int> a(n);\n    for(int i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n    }\n    for(int i = 0; i < n; i++){\n        for(int j = i + 1; j < n; j++){\n            for(int k = j + 1; k < n; k++){\n                if(a[i] + a[j] + a[k] == 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nint main(){\n    int n = 5;\n    printf(\"%d\\n\", get_matrix_triples(n));\n    return 0;\n}"}
{"task_id": "CPP/148", "prompt": "/*\nThere are eight planets in our solar system: the closerst to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2. \nThe function should return a vector containing all planets whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2, sorted by \nthe proximity to the sun. \nThe function should return an empty vector if planet1 or planet2\nare not correct planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n", "generation": "    vector<string> result;\n    int i=0,j=0;\n    while(i<planet1.length() && j<planet2.length()){\n        if(planet1[i]==planet2[j]){\n            result.push_back(planet1.substr(i,1));\n            i++;\n            j++;\n        }\n        else if(planet1[i]<planet2[j]){\n            result.push_back(planet1.substr(i,1));\n            i++;\n        }\n        else{\n            result.push_back(planet2.substr(j,1));\n            j++;\n        }\n    }\n    while(i<planet1.length()){\n        result.push_back(planet1.substr(i,1));\n        i++;\n    }\n    while(j<planet2.length()){\n        result.push_back(planet2.substr(j,1));\n        j++;\n    }\n    return result;\n}\n\nint main(){\n    string planet1,planet2;\n    vector<string> result;\n    while(scanf(\"%s\",&planet1)!=EOF){\n        scanf(\"%s\",&planet2);\n        result=bf(planet1,planet2);\n        for(int i=0;i<result.size();i++){\n            printf(\"%s\\n\",result[i].c_str());\n        }\n    }\n    return 0;\n}\n"}
{"task_id": "CPP/149", "prompt": "/*\nWrite a function that accepts a vector of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted vector with a sorted order,\nThe vector is always a vector of strings and never a vector of numbers,\nand it may contain duplicates.\nThe order of the vector should be ascending by length of each word, and you\nshould return the vector sorted by that rule.\nIf two words have the same length, sort the vector alphabetically.\nThe function should return a vector of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n", "generation": "    vector<string> result;\n    int sum = 0;\n    for(int i=0; i<lst.size(); i++){\n        sum += atoi(lst[i].c_str());\n    }\n    for(int i=0; i<lst.size(); i++){\n        if(sum - atoi(lst[i].c_str()) == 0){\n            result.push_back(lst[i]);\n        }\n    }\n    return result;\n}\n\nvector<string> sorted_list_diff(vector<string> lst){\n    vector<string> result;\n    int diff = 0;\n    for(int i=0; i<lst.size(); i++){\n        diff += atoi(lst[i].c_str());\n    }\n    for(int i=0; i<lst.size(); i++){\n        if(diff - atoi(lst[i].c_str()) == 0){\n            result.push_back(lst[i]);\n        }\n    }\n    return result;\n}\n\nvector<string> sorted_list_product(vector<string> lst){\n    vector<string> result;\n    int product = 1;\n    for(int i=0; i<lst.size(); i++){\n        product *= atoi(lst[i].c_str());\n    }\n    for(int i=0; i<lst.size(); i++){\n        if(product == 1){\n            result.push_back(lst[i]);\n        }\n    }\n    return result;\n}\n\nvector<string> sorted_list_sort(vector<string> lst){\n    vector<string> result;\n    sort(lst.begin(), lst.end());\n    for(int i=0; i<lst.size(); i++){\n        result.push_back(lst[i]);\n    }\n    return result;\n}\n\nvector<string> sorted_list_sort_by_length(vector<string> lst){\n    vector<string> result;\n    sort(lst.begin(), lst.end(), [](string a, string b){\n        return a.length() < b.length();\n    });\n    for(int i=0; i<lst.size(); i++){\n        result.push_back(lst[i]);\n    }\n    return result;\n}\n\nvector<string> sorted_list_sort_by_length_and_alphabetical(vector<string> lst){\n    vector<string> result;\n    sort(lst.begin(), lst.end(), [](string a, string b){\n        return a.length() < b.length() || a < b;\n    });\n    for(int i=0; i<lst.size(); i++){\n        result.push_back(lst[i]);\n    }\n    return result;\n}\n\nvector<string> sorted_list_sort_by_length_and_alphabetical_and_odd_length(vector<string> lst){\n    vector<string> result;\n    sort(lst.begin(), lst.end(), [](string a, string b){\n        return a.length() < b.length() || a < b || a.length() % 2 == 1;"}
{"task_id": "CPP/150", "prompt": "/*\nA simple program which should return the value of x if n is \na prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n", "generation": "\tif(n%2==0){\n\t\treturn x;\n\t}else{\n\t\treturn y;\n\t}\n}\nint main(){\n\tint x,y;\n\tscanf(\"%d %d %d\",&x,&y,&n);\n\tprintf(\"%d\\n\",x_or_y(n,x,y));\n\treturn 0;\n}\n/*\n\n2. Write a program which should return the value of x if n is a prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n\tif(n%2==0){\n\t\treturn x;\n\t}else{\n\t\treturn y;\n\t}\n}\nint main(){\n\tint x,y;\n\tscanf(\"%d %d %d\",&x,&y,&n);\n\tprintf(\"%d\\n\",x_or_y(n,x,y));\n\treturn 0;\n}\n/*\n\n3. Write a program which should return the value of x if n is a prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n\tif(n%2==0){\n\t\treturn x;\n\t}else{\n\t\treturn y;\n\t}\n}\nint main(){\n\tint x,y;\n\tscanf(\"%d %d %d\",&x,&y,&n);\n\tprintf(\"%d\\n\",x_or_y(n,x,y));\n\treturn 0;\n}\n/*\n\n4. Write a program which should return the value of x if n is a prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n\tif(n%2==0){\n\t\treturn x;\n\t}else{\n\t\treturn y;\n\t}\n}\nint main(){\n\tint x,y;\n\tscanf(\"%d %d %d\",&x,&y,&n);\n\tprintf(\"%d\\n\",x_or_y(n,x,y));\n\treturn 0;\n}\n/*\n\n5. Write a program which should return the value of x if n is a prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n\tif(n%2==0){\n\t\treturn x;\n\t}else{\n\t\treturn y;\n\t}\n}\nint main(){\n\tint x,y;\n\tscanf(\"%d %d %d\",&x,&y,&n);\n\tprintf(\"%d\\n\",x_or_y(n,x,y));\n\treturn 0;\n}\n/*\n\n6. Write a program which should return the value of x if n is a prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15,"}
{"task_id": "CPP/151", "prompt": "/*\nGiven a vector of numbers, return the sum of squares of the numbers\nin the vector that are odd. Ignore numbers that are negative or not integers.\n\ndouble_the_difference({1, 3, 2, 0}) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference({-1, -2, 0}) == 0\ndouble_the_difference({9, -2}) == 81\ndouble_the_difference({0}) == 0  \n\nIf the input vector is empty, return 0.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nlong long double_the_difference(vector<float> lst){\n", "generation": "    long long double sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] % 2!= 0){\n            sum += pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n\nint main(){\n    vector<float> lst;\n    lst.push_back(1);\n    lst.push_back(3);\n    lst.push_back(2);\n    lst.push_back(0);\n    printf(\"%lld\\n\", double_the_difference(lst));\n    return 0;\n}"}
{"task_id": "CPP/152", "prompt": "/*\nI think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two vectors of scores and guesses of equal length, where each index shows a match. \nReturn a vector of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n", "generation": "\tvector<int> result;\n\tfor(int i=0;i<game.size();i++){\n\t\tif(game[i]==guess[i]){\n\t\t\tresult.push_back(0);\n\t\t}else{\n\t\t\tresult.push_back(abs(game[i]-guess[i]));\n\t\t}\n\t}\n\treturn result;\n}\n\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tvector<int> game;\n\tvector<int> guess;\n\tfor(int i=0;i<n;i++){\n\t\tint temp;\n\t\tscanf(\"%d\",&temp);\n\t\tgame.push_back(temp);\n\t}\n\tfor(int i=0;i<n;i++){\n\t\tint temp;\n\t\tscanf(\"%d\",&temp);\n\t\tguess.push_back(temp);\n\t}\n\tvector<int> result=compare(game,guess);\n\tfor(int i=0;i<result.size();i++){\n\t\tprintf(\"%d \",result[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}"}
{"task_id": "CPP/153", "prompt": "/*\nYou will be given the name of a class (a string) and a vector of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n", "generation": "\tint strength = 0;\n\tstring strongest_extension = \"\";\n\tfor(int i=0;i<extensions.size();i++){\n\t\tint count = 0;\n\t\tstring extension = extensions[i];\n\t\tfor(int j=0;j<extension.size();j++){\n\t\t\tif(extension[j]=='A' || extension[j]=='a'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(extension[j]=='B' || extension[j]=='b'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(extension[j]=='C' || extension[j]=='c'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(extension[j]=='D' || extension[j]=='d'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(extension[j]=='E' || extension[j]=='e'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(extension[j]=='F' || extension[j]=='f'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(extension[j]=='G' || extension[j]=='g'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(extension[j]=='H' || extension[j]=='h'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(extension[j]=='I' || extension[j]=='i'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(extension[j]=='J' || extension[j]=='j'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(extension[j]=='K' || extension[j]=='k'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(extension[j]=='L' || extension[j]=='l'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(extension[j]=='M' || extension[j]=='m'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(extension[j]=='N' || extension[j]=='n'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(extension[j]=='O' || extension[j]=='o'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(extension[j]=='P' || extension[j]=='p'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(extension[j]=='Q' || extension[j]=='q'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif("}
{"task_id": "CPP/154", "prompt": "/*\nYou are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\ncycpattern_check(\"abcd\",\"abd\") => false\ncycpattern_check(\"hello\",\"ell\") => true\ncycpattern_check(\"whassup\",\"psus\") => false\ncycpattern_check(\"abab\",\"baa\") => true\ncycpattern_check(\"efef\",\"eeff\") => false\ncycpattern_check(\"himenss\",'simen\") => true\n\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool cycpattern_check(string a,string b){\n", "generation": "    int i=0,j=0,k=0;\n    while(i<a.size() && j<b.size()){\n        if(a[i]==b[j]){\n            i++;\n            j++;\n        }\n        else if(a[i]>b[j]){\n            j++;\n        }\n        else if(a[i]<b[j]){\n            i++;\n        }\n        if(i==a.size() && j==b.size()){\n            return true;\n        }\n    }\n    return false;\n}\nint main(){\n    string a,b;\n    cin>>a>>b;\n    if(cycpattern_check(a,b)){\n        cout<<\"true\"<<endl;\n    }\n    else{\n        cout<<\"false\"<<endl;\n    }\n    return 0;\n}\n"}
{"task_id": "CPP/155", "prompt": "/*\nGiven an integer. return a vector that has the number of even and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n", "generation": "    vector<int> result;\n    int temp = num;\n    int even_count = 0;\n    int odd_count = 0;\n    while(temp){\n        int digit = temp % 10;\n        if(digit % 2 == 0){\n            even_count++;\n        }else{\n            odd_count++;\n        }\n        temp /= 10;\n    }\n    result.push_back(even_count);\n    result.push_back(odd_count);\n    return result;\n}\n\nint main(){\n    int num;\n    scanf(\"%d\", &num);\n    vector<int> result = even_odd_count(num);\n    printf(\"%d %d\\n\", result[0], result[1]);\n    return 0;\n}"}
{"task_id": "CPP/156", "prompt": "/*\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_romank(int number){\n", "generation": "    string result = \"\";\n    vector<int> v;\n    v.push_back(1);\n    v.push_back(2);\n    v.push_back(4);\n    v.push_back(5);\n    v.push_back(9);\n    v.push_back(10);\n    v.push_back(40);\n    v.push_back(50);\n    v.push_back(90);\n    v.push_back(100);\n    v.push_back(400);\n    v.push_back(500);\n    v.push_back(900);\n    v.push_back(1000);\n    for(int i = 0; i < v.size(); i++){\n        if(number >= v[i]){\n            number -= v[i];\n            while(number >= v[i]){\n                result += \"M\" + \"C\" + \"D\" + \"X\" + \"I\";\n                number -= v[i];\n            }\n        }\n    }\n    return result;\n}\n\n/*\n\nint main(){\n    int number = 5;\n    string result = int_to_mini_romank(number);\n    printf(\"%s\\n\", result.c_str());\n    return 0;\n}\n\n*/\n"}
{"task_id": "CPP/157", "prompt": "/*\nGiven the lengths of the three sides of a triangle. Return true if the three\nsides form a right-angled triangle, false otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or \n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n", "generation": "    float s=(a+b+c)/2;\n    float area=sqrt(s*(s-a)*(s-b)*(s-c));\n    if(area==0) return false;\n    else return true;\n}\n\nint main(){\n    float a,b,c;\n    scanf(\"%f %f %f\",&a,&b,&c);\n    if(right_angle_triangle(a,b,c)) printf(\"true\");\n    else printf(\"false\");\n    return 0;\n}\n"}
{"task_id": "CPP/158", "prompt": "/*\nWrite a function that accepts a vector of strings.\nThe vector contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n\nfind_max({\"name\", \"of\", 'string\"}) == 'string\"\nfind_max({\"name\", \"enam\", \"game\"}) == \"enam\"\nfind_max({\"aaaaaaa\", \"bb\" ,\"cc\"}) == \"aaaaaaa\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring find_max(vector<string> words){\n", "generation": "    string max_word = \"\";\n    int max_count = 0;\n    for(int i=0; i<words.size(); i++){\n        int count = 0;\n        for(int j=0; j<words[i].size(); j++){\n            if(words[i][j] ==''){\n                count++;\n            }\n        }\n        if(count > max_count){\n            max_count = count;\n            max_word = words[i];\n        }\n    }\n    return max_word;\n}\n\nint main(){\n    vector<string> words = {\"name\", \"of\", \"string\"};\n    string max_word = find_max(words);\n    printf(\"%s\\n\", max_word.c_str());\n    return 0;\n}"}
{"task_id": "CPP/159", "prompt": "/*\nYou\"re a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return a vector of { total number of eaten carrots after your meals,\n                                the number of carrots left after your meals }\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number,int need,int remaining){\n", "generation": "    vector<int> result;\n    int total = number + need;\n    int i = 0;\n    while(remaining > 0){\n        if(remaining >= total){\n            result.push_back(total);\n            remaining -= total;\n            i++;\n        }else{\n            result.push_back(remaining);\n            remaining = 0;\n        }\n    }\n    return result;\n}\nint main(){\n    int number,need,remaining;\n    scanf(\"%d %d %d\",&number,&need,&remaining);\n    vector<int> result = eat(number,need,remaining);\n    printf(\"%d\\n\",result[0]);\n    printf(\"%d\\n\",result[1]);\n    return 0;\n}\n"}
{"task_id": "CPP/160", "prompt": "/*\nGiven two vectors operator, and operand. The first vector has basic algebra operations, and \nthe second vector is a vector of integers. Use the two given vectors to build the algebric \nexpression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n", "generation": "    int result = 0;\n    for(int i = 0; i < operato.size(); i++){\n        if(operato[i] == \"+\"){\n            result += operand[i];\n        }\n        else if(operato[i] == \"-\"){\n            result -= operand[i];\n        }\n        else if(operato[i] == \"*\"){\n            result *= operand[i];\n        }\n        else if(operato[i] == \"//\"){\n            result = result / operand[i];\n        }\n        else if(operato[i] == \"**\"){\n            result = pow(result, operand[i]);\n        }\n    }\n    return result;\n}\nint main(){\n    vector<string> operato;\n    vector<int> operand;\n    string s;\n    int n;\n    scanf(\"%d\", &n);\n    for(int i = 0; i < n; i++){\n        cin >> s;\n        operato.push_back(s);\n    }\n    for(int i = 0; i < n; i++){\n        cin >> s;\n        operand.push_back(atoi(s.c_str()));\n    }\n    int result = do_algebra(operato, operand);\n    printf(\"%d\\n\", result);\n    return 0;\n}\n/*\n\n*/\n"}
{"task_id": "CPP/161", "prompt": "/*\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n", "generation": "    string res = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n            res += s[i] + 'A' - 'a';\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            res += s[i] - 'A' + 'a';\n        }\n        else{\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main(){\n    string s = \"1234\";\n    cout << solve(s) << endl;\n    return 0;\n}"}
{"task_id": "CPP/162", "prompt": "/*\nGiven a string 'text\", return its md5 hash equivalent string.\nIf 'text\" is an empty string, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n", "generation": "    string md5_hash = \"\";\n    unsigned char md5_hash_value[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), md5_hash_value);\n    for(int i=0; i<MD5_DIGEST_LENGTH; i++){\n        md5_hash += to_string(md5_hash_value[i]);\n    }\n    return md5_hash;\n}\n\nint main(){\n    string text = \"Hello world\";\n    string md5_hash = string_to_md5(text);\n    printf(\"%s\\n\", md5_hash.c_str());\n    return 0;\n}\n\n/*\n\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n    string md5_hash = \"\";\n    unsigned char md5_hash_value[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), md5_hash_value);\n    for(int i=0; i<MD5_DIGEST_LENGTH; i++){\n        md5_hash += to_string(md5_hash_value[i]);\n    }\n    return md5_hash;\n}\n\nint main(){\n    string text = \"Hello world\";\n    string md5_hash = string_to_md5(text);\n    printf(\"%s\\n\", md5_hash.c_str());\n    return 0;\n}\n\n*/\n\n/*\n\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n    string md5_hash = \"\";\n    unsigned char md5_hash_value[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), md5_hash_value);\n    for(int i=0; i<MD5_DIGEST_LENGTH; i++){\n        md5_hash += to_string(md5_hash_value[i]);\n    }\n    return md5_hash;\n}\n\nint main(){\n    string text = \"Hello world\";\n    string md5_hash = string_to_md5(text);\n    printf(\"%s\\n\", md5_hash.c_str());\n    return 0;\n}\n\n*/\n\n/*\n\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n    string md5_hash = \"\";\n    unsigned char md5_hash_value[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.length(), md5_hash_value);\n    for(int i=0; i<MD5_DIGEST_LENGTH; i++){\n        md5_hash += to_string(md5_hash_value[i]);\n    }\n    return md5_hash;\n}\n\nint main(){\n    string text = \"Hello world\";\n    string md5_hash = string_to_md5(text);\n    printf(\"%s\\n\", md5_hash.c_str());\n    return 0;\n}\n\n*/\n\n/*\n\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n    string md5_hash = \"\";\n    unsigned char md5_hash_value[MD5_DIGEST_LENGTH];\n    MD5((unsigned"}
{"task_id": "CPP/163", "prompt": "/*\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n", "generation": "    vector<int> res;\n    int temp=a;\n    while(temp<=b){\n        res.push_back(temp);\n        temp=temp*10+a;\n    }\n    return res;\n}\n\nint main(){\n    vector<int> res=generate_integers(2,8);\n    for(int i=0;i<res.size();i++){\n        printf(\"%d \",res[i]);\n    }\n    return 0;\n}\n"}
